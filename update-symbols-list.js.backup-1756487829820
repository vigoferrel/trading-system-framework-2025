
// Constantes f√≠sicas reales del sistema
const PHYSICAL_CONSTANTS = {
  "QUANTUM_COHERENCE": 0.75,
  "QUANTUM_CONSCIOUSNESS": 0.8,
  "QUANTUM_ENTANGLEMENT": 0.65,
  "QUANTUM_SUPERPOSITION": 0.7,
  "QUANTUM_TUNNELING": 0.6,
  "MARKET_VOLATILITY": 0.05,
  "MARKET_MOMENTUM": 0.1,
  "MARKET_LIQUIDITY": 0.75,
  "MARKET_SPREAD": 0.001,
  "MARKET_DEPTH": 500000,
  "FUNDING_RATE": 0.02,
  "FUNDING_VOLATILITY": 0.01,
  "FUNDING_DEVIATION": 0.5,
  "FUNDING_ANNUALIZED": 5,
  "LIQUIDATION_PROBABILITY": 0.05,
  "SLIPPAGE_RATE": 0.0025,
  "VOLATILITY_RISK": 0.1,
  "EXECUTION_RISK": 0.005,
  "VOLUME_24H": 500000,
  "VOLUME_RATIO": 0.75,
  "VOLUME_EXPANSION": 300000,
  "PRICE_CHANGE": 0.02,
  "PRICE_ACCELERATION": 0.015,
  "PRICE_MOMENTUM": 0.01,
  "TIME_TO_FUNDING": 1800000,
  "SESSION_INTENSITY": 0.6,
  "TEMPORAL_RESONANCE": 0.7,
  "FIBONACCI_STRENGTH": 0.75,
  "FIBONACCI_INDEX": 5,
  "NEURAL_CONFIDENCE": 0.85,
  "NEURAL_COHERENCE": 0.8,
  "NEURAL_ENTANGLEMENT": 0.7,
  "BASE_LEVERAGE": 15,
  "CONSERVATIVE_LEVERAGE": 10,
  "AGGRESSIVE_LEVERAGE": 25,
  "STOP_LOSS": 0.03,
  "TAKE_PROFIT": 0.06,
  "BASE_SCORE": 0.65,
  "CONFIDENCE_SCORE": 0.75,
  "QUALITY_SCORE": 0.8
};

const axios = require('axios');

async function updateSymbolsList() {
    try {
        console.log('üîÑ [ACTUALIZACI√ìN] Generando lista completa de s√≠mbolos de Binance Futures...\n');
        
        // Obtener todos los s√≠mbolos de la API de Binance Futures
        const response = await axios.get('https://fapi.binance.com/fapi/v1/ticker/24hr');
        
        if (response.data && Array.isArray(response.data)) {
            // Filtrar solo s√≠mbolos USDT
            const usdtSymbols = response.data.filter(item => item.symbol.endsWith('USDT'));
            
            console.log(`üìä Total s√≠mbolos USDT encontrados: ${usdtSymbols.length}`);
            
            // Filtrar s√≠mbolos v√°lidos (con precios y vol√∫menes razonables)
            const validSymbols = usdtSymbols.filter(item => {
                const price = parseFloat(item.lastPrice);
                const volume = parseFloat(item.volume);
                const change = parseFloat(item.priceChangePercent);
                
                // Criterios de validaci√≥n
                return price > 0 && 
                       price < 100000 && 
                       volume > 0 && 
                       Math.abs(change) < 1000; // Excluir cambios extremos
            });
            
            console.log(`‚úÖ S√≠mbolos v√°lidos despu√©s de filtrado: ${validSymbols.length}`);
            
            // Ordenar por volumen (mayor a menor)
            validSymbols.sort((a, b) => parseFloat(b.volume) - parseFloat(a.volume));
            
            // Generar la nueva lista de s√≠mbolos
            const symbolsList = validSymbols.map(item => `'${item.symbol}'`);
            
            // Crear el c√≥digo JavaScript para la nueva lista
            const newListCode = `// üåü S√çMBOLOS REALES DE BINANCE FUTURES (LISTA COMPLETA Y ACTUALIZADA)
// Total s√≠mbolos: ${validSymbols.length}
// √öltima actualizaci√≥n: ${new Date().toISOString()}
const REAL_BINANCE_FUTURES_SYMBOLS = [
    ${symbolsList.join(',\n    ')}
];`;
            
            // Guardar en archivo
            const fs = require('fs');
            fs.writeFileSync('updated-symbols-list.js', newListCode);
            
            console.log('\n‚úÖ Lista actualizada guardada en: updated-symbols-list.js');
            console.log(`üìä Total s√≠mbolos incluidos: ${validSymbols.length}`);
            
            // Mostrar los primeros 20 s√≠mbolos con mayor volumen
            console.log('\nüèÜ Top 20 s√≠mbolos por volumen:');
            validSymbols.slice(0, 20).forEach((item, index) => {
                const volume = parseFloat(item.volume);
                const volumeFormatted = volume > 1000000000 ? 
                    `${(volume / 1000000000).toFixed(1)}B` : 
                    volume > 1000000 ? 
                    `${(volume / 1000000).toFixed(1)}M` : 
                    `${(volume / 1000).toFixed(1)}K`;
                
                console.log(`${index + 1}. ${item.symbol}: $${item.lastPrice} (${item.priceChangePercent}%) - Vol: ${volumeFormatted}`);
            });
            
            // Mostrar estad√≠sticas de la nueva lista
            console.log('\nüìà Estad√≠sticas de la nueva lista:');
            const avgPrice = validSymbols.reduce((sum, item) => sum + parseFloat(item.lastPrice), 0) / validSymbols.length;
            const avgVolume = validSymbols.reduce((sum, item) => sum + parseFloat(item.volume), 0) / validSymbols.length;
            const avgChange = validSymbols.reduce((sum, item) => sum + Math.abs(parseFloat(item.priceChangePercent)), 0) / validSymbols.length;
            
            console.log(`   Precio promedio: $${avgPrice.toFixed(4)}`);
            console.log(`   Volumen promedio: ${(avgVolume / 1000000).toFixed(1)}M`);
            console.log(`   Cambio promedio: ${avgChange.toFixed(2)}%`);
            
            // Verificar si los s√≠mbolos problem√°ticos est√°n incluidos
            const problematicSymbols = ['BNXUSDT', 'ASRUSDT', 'BANDUSDT', 'MYXUSDT', 'EPTUSDT', 'VIDTUSDT', 'MEMEFIUSDT', 'AMBUSDT', 'NEIROETHUSDT', 'FHEUSDT'];
            console.log('\nüîç Verificando s√≠mbolos problem√°ticos en la nueva lista:');
            problematicSymbols.forEach(symbol => {
                const found = validSymbols.find(item => item.symbol === symbol);
                if (found) {
                    console.log(`‚úÖ ${symbol} - INCLUIDO en nueva lista`);
                } else {
                    console.log(`‚ùå ${symbol} - NO incluido (filtrado por criterios)`);
                }
            });
            
            return validSymbols;
            
        } else {
            console.log('‚ùå No se recibieron datos v√°lidos de la API');
            return [];
        }
        
    } catch (error) {
        console.error('‚ùå Error actualizando lista de s√≠mbolos:', error.message);
        return [];
    }
}

updateSymbolsList();
