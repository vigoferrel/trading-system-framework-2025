/**
 * TEST SECTOR AWARE QUANTUM SCANNER
 * =================================
 * 
 * Script para probar el an√°lisis sectorial completo
 */

const { SectorAwareQuantumScanner } = require('./sector-aware-quantum-scanner.js');

async function testSectorScanner() {
    console.log('üåê [TEST SECTOR SCANNER] Iniciando prueba del scanner sectorial...');
    
    try {
        // INICIALIZAR SCANNER
        const scanner = new SectorAwareQuantumScanner();
        
        // ESCANEO HOL√çSTICO MULTI-SECTOR
        console.log('üìä [TEST] Ejecutando escaneo hol√≠stico multi-sector...');
        const holisticResults = await scanner.scanHolisticOpportunities('ALL', 3);
        
        console.log('\nüéØ [RESULTADOS HOL√çSTICOS]');
        console.log('==========================');
        console.log(`üìà Tipo de escaneo: ${holisticResults.scan_type}`);
        console.log(`‚è±Ô∏è  Duraci√≥n: ${holisticResults.scan_duration_ms}ms`);
        console.log(`üåç Sectores escaneados: ${holisticResults.sectors_scanned.length}`);
        
        // AN√ÅLISIS MACRO
        console.log('\nüìä [AN√ÅLISIS MACRO]');
        console.log('===================');
        console.log(`üèõÔ∏è  R√©gimen de mercado: ${holisticResults.market_regime.regime} (${Math.round(holisticResults.market_regime.confidence * 100)}%)`);
        console.log(`üì∞ Narrativas dominantes: ${holisticResults.dominant_narratives.narratives.length}`);
        
        // RESULTADOS POR SECTOR
        console.log('\nüè≠ [RESULTADOS POR SECTOR]');
        console.log('==========================');
        
        for (const [sector, sectorData] of Object.entries(holisticResults.sector_opportunities)) {
            console.log(`\nüìä ${sector}:`);
            console.log(`   üí™ Salud del sector: ${Math.round(sectorData.sector_health.overall_health * 100)}%`);
            console.log(`   üìà Fuerza narrativa: ${Math.round(sectorData.narrative_strength * 100)}%`);
            console.log(`   üéØ Oportunidades encontradas: ${sectorData.opportunities_found}/${sectorData.symbols_analyzed}`);
            
            if (sectorData.opportunities.length > 0) {
                console.log(`   üèÜ Top oportunidades:`);
                sectorData.opportunities.slice(0, 3).forEach((opp, index) => {
                    console.log(`      ${index + 1}. ${opp.symbol} - Score: ${Math.round(opp.sector_opportunity_score * 100)}% - ${opp.entry_recommendation}`);
                });
            }
        }
        
        // RANKING HOL√çSTICO
        console.log('\nüèÜ [RANKING HOL√çSTICO]');
        console.log('=====================');
        console.log(`üìä Total oportunidades analizadas: ${holisticResults.holistic_ranking.total_opportunities_analyzed}`);
        console.log(`üéØ Top 5 oportunidades:`);
        
        holisticResults.holistic_ranking.top_opportunities.slice(0, 5).forEach((opp, index) => {
            console.log(`   ${index + 1}. ${opp.symbol} (${opp.sector}) - Score: ${Math.round(opp.holistic_score * 100)}% - ${opp.entry_recommendation}`);
        });
        
        // SECTOR WINNERS
        console.log('\nü•á [SECTOR WINNERS]');
        console.log('==================');
        holisticResults.holistic_ranking.sector_winners.forEach((winner, index) => {
            console.log(`   ${index + 1}. ${winner.sector} - ${winner.count} oportunidades`);
        });
        
        // ROTACI√ìN SECTORIAL
        console.log('\nüîÑ [ROTACI√ìN SECTORIAL]');
        console.log('======================');
        console.log(`üìä Sectores analizados: ${Object.keys(holisticResults.sector_rotation_analysis.sector_performance).length}`);
        console.log(`üîÑ Rotaciones activas: ${holisticResults.sector_rotation_analysis.active_rotations.length}`);
        
        // RECOMENDACIONES ESTRAT√âGICAS
        console.log('\nüí° [RECOMENDACIONES ESTRAT√âGICAS]');
        console.log('================================');
        console.log(`üéØ Acciones inmediatas: ${holisticResults.strategic_recommendations.immediate_actions.length}`);
        
        holisticResults.strategic_recommendations.immediate_actions.forEach((action, index) => {
            console.log(`   ${index + 1}. ${action.symbol} (${action.sector}) - ${action.action} - Confianza: ${Math.round(action.confidence * 100)}%`);
        });
        
        // ALLOCACI√ìN DE PORTFOLIO
        console.log('\nüí∞ [ALLOCACI√ìN DE PORTFOLIO SUGERIDA]');
        console.log('====================================');
        for (const [sector, allocation] of Object.entries(holisticResults.portfolio_allocation)) {
            if (allocation > 5) { // Solo mostrar sectores con >5% allocation
                console.log(`   ${sector}: ${Math.round(allocation)}%`);
            }
        }
        
        console.log('\n‚úÖ [TEST COMPLETADO] An√°lisis sectorial exitoso!');
        
    } catch (error) {
        console.error('‚ùå [ERROR] Error en el test del scanner sectorial:', error.message);
        console.error(error.stack);
    }
}

// EJECUTAR TEST
if (require.main === module) {
    testSectorScanner();
}

module.exports = { testSectorScanner };
