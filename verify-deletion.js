#!/usr/bin/env node

/**
 * Verificaci√≥n de eliminaci√≥n de duplicados
 * Confirma qu√© archivos fueron eliminados exitosamente
 */

const fs = require('fs');
const path = require('path');

function verifyDeletion() {
    console.log('üîç VERIFICACI√ìN DE ELIMINACI√ìN DE DUPLICADOS');
    console.log('============================================\n');

    // Lista de archivos que deber√≠an haber sido eliminados
    const filesToCheck = [
        'core.error.log',
        'dashboard-error.log',
        'enhanced-service-error.log',
        'frontend.error.log',
        'quantum\\srona-multi-whale-background.log',
        'quantum\\srona-multi-whale-launch.log',
        'test-error.log'
    ];

    console.log('üìã VERIFICANDO ARCHIVOS ELIMINADOS:');
    console.log('===================================\n');

    let deletedCount = 0;
    let notFoundCount = 0;

    filesToCheck.forEach((filePath, index) => {
        const fullPath = path.resolve(filePath);
        const exists = fs.existsSync(fullPath);

        console.log(`${index + 1}. ${filePath}`);
        if (exists) {
            const stats = fs.statSync(fullPath);
            console.log(`   ‚ùå A√öN EXISTE - Tama√±o: ${(stats.size / 1024).toFixed(2)} KB`);
            notFoundCount++;
        } else {
            console.log(`   ‚úÖ ELIMINADO CORRECTAMENTE`);
            deletedCount++;
        }
        console.log();
    });

    // Verificar archivos backup
    console.log('üì¶ VERIFICANDO ARCHIVOS BACKUP:');
    console.log('===============================\n');

    let backupCount = 0;
    filesToCheck.forEach((filePath, index) => {
        const backupPath = `${filePath}.backup`;
        const backupFullPath = path.resolve(backupPath);
        const backupExists = fs.existsSync(backupFullPath);

        console.log(`${index + 1}. ${backupPath}`);
        if (backupExists) {
            const stats = fs.statSync(backupFullPath);
            console.log(`   ‚úÖ BACKUP DISPONIBLE - Tama√±o: ${(stats.size / 1024).toFixed(2)} KB`);
            backupCount++;
        } else {
            console.log(`   ‚ö†Ô∏è  BACKUP NO ENCONTRADO`);
        }
        console.log();
    });

    // Resumen final
    console.log('üéØ RESUMEN DE VERIFICACI√ìN:');
    console.log('===========================');
    console.log(`‚úÖ Archivos eliminados: ${deletedCount}`);
    console.log(`‚ùå Archivos que a√∫n existen: ${notFoundCount}`);
    console.log(`üì¶ Backups disponibles: ${backupCount}`);
    console.log(`üíæ Espacio recuperado: ${(deletedCount * 0).toFixed(2)} KB (logs vac√≠os)`);

    if (deletedCount === filesToCheck.length) {
        console.log('\nüéâ ¬°ELIMINACI√ìN COMPLETADA EXITOSAMENTE!');
        console.log('‚úÖ Todos los archivos seguros fueron eliminados');
        console.log('‚úÖ Los backups est√°n disponibles para recuperaci√≥n si es necesario');
        console.log('‚úÖ El sistema mantiene toda su funcionalidad');
    } else {
        console.log('\n‚ö†Ô∏è  ALGUNOS ARCHIVOS NO FUERON ELIMINADOS');
        console.log('‚ùå Revisar archivos que a√∫n existen');
    }

    // Pr√≥ximos pasos
    console.log('\nüöÄ PR√ìXIMOS PASOS RECOMENDADOS:');
    console.log('===============================');
    console.log('1. ‚úÖ FASE 1 COMPLETADA - Eliminaci√≥n de logs seguros');
    console.log('2. üü° FASE 2 PENDIENTE - Revisi√≥n de archivos JavaScript cr√≠ticos');
    console.log('3. üîµ FASE 3 PENDIENTE - Consolidaci√≥n de configuraci√≥n');
    console.log('4. üî¥ FASE 4 PENDIENTE - Limpieza final de documentaci√≥n');

    console.log('\nüí° ¬øDeseas continuar con la Fase 2 (revisi√≥n de archivos cr√≠ticos)?');

    return {
        deleted: deletedCount,
        remaining: notFoundCount,
        backups: backupCount,
        success: deletedCount === filesToCheck.length
    };
}

// Ejecutar verificaci√≥n
const result = verifyDeletion();

// Salir con c√≥digo apropiado
process.exit(result.success ? 0 : 1);
