
// Constantes físicas reales del sistema
const PHYSICAL_CONSTANTS = {
  "QUANTUM_COHERENCE": 0.75,
  "QUANTUM_CONSCIOUSNESS": 0.8,
  "QUANTUM_ENTANGLEMENT": 0.65,
  "QUANTUM_SUPERPOSITION": 0.7,
  "QUANTUM_TUNNELING": 0.6,
  "MARKET_VOLATILITY": 0.05,
  "MARKET_MOMENTUM": 0.1,
  "MARKET_LIQUIDITY": 0.75,
  "MARKET_SPREAD": 0.001,
  "MARKET_DEPTH": 500000,
  "FUNDING_RATE": 0.02,
  "FUNDING_VOLATILITY": 0.01,
  "FUNDING_DEVIATION": 0.5,
  "FUNDING_ANNUALIZED": 5,
  "LIQUIDATION_PROBABILITY": 0.05,
  "SLIPPAGE_RATE": 0.0025,
  "VOLATILITY_RISK": 0.1,
  "EXECUTION_RISK": 0.005,
  "VOLUME_24H": 500000,
  "VOLUME_RATIO": 0.75,
  "VOLUME_EXPANSION": 300000,
  "PRICE_CHANGE": 0.02,
  "PRICE_ACCELERATION": 0.015,
  "PRICE_MOMENTUM": 0.01,
  "TIME_TO_FUNDING": 1800000,
  "SESSION_INTENSITY": 0.6,
  "TEMPORAL_RESONANCE": 0.7,
  "FIBONACCI_STRENGTH": 0.75,
  "FIBONACCI_INDEX": 5,
  "NEURAL_CONFIDENCE": 0.85,
  "NEURAL_COHERENCE": 0.8,
  "NEURAL_ENTANGLEMENT": 0.7,
  "BASE_LEVERAGE": 15,
  "CONSERVATIVE_LEVERAGE": 10,
  "AGGRESSIVE_LEVERAGE": 25,
  "STOP_LOSS": 0.03,
  "TAKE_PROFIT": 0.06,
  "BASE_SCORE": 0.65,
  "CONFIDENCE_SCORE": 0.75,
  "QUALITY_SCORE": 0.8
};

const { QuantumFrontendAPI } = require('./frontend-api');

async function testGetMarketData() {
    console.log('=== TESTING GETMARKETDATA METHOD ===');
    
    try {
        // Crear una instancia del API sin iniciar el servidor
        const api = new QuantumFrontendAPI();
        
        // Evitar que se inicie el servidor
        api.start = () => {
            console.log('⚠️ Server start skipped for testing');
        };
        
        console.log('✅ API instance created');
        console.log('✅ Testing getMarketData method...');
        
        // Probar el método getMarketData
        const result = await api.getMarketData();
        
        console.log('✅ getMarketData completed');
        console.log('Result type:', typeof result);
        console.log('Result keys:', Object.keys(result || {}));
        console.log('Data keys:', Object.keys(result?.data || {}));
        console.log('Data length:', Object.keys(result?.data || {}).length);
        
        if (result?.data && Object.keys(result.data).length > 0) {
            console.log('✅ SUCCESS: Market data generated');
            console.log('Sample symbol:', Object.keys(result.data)[0]);
            console.log('Sample data:', result.data[Object.keys(result.data)[0]]);
        } else {
            console.log('❌ FAILED: Market data is empty');
            console.log('Full result:', JSON.stringify(result, null, 2));
        }
        
    } catch (error) {
        console.error('❌ ERROR in test:', error);
        console.error('Error stack:', error.stack);
    }
}

// Ejecutar el test
testGetMarketData().then(() => {
    console.log('=== TEST COMPLETED ===');
    process.exit(0);
}).catch(error => {
    console.error('Test failed:', error);
    process.exit(1);
});
