const axios = require('axios');

async function testQuantumAnalysis() {
    try {
        console.log('ðŸ”® Testing Quantum Analysis Endpoint...');
        
        const response = await axios.get('http://localhost:4602/api/quantum-analysis');
        const data = response.data;
        
        console.log('[OK] Quantum Analysis Response Received');
        console.log('[DATA] System Coherence:', data.systemCoherence?.status || 'N/A');
        console.log('[DATA] Quantum States:', data.systemCoherence?.quantumStates || 'N/A');
        
        // Check quantum metrics
        if (data.quantumMetrics) {
            const metrics = data.quantumMetrics;
            console.log('[DATA] Quantum Metrics Keys:', Object.keys(metrics));
            
            // Get first few symbols to check
            const symbolKeys = Object.keys(metrics).slice(0, 5);
            console.log('\n[SEARCH] Sample Quantum Area Values:');
            
            let nanCount = 0;
            symbolKeys.forEach(symbol => {
                const metric = metrics[symbol];
                const quantumArea = metric?.quantumArea;
                const quantumVolume = metric?.quantumVolume;
                const quantumScore = metric?.quantumScore;
                
                const hasNaN = isNaN(quantumArea) || isNaN(quantumVolume) || isNaN(quantumScore);
                const status = hasNaN ? '[ERROR] NaN' : '[OK] Valid';
                
                console.log(`${status} ${symbol}:`);
                console.log(`  - quantumArea: ${quantumArea}`);
                console.log(`  - quantumVolume: ${quantumVolume}`);
                console.log(`  - quantumScore: ${quantumScore}`);
                
                if (hasNaN) nanCount++;
            });
            
            console.log(`\n[UP] NaN Values Found in sample: ${nanCount}/${symbolKeys.length} symbols`);
            
            if (nanCount === 0) {
                console.log('ðŸŽ‰ SUCCESS: Sample quantum metrics are valid!');
            } else {
                console.log('[WARNING]  WARNING: Some NaN values still present in sample');
            }
        }
        
        // Check recommendations
        if (data.quantumRecommendations) {
            console.log(`[DATA] Quantum Recommendations: ${data.quantumRecommendations.length} found`);
        }
        
    } catch (error) {
        console.error('[ERROR] Error testing quantum analysis:', error.message);
    }
}

testQuantumAnalysis();
