// ============================================================================
// TEST QBTC V7 - SISTEMA DE RANKING CU√ÅNTICO AVANZADO
// ============================================================================

const { QBTC_V7_IntegratedSystem } = require('./qbtc-v7-integration');

async function testQBTCV7Ranking() {
    console.log('üß™ [TEST QBTC V7] Iniciando pruebas del sistema de ranking cu√°ntico avanzado...\n');
    
    const v7System = new QBTC_V7_IntegratedSystem();
    
    try {
        // PASO 1: Generar datos de prueba
        console.log('üìä [TEST QBTC V7] Paso 1: Generando datos de prueba...');
        const testRecommendations = generateTestRecommendations();
        const marketContext = generateTestMarketContext();
        
        console.log(`‚úÖ [TEST QBTC V7] Datos generados: ${testRecommendations.length} recomendaciones`);
        console.log(`üìà [TEST QBTC V7] Contexto de mercado: ${marketContext.currentRegime}\n`);
        
        // PASO 2: Ejecutar ranking V7
        console.log('üöÄ [TEST QBTC V7] Paso 2: Ejecutando ranking cu√°ntico avanzado...');
        const v7Result = await v7System.executeAdvancedRanking(testRecommendations, marketContext);
        
        if (!v7Result.success) {
            throw new Error(`Error en ranking V7: ${v7Result.error}`);
        }
        
        console.log(`‚úÖ [TEST QBTC V7] Ranking V7 completado: ${v7Result.finalRanking.length} recomendaciones`);
        console.log(`‚è±Ô∏è [TEST QBTC V7] Tiempo de procesamiento: ${v7Result.metadata.processingTime}ms\n`);
        
        // PASO 3: Analizar resultados
        console.log('üìà [TEST QBTC V7] Paso 3: Analizando resultados...');
        analyzeV7Results(v7Result);
        
        // PASO 4: Comparar con sistema V6 simulado
        console.log('üîÑ [TEST QBTC V7] Paso 4: Comparando con sistema V6...');
        const comparison = await v7System.integrateWithV6System(testRecommendations, marketContext);
        analyzeComparison(comparison);
        
        // PASO 5: Validar m√©tricas de calidad
        console.log('‚úÖ [TEST QBTC V7] Paso 5: Validando m√©tricas de calidad...');
        validateQualityMetrics(v7Result);
        
        console.log('\nüéØ [TEST QBTC V7] Todas las pruebas completadas exitosamente!');
        
        return {
            success: true,
            v7Result,
            comparison,
            summary: generateTestSummary(v7Result, comparison)
        };
        
    } catch (error) {
        console.error(`‚ùå [TEST QBTC V7] Error en las pruebas:`, error);
        return {
            success: false,
            error: error.message
        };
    }
}

function generateTestRecommendations() {
    const symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'ADAUSDT', 'XRPUSDT', 'DOTUSDT', 'LINKUSDT', 'MATICUSDT', 'AVAXUSDT'];
    const recommendations = [];
    
    symbols.forEach((symbol, index) => {
        // Usar valores determin√≠sticos basados en el √≠ndice en lugar de Math.random
        const baseScore = 50 + (index * 4); // 50, 54, 58, 62, 66, 70, 74, 78, 82, 86
        const confidence = 60 + (index * 3); // 60, 63, 66, 69, 72, 75, 78, 81, 84, 87
        const volume = 100000 + (index * 100000); // 100k, 200k, 300k, etc.
        const priceChange = -5 + (index * 1); // -5, -4, -3, -2, -1, 0, 1, 2, 3, 4
        
        recommendations.push({
            symbol: symbol,
            action: index % 2 === 0 ? 'LONG' : 'SHORT', // Alternar LONG/SHORT
            confidence: confidence,
            score: baseScore,
            volume: volume,
            priceChange: priceChange,
            sourceCount: 2 + (index % 3), // 2, 3, 4 c√≠clicamente
            timestamp: Date.now() - (index * 300000), // √öltima hora escalonada
            volatility: 0.3 + (index * 0.04), // 0.3, 0.34, 0.38, etc.
            quantumScore: 40 + (index * 5), // 40, 45, 50, etc.
            brainScore: 45 + (index * 4), // 45, 49, 53, etc.
            spread: 0.0005 + (index * 0.0001), // 0.0005, 0.0006, etc.
            price: 100 + (index * 100) // 100, 200, 300, etc.
        });
    });
    
    return recommendations;
}

function generateTestMarketContext() {
    const regimes = ['QUANTUM_CRISIS', 'LEONARDO_TRENDING', 'FIBONACCI_RANGING', 'NEUTRAL'];
    const selectedRegime = regimes[Math.floor((Date.now() / 1000) % regimes.length)]; // Determin√≠stico basado en tiempo
    
    return {
        currentRegime: selectedRegime,
        volatility: 0.4 + ((Date.now() / 1000) % 30) / 100, // 0.4-0.7 determin√≠stico
        marketSentiment: 'MIXED',
        timestamp: Date.now()
    };
}

function analyzeV7Results(v7Result) {
    const { finalRanking, insights, metadata } = v7Result;
    
    console.log(`üìä [AN√ÅLISIS V7] Resultados del ranking:`);
    console.log(`   ‚Ä¢ Total recomendaciones: ${finalRanking.length}`);
    console.log(`   ‚Ä¢ Score promedio: ${(metadata.qualityMetrics.averageScore * 100).toFixed(1)}%`);
    console.log(`   ‚Ä¢ Confianza promedio: ${(metadata.qualityMetrics.averageConfidence * 100).toFixed(1)}%`);
    console.log(`   ‚Ä¢ Coherencia promedio: ${(metadata.qualityMetrics.averageCoherence * 100).toFixed(1)}%`);
    
    console.log(`\nüèÜ [AN√ÅLISIS V7] Top 5 recomendaciones:`);
    finalRanking.slice(0, 5).forEach((rec, index) => {
        console.log(`   ${index + 1}. ${rec.symbol} - Score: ${(rec.optimizedScore * 100).toFixed(1)}% - Tier: ${rec.rankingTier}`);
    });
    
    console.log(`\nüìà [AN√ÅLISIS V7] M√©tricas cu√°nticas:`);
    console.log(`   ‚Ä¢ Coherencia cu√°ntica: ${(metadata.quantumMetrics.averageCoherence * 100).toFixed(1)}%`);
    console.log(`   ‚Ä¢ Entanglement: ${(metadata.quantumMetrics.averageEntanglement * 100).toFixed(1)}%`);
    console.log(`   ‚Ä¢ Superposici√≥n: ${(metadata.quantumMetrics.averageSuperposition * 100).toFixed(1)}%`);
    console.log(`   ‚Ä¢ Estabilidad cu√°ntica: ${(metadata.quantumMetrics.quantumStability * 100).toFixed(1)}%`);
    
    console.log(`\nüí° [AN√ÅLISIS V7] Insights generados: ${insights.insights.length}`);
    insights.insights.forEach((insight, index) => {
        console.log(`   ${index + 1}. [${insight.type.toUpperCase()}] ${insight.message}`);
    });
}

function analyzeComparison(comparison) {
    const { v7Ranking, comparison: compData } = comparison;
    
    console.log(`\nüîÑ [COMPARACI√ìN V6 vs V7] An√°lisis de comparaci√≥n:`);
    console.log(`   ‚Ä¢ Overlap top 10: ${compData.overlap}/10 (${compData.overlapPercentage.toFixed(1)}%)`);
    console.log(`   ‚Ä¢ Mejora de score: ${compData.scoreImprovement.toFixed(1)}%`);
    console.log(`   ‚Ä¢ Tipo de mejora: ${compData.improvement}`);
    
    console.log(`\nüìä [COMPARACI√ìN] Top 10 V6 vs V7:`);
    console.log(`   V6: ${compData.v6Top10.join(', ')}`);
    console.log(`   V7: ${compData.v7Top10.join(', ')}`);
    
    if (compData.scoreImprovement > 0) {
        console.log(`\n‚úÖ [COMPARACI√ìN] El sistema V7 muestra mejora significativa`);
    } else {
        console.log(`\n‚ö†Ô∏è [COMPARACI√ìN] El sistema V7 necesita optimizaci√≥n`);
    }
}

function validateQualityMetrics(v7Result) {
    const { metadata } = v7Result;
    const { qualityMetrics, quantumMetrics } = metadata;
    
    console.log(`\n‚úÖ [VALIDACI√ìN] M√©tricas de calidad:`);
    
    // Validar scores
    if (qualityMetrics.averageScore > 0.6) {
        console.log(`   ‚úÖ Score promedio aceptable: ${(qualityMetrics.averageScore * 100).toFixed(1)}%`);
    } else {
        console.log(`   ‚ö†Ô∏è Score promedio bajo: ${(qualityMetrics.averageScore * 100).toFixed(1)}%`);
    }
    
    // Validar confianza
    if (qualityMetrics.averageConfidence > 0.7) {
        console.log(`   ‚úÖ Confianza promedio alta: ${(qualityMetrics.averageConfidence * 100).toFixed(1)}%`);
    } else {
        console.log(`   ‚ö†Ô∏è Confianza promedio baja: ${(qualityMetrics.averageConfidence * 100).toFixed(1)}%`);
    }
    
    // Validar coherencia
    if (qualityMetrics.averageCoherence > 0.6) {
        console.log(`   ‚úÖ Coherencia promedio buena: ${(qualityMetrics.averageCoherence * 100).toFixed(1)}%`);
    } else {
        console.log(`   ‚ö†Ô∏è Coherencia promedio baja: ${(qualityMetrics.averageCoherence * 100).toFixed(1)}%`);
    }
    
    // Validar m√©tricas cu√°nticas
    if (quantumMetrics.averageCoherence > 0.7) {
        console.log(`   ‚úÖ Coherencia cu√°ntica alta: ${(quantumMetrics.averageCoherence * 100).toFixed(1)}%`);
    } else {
        console.log(`   ‚ö†Ô∏è Coherencia cu√°ntica baja: ${(quantumMetrics.averageCoherence * 100).toFixed(1)}%`);
    }
    
    if (quantumMetrics.quantumStability > 0.8) {
        console.log(`   ‚úÖ Estabilidad cu√°ntica excelente: ${(quantumMetrics.quantumStability * 100).toFixed(1)}%`);
    } else {
        console.log(`   ‚ö†Ô∏è Estabilidad cu√°ntica moderada: ${(quantumMetrics.quantumStability * 100).toFixed(1)}%`);
    }
}

function generateTestSummary(v7Result, comparison) {
    const { metadata, insights } = v7Result;
    const { qualityMetrics, quantumMetrics } = metadata;
    
    return {
        testStatus: 'COMPLETED',
        timestamp: Date.now(),
        v7Performance: {
            totalRecommendations: v7Result.finalRanking.length,
            averageScore: qualityMetrics.averageScore,
            averageConfidence: qualityMetrics.averageConfidence,
            averageCoherence: qualityMetrics.averageCoherence,
            quantumCoherence: quantumMetrics.averageCoherence,
            quantumStability: quantumMetrics.quantumStability,
            processingTime: metadata.processingTime
        },
        comparison: {
            scoreImprovement: comparison.comparison.scoreImprovement,
            overlapPercentage: comparison.comparison.overlapPercentage,
            improvement: comparison.comparison.improvement
        },
        insights: {
            totalInsights: insights.insights.length,
            criticalInsights: insights.summary.criticalInsights,
            averageScore: insights.summary.averageScore,
            diversificationRatio: insights.summary.diversificationRatio
        },
        recommendations: insights.recommendations.length
    };
}

// Ejecutar pruebas si se llama directamente
if (require.main === module) {
    testQBTCV7Ranking()
        .then(result => {
            if (result.success) {
                console.log('\nüéâ [TEST QBTC V7] Pruebas completadas exitosamente!');
                console.log('üìã [TEST QBTC V7] Resumen:', JSON.stringify(result.summary, null, 2));
            } else {
                console.error('\n‚ùå [TEST QBTC V7] Pruebas fallaron:', result.error);
                process.exit(1);
            }
        })
        .catch(error => {
            console.error('\nüí• [TEST QBTC V7] Error cr√≠tico:', error);
            process.exit(1);
        });
}

module.exports = { testQBTCV7Ranking };
