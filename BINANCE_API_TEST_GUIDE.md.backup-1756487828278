# Guía de Uso del Script de Pruebas para Binance API

## Descripción

El script `binance-api-test.ps1` es una herramienta PowerShell diseñada para realizar pruebas manuales contra la API de Binance. Implementa la firma HMAC SHA256 requerida para operaciones seguras y permite probar tanto endpoints públicos como privados de la API.

## Características

- ✅ Implementación completa de firma HMAC SHA256
- ✅ Soporte para Binance MainNet y TestNet
- ✅ Pruebas de endpoints públicos (sin autenticación)
- ✅ Pruebas de endpoints privados (con autenticación)
- ✅ Operaciones de trading completas
- ✅ Manejo detallado de errores
- ✅ Formateo legible de resultados

## Requisitos

- PowerShell 5.1 o superior
- Conexión a internet
- API Key y Secret Key de Binance (para endpoints privados)

## Instalación y Configuración

### 1. Obtener API Keys de Binance

1. Inicia sesión en tu cuenta de Binance
2. Ve a la sección "API Management"
3. Crea una nueva API Key
4. Configura los permisos necesarios:
   - Enable Trading (Habilitar Trading)
   - Enable Futures (si es necesario)
   - Enable Reading (Habilitar Lectura)
5. Copia tu API Key y Secret Key

### 2. Configurar Políticas de Ejecución de PowerShell

Si es la primera vez que ejecutas scripts de PowerShell, es posible que necesites cambiar la política de ejecución:

```powershell
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
```

## Uso del Script

### Sintaxis Básica

```powershell
.\binance-api-test.ps1 [parámetros]
```

### Parámetros Disponibles

| Parámetro | Descripción | Valor por Defecto |
|-----------|-------------|-------------------|
| `-ApiKey` | Tu API Key de Binance | "" (vacío) |
| `-SecretKey` | Tu Secret Key de Binance | "" (vacío) |
| `-BaseUrl` | URL base de la API de Binance | "https://api.binance.com" |
| `-TestNet` | Usar Binance TestNet en lugar de MainNet | `$false` |
| `-Symbol` | Símbolo de trading para las pruebas | "BTCUSDT" |

### Ejemplos de Uso

#### 1. Probar solo endpoints públicos (sin API Keys)

```powershell
.\binance-api-test.ps1
```

#### 2. Probar todos los endpoints con API Keys

```powershell
.\binance-api-test.ps1 -ApiKey "tu_api_key" -SecretKey "tu_secret_key"
```

#### 3. Usar TestNet en lugar de MainNet

```powershell
.\binance-api-test.ps1 -ApiKey "tu_api_key" -SecretKey "tu_secret_key" -TestNet $true
```

#### 4. Probar con un símbolo específico

```powershell
.\binance-api-test.ps1 -ApiKey "tu_api_key" -SecretKey "tu_secret_key" -Symbol "ETHUSDT"
```

## Funcionalidades del Script

### 1. Pruebas de Endpoints Públicos

El script prueba automáticamente los siguientes endpoints públicos:

- **Tiempo del servidor**: Verifica la sincronización de tiempo
- **Información del exchange**: Obtiene datos generales del exchange
- **Precio del símbolo**: Obtiene el precio actual del símbolo especificado
- **Libro de órdenes**: Muestra las mejores 5 posiciones de compra y venta

### 2. Pruebas de Endpoints Privados

Si se proporcionan API Keys, el script prueba:

- **Información de cuenta**: Muestra datos generales de la cuenta
- **Balances**: Lista todos los balances no nulos
- **Órdenes abiertas**: Muestra órdenes activas para el símbolo
- **Historial de órdenes**: Muestra las últimas 5 órdenes
- **Trades recientes**: Muestra los últimos 5 trades realizados

### 3. Operaciones de Trading

El script permite probar operaciones de trading reales:

- **Obtención de información del símbolo**: Muestra filtros y restricciones
- **Cálculo de cantidades**: Calcula cantidades basadas en el precio actual
- **Creación de órdenes LIMIT**: Permite crear órdenes LIMIT con confirmación
- **Creación de órdenes MARKET**: Permite crear órdenes MARKET con confirmación
- **Cancelación de órdenes**: Permite cancelar órdenes creadas durante la prueba

## Seguridad

### 1. Almacenamiento Seguro de Claves

Nunca almacenes tus API Keys directamente en el script. Usa variables de entorno o archivos de configuración seguros:

#### Usando variables de entorno:

```powershell
$apiKey = $env:BINANCE_API_KEY
$secretKey = $env:BINANCE_SECRET_KEY
.\binance-api-test.ps1 -ApiKey $apiKey -SecretKey $secretKey
```

#### Usando un archivo de configuración:

Crea un archivo `config.json`:
```json
{
  "apiKey": "tu_api_key",
  "secretKey": "tu_secret_key"
}
```

Y luego:
```powershell
$config = Get-Content "config.json" | ConvertFrom-Json
.\binance-api-test.ps1 -ApiKey $config.apiKey -SecretKey $config.secretKey
```

### 2. Permisos de API Key

Configura tus API Keys con los mínimos permisos necesarios:

- Para pruebas de lectura: Enable Reading
- Para pruebas de trading: Enable Reading + Enable Trading
- Nunca habilites "Enable Withdrawals" para pruebas

### 3. Uso de TestNet

Para pruebas sin riesgo, siempre usa TestNet primero:

```powershell
.\binance-api-test.ps1 -ApiKey "testnet_api_key" -SecretKey "testnet_secret_key" -TestNet $true
```

## Manejo de Errores

El script incluye manejo detallado de errores:

- Muestra mensajes de error descriptivos
- Muestra detalles de la respuesta HTTP cuando es posible
- Continúa con las siguientes pruebas incluso si una falla
- Formatea los errores de manera legible

## Personalización

### 1. Modificar Símbolos de Prueba

Puedes modificar el script para probar con múltiples símbolos:

```powershell
$symbols = @("BTCUSDT", "ETHUSDT", "BNBUSDT")
foreach ($sym in $symbols) {
    .\binance-api-test.ps1 -ApiKey $apiKey -SecretKey $secretKey -Symbol $sym
}
```

### 2. Agregar Nuevos Endpoints

Puedes extender el script agregando nuevas funciones para probar endpoints adicionales:

```powershell
function Test-CustomEndpoint {
    $result = Invoke-BinanceGetRequest -endpoint "/api/v3/customEndpoint"
    Show-Results -data $result -title "Custom Endpoint"
}
```

### 3. Modificar Parámetros de Trading

Puedes ajustar los parámetros de trading en la función `Test-TradingOperations`:

```powershell
# Cambiar el monto de la orden de prueba
$quantity = [Math]::Round(50 / $price, 8)  # 50 USDT en lugar de 10

# Cambiar el porcentaje de precio para órdenes LIMIT
$limitPrice = [Math]::Round($price * 0.95, 8)  # 5% debajo del precio actual
```

## Solución de Problemas Comunes

### 1. Error de Política de Ejecución

Si recibes un error sobre la política de ejecución:

```powershell
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
```

### 2. Error de Conexión

Si recibes errores de conexión:

- Verifica tu conexión a internet
- Si usas VPN, asegúrate de que esté funcionando correctamente
- Verifica que la URL base sea correcta

### 3. Error de Autenticación

Si recibes errores de autenticación:

- Verifica que tu API Key y Secret Key sean correctas
- Asegúrate de que las claves tengan los permisos necesarios
- Verifica que el timestamp de tu sistema esté sincronizado

### 4. Error de Filtros de Símbolo

Si recibes errores sobre filtros de símbolo:

- El script muestra automáticamente los filtros aplicables
- Asegúrate de que tus órdenes cumplan con los requisitos mínimos
- Verifica los valores mínimos de precio, cantidad y notional

## Referencias

- [Documentación oficial de Binance API](https://binance-docs.github.io/apidocs/spot/en/)
- [Creación de API Keys en Binance](https://www.binance.com/en/support/faq/360002502072)
- [Binance TestNet](https://testnet.binance.vision/)

## Advertencias Importantes

⚠️ **ADVERTENCIA**: Este script realiza operaciones reales en Binance cuando se proporcionan API Keys válidas.

- Siempre prueba primero en TestNet
- Usa cantidades pequeñas para pruebas
- Nunca compartas tus API Keys
- Revoca las API Keys después de las pruebas si no son necesarias
- El autor no es responsable de pérdidas financieras

## Contribuciones

Si encuentras errores o deseas mejorar el script, por favor:

1. Haz un fork del repositorio
2. Crea una rama para tus cambios
3. Realiza tus modificaciones
4. Envía un pull request

## Licencia

Este script se proporciona "tal cual" sin garantías de ningún tipo. El uso es bajo tu propio riesgo.