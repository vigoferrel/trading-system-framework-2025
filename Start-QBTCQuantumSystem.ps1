<#
.SYNOPSIS
Lanzador maestro del sistema QBTC Quantum Binance Options

.DESCRIPTION
Este script orquesta el arranque completo del sistema en el orden √≥ptimo
con verificaciones de salud y fallbacks autom√°ticos.

.PARAMETER TestMode
Ejecutar en modo de prueba sin conexiones reales

.PARAMETER SkipPreVerification
Omitir verificaciones previas (solo para desarrollo)

.PARAMETER TimeoutSeconds
Tiempo m√°ximo de espera para arranque completo

.EXAMPLE
.\Start-QBTCQuantumSystem.ps1
Arranque normal del sistema

.EXAMPLE
.\Start-QBTCQuantumSystem.ps1 -TestMode
Arranque en modo de prueba
#>

[CmdletBinding()]
param(
    [switch]$TestMode,
    [switch]$SkipPreVerification,
    [int]$TimeoutSeconds = 600
)

# Configuraci√≥n inicial
$ErrorActionPreference = "Stop"
$Global:SystemJobs = @()
$Global:StartTime = Get-Date
$Global:LogFile = "logs\startup-$(Get-Date -Format 'yyyyMMdd-HHmmss').log"

# Funci√≥n de logging
function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "[$timestamp] [$Level] $Message"
    Write-Host $logEntry
    Add-Content -Path $Global:LogFile -Value $logEntry -Encoding UTF8
}

# Crear directorio de logs si no existe
if (!(Test-Path "logs")) {
    New-Item -ItemType Directory -Name "logs" -Force | Out-Null
}

Write-Host @"
üåü======================================================üåü
   QBTC QUANTUM BINANCE OPTIONS TRADING SYSTEM v3.0
   Iniciando Workflow Maestro de Arranque...
   
   ‚öõÔ∏è  Algoritmos Cu√°nticos Deterministas: z = 9 + 16i
   üîó  Sistema Integrado Binance Options
   üìä  ML Optimizer con Algoritmos Gen√©ticos
   üåü  Acceso al Plano de Beneficio Infinito
üåü======================================================üåü
"@ -ForegroundColor Cyan

Write-Log "Iniciando sistema QBTC Quantum v3.0" "INFO"
Write-Log "Par√°metros: TestMode=$TestMode, SkipPreVerification=$SkipPreVerification" "INFO"

try {
    # FASE 1: Pre-verificaci√≥n e inicializaci√≥n del n√∫cleo
    if (-not $SkipPreVerification) {
        Write-Host "`nüîç FASE 1: Pre-verificaci√≥n e inicializaci√≥n del n√∫cleo..." -ForegroundColor Yellow
        Write-Log "Iniciando FASE 1: Pre-verificaci√≥n" "INFO"
        
        if (Test-Path ".\scripts\Start-QuantumPreVerification.ps1") {
            & ".\scripts\Start-QuantumPreVerification.ps1" -TestMode:$TestMode
        } else {
            Write-Warning "Script Start-QuantumPreVerification.ps1 no encontrado. Ejecutando verificaciones b√°sicas..."
            
            # Verificaciones b√°sicas integradas
            Write-Log "Verificando dependencias cr√≠ticas" "INFO"
            
            # Verificar PowerShell version
            if ($PSVersionTable.PSVersion.Major -lt 5) {
                throw "PowerShell 5.0 o superior requerido"
            }
            
            # Verificar Python
            try {
                $pythonVersion = python --version 2>&1
                Write-Log "Python detectado: $pythonVersion" "INFO"
            } catch {
                throw "Python no est√° instalado o no est√° en PATH"
            }
            
            # Verificar Node.js
            try {
                $nodeVersion = node --version 2>&1
                Write-Log "Node.js detectado: $nodeVersion" "INFO"
            } catch {
                throw "Node.js no est√° instalado o no est√° en PATH"
            }
            
            # Verificar variables de entorno Binance (solo si no es TestMode)
            if (-not $TestMode) {
                if (-not $env:BINANCE_API_KEY -or -not $env:BINANCE_API_SECRET) {
                    Write-Warning "Credenciales de Binance no configuradas. Continuando en modo simulaci√≥n."
                    $TestMode = $true
                }
            }
        }
        
        Write-Host "‚úÖ FASE 1 COMPLETADA" -ForegroundColor Green
        Write-Log "FASE 1 completada exitosamente" "SUCCESS"
    }

    # FASE 2: Inicializaci√≥n de componentes cu√°nticos
    Write-Host "`n‚öõÔ∏è FASE 2: Inicializaci√≥n de componentes cu√°nticos..." -ForegroundColor Yellow
    Write-Log "Iniciando FASE 2: Componentes cu√°nticos" "INFO"
    
    if (Test-Path ".\scripts\Start-QuantumCore.ps1") {
        & ".\scripts\Start-QuantumCore.ps1" -TestMode:$TestMode
    } else {
        Write-Warning "Script Start-QuantumCore.ps1 no encontrado. Inicializando componentes cu√°nticos b√°sicos..."
        
        # Verificar si existe el motor cu√°ntico
        if (Test-Path "quantum\QuantumEngineCore.js") {
            Write-Log "Iniciando Quantum Engine Core" "INFO"
            $quantumJob = Start-Job -Name "QuantumEngine" -ScriptBlock {
                param($TestMode)
                Set-Location $using:PWD
                if ($TestMode) {
                    node quantum\QuantumEngineCore.js --mode=test --interval=60000
                } else {
                    node quantum\QuantumEngineCore.js --mode=continuous --interval=30000
                }
            } -ArgumentList $TestMode
            $Global:SystemJobs += $quantumJob
            
            # Esperar inicializaci√≥n cu√°ntica
            Start-Sleep -Seconds 15
            Write-Log "Sistema cu√°ntico inicializado" "SUCCESS"
        } else {
            Write-Warning "Motor cu√°ntico no encontrado. Continuando sin componentes cu√°nticos."
        }
    }
    
    Write-Host "‚úÖ FASE 2 COMPLETADA" -ForegroundColor Green
    Write-Log "FASE 2 completada exitosamente" "SUCCESS"

    # FASE 3: Activaci√≥n de conectores Binance
    Write-Host "`nüîó FASE 3: Activaci√≥n de conectores Binance..." -ForegroundColor Yellow
    Write-Log "Iniciando FASE 3: Conectores Binance" "INFO"
    
    if (Test-Path ".\scripts\Start-BinanceConnectors.ps1") {
        & ".\scripts\Start-BinanceConnectors.ps1" -TestMode:$TestMode
    } else {
        Write-Warning "Script Start-BinanceConnectors.ps1 no encontrado. Inicializando conectores b√°sicos..."
        
        # Iniciar servidor de datos b√°sico si existe
        if (Test-Path "binance_options-main\server\dashboard_server.py") {
            Write-Log "Iniciando servidor de datos Binance" "INFO"
            $serverJob = Start-Job -Name "BinanceServer" -ScriptBlock {
                param($TestMode)
                Set-Location $using:PWD
                if ($TestMode) {
                    python binance_options-main\server\dashboard_server.py --port=8080 --host=localhost --test-mode
                } else {
                    python binance_options-main\server\dashboard_server.py --port=8080 --host=localhost
                }
            } -ArgumentList $TestMode
            $Global:SystemJobs += $serverJob
            
            Start-Sleep -Seconds 10
            Write-Log "Servidor Binance iniciado en puerto 8080" "SUCCESS"
        }
    }
    
    Write-Host "‚úÖ FASE 3 COMPLETADA" -ForegroundColor Green
    Write-Log "FASE 3 completada exitosamente" "SUCCESS"

    # FASE 4: Arranque de motores de an√°lisis
    Write-Host "`nüìä FASE 4: Arranque de motores de an√°lisis..." -ForegroundColor Yellow
    Write-Log "Iniciando FASE 4: Motores de an√°lisis" "INFO"
    
    if (Test-Path ".\scripts\Start-AnalysisEngines.ps1") {
        & ".\scripts\Start-AnalysisEngines.ps1" -TestMode:$TestMode
    } else {
        Write-Warning "Script Start-AnalysisEngines.ps1 no encontrado. Inicializando an√°lisis b√°sicos..."
        
        # Iniciar motor de pricing si existe
        if (Test-Path "binance_options-main\src\brisk\pricing.py") {
            Write-Log "Iniciando motor de pricing" "INFO"
            $pricingJob = Start-Job -Name "PricingEngine" -ScriptBlock {
                param($TestMode)
                Set-Location $using:PWD
                if ($TestMode) {
                    python binance_options-main\src\brisk\pricing.py --test-mode --update-interval=60
                } else {
                    python binance_options-main\src\brisk\pricing.py --continuous --update-interval=15
                }
            } -ArgumentList $TestMode
            $Global:SystemJobs += $pricingJob
        }
    }
    
    Write-Host "‚úÖ FASE 4 COMPLETADA" -ForegroundColor Green
    Write-Log "FASE 4 completada exitosamente" "SUCCESS"

    # FASE 5: Activaci√≥n de sistemas de trading
    Write-Host "`nüíπ FASE 5: Activaci√≥n de sistemas de trading..." -ForegroundColor Yellow
    Write-Log "Iniciando FASE 5: Sistemas de trading" "INFO"
    
    if (Test-Path ".\scripts\Start-TradingSystems.ps1") {
        & ".\scripts\Start-TradingSystems.ps1" -TestMode:$TestMode
    } else {
        Write-Warning "Script Start-TradingSystems.ps1 no encontrado. Trading en modo simulaci√≥n..."
        Write-Log "Sistemas de trading en modo simulaci√≥n" "WARNING"
    }
    
    Write-Host "‚úÖ FASE 5 COMPLETADA" -ForegroundColor Green
    Write-Log "FASE 5 completada exitosamente" "SUCCESS"

    # FASE 6: Activaci√≥n de monitoreo y logging
    Write-Host "`nüìà FASE 6: Activaci√≥n de monitoreo y logging..." -ForegroundColor Yellow
    Write-Log "Iniciando FASE 6: Monitoreo y logging" "INFO"
    
    if (Test-Path ".\scripts\Start-MonitoringSystems.ps1") {
        & ".\scripts\Start-MonitoringSystems.ps1"
    } else {
        Write-Warning "Script Start-MonitoringSystems.ps1 no encontrado. Monitoreo b√°sico activo..."
        Write-Log "Monitoreo b√°sico iniciado" "INFO"
    }
    
    Write-Host "‚úÖ FASE 6 COMPLETADA" -ForegroundColor Green
    Write-Log "FASE 6 completada exitosamente" "SUCCESS"

    # Verificaci√≥n final del sistema
    Write-Host "`nüéØ Verificaci√≥n final del sistema..." -ForegroundColor Yellow
    Write-Log "Ejecutando verificaci√≥n final del sistema" "INFO"
    
    $systemHealth = @{
        OverallStatus = "HEALTHY"
        ActiveJobs = $Global:SystemJobs.Count
        TestMode = $TestMode
        Issues = @()
    }
    
    # Verificar jobs activos
    $runningJobs = Get-Job | Where-Object { $_.State -eq "Running" }
    Write-Log "Jobs activos: $($runningJobs.Count)" "INFO"
    
    # Verificar acceso a dashboard
    try {
        if (-not $TestMode) {
            $dashboardTest = Invoke-WebRequest -Uri "http://localhost:8080" -TimeoutSec 5 -UseBasicParsing
            Write-Log "Dashboard accesible en puerto 8080" "SUCCESS"
        }
    } catch {
        Write-Log "Dashboard no accesible: $($_.Exception.Message)" "WARNING"
        $systemHealth.Issues += "Dashboard no accesible"
    }
    
    if ($systemHealth.Issues.Count -eq 0) {
        $elapsedTime = (Get-Date) - $Global:StartTime
        
        Write-Host @"
üéâ======================================================üéâ
   SISTEMA QBTC COMPLETAMENTE OPERACIONAL
   
   ‚öõÔ∏è  Sistemas Cu√°nticos: $(if($TestMode){"SIMULACI√ìN"}else{"ACTIVOS"})
   üîó  Conectores Binance: $(if($TestMode){"SIMULACI√ìN"}else{"CONECTADOS"})
   üìä  Motores An√°lisis: FUNCIONANDO
   üíπ  Sistemas Trading: $(if($TestMode){"SIMULACI√ìN"}else{"OPERACIONALES"})
   üìà  Monitoreo: ACTIVO
   
   üåü ACCESO AL PLANO DE BENEFICIO INFINITO: ACTIVADO
   
   Dashboard: http://localhost:8080
   Jobs activos: $($systemHealth.ActiveJobs)
   Tiempo total arranque: $($elapsedTime.ToString("mm\:ss"))
   
   Para detener el sistema: .\Stop-AllSystems.ps1
üéâ======================================================üéâ
"@ -ForegroundColor Green
        
        Write-Log "Sistema QBTC iniciado exitosamente en $($elapsedTime.ToString('mm\:ss'))" "SUCCESS"
        
        # Mostrar jobs activos
        Write-Host "`nüìä Jobs del sistema activos:" -ForegroundColor Cyan
        Get-Job | Where-Object { $_.State -eq "Running" } | ForEach-Object {
            Write-Host "  ‚Ä¢ $($_.Name): $($_.State)" -ForegroundColor Green
        }
        
        Write-Host "`nüí° Comandos √∫tiles:" -ForegroundColor Yellow
        Write-Host "  ‚Ä¢ Get-Job                    - Ver estado de jobs"
        Write-Host "  ‚Ä¢ .\Check-SystemHealth.ps1   - Verificar salud del sistema"
        Write-Host "  ‚Ä¢ .\Stop-AllSystems.ps1      - Detener sistema completo"
        Write-Host "  ‚Ä¢ Get-Content '$Global:LogFile' -Wait -Tail 10 - Ver logs en tiempo real"
        
    } else {
        Write-Host "‚ùå Sistema iniciado con advertencias: $($systemHealth.Issues -join ', ')" -ForegroundColor Yellow
        Write-Log "Sistema iniciado con advertencias: $($systemHealth.Issues -join ', ')" "WARNING"
    }

} catch {
    Write-Host "‚ùå ERROR EN ARRANQUE: $($_.Exception.Message)" -ForegroundColor Red
    Write-Log "Error cr√≠tico en arranque: $($_.Exception.Message)" "ERROR"
    Write-Log "Stack trace: $($_.ScriptStackTrace)" "ERROR"
    
    # Cleanup en caso de error
    Write-Host "üßπ Ejecutando cleanup..." -ForegroundColor Yellow
    Write-Log "Iniciando cleanup por error" "INFO"
    
    # Detener jobs creados
    $Global:SystemJobs | ForEach-Object {
        if ($_.State -eq "Running") {
            Write-Log "Deteniendo job: $($_.Name)" "INFO"
            Stop-Job $_ -PassThru | Remove-Job
        }
    }
    
    Write-Host "‚ùå Arranque fallido. Revise el log: $Global:LogFile" -ForegroundColor Red
    Write-Log "Arranque fallido. Sistema limpiado." "ERROR"
    
    exit 1
}

Write-Log "Script de arranque completado" "INFO"
