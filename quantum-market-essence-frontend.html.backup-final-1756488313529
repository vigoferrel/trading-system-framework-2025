
// Constantes físicas reales del sistema
const PHYSICAL_CONSTANTS = {
  "QUANTUM_COHERENCE": 0.75,
  "QUANTUM_CONSCIOUSNESS": 0.8,
  "QUANTUM_ENTANGLEMENT": 0.65,
  "QUANTUM_SUPERPOSITION": 0.7,
  "QUANTUM_TUNNELING": 0.6,
  "MARKET_VOLATILITY": 0.05,
  "MARKET_MOMENTUM": 0.1,
  "MARKET_LIQUIDITY": 0.75,
  "MARKET_SPREAD": 0.001,
  "MARKET_DEPTH": 500000,
  "FUNDING_RATE": 0.02,
  "FUNDING_VOLATILITY": 0.01,
  "FUNDING_DEVIATION": 0.5,
  "FUNDING_ANNUALIZED": 5,
  "LIQUIDATION_PROBABILITY": 0.05,
  "SLIPPAGE_RATE": 0.0025,
  "VOLATILITY_RISK": 0.1,
  "EXECUTION_RISK": 0.005,
  "VOLUME_24H": 500000,
  "VOLUME_RATIO": 0.75,
  "VOLUME_EXPANSION": 300000,
  "PRICE_CHANGE": 0.02,
  "PRICE_ACCELERATION": 0.015,
  "PRICE_MOMENTUM": 0.01,
  "TIME_TO_FUNDING": 1800000,
  "SESSION_INTENSITY": 0.6,
  "TEMPORAL_RESONANCE": 0.7,
  "FIBONACCI_STRENGTH": 0.75,
  "FIBONACCI_INDEX": 5,
  "NEURAL_CONFIDENCE": 0.85,
  "NEURAL_COHERENCE": 0.8,
  "NEURAL_ENTANGLEMENT": 0.7,
  "BASE_LEVERAGE": 15,
  "CONSERVATIVE_LEVERAGE": 10,
  "AGGRESSIVE_LEVERAGE": 25,
  "STOP_LOSS": 0.03,
  "TAKE_PROFIT": 0.06,
  "BASE_SCORE": 0.65,
  "CONFIDENCE_SCORE": 0.75,
  "QUALITY_SCORE": 0.8
};

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🌙 QBTC - Esencia del Mercado Cuántico</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
            color: #e0e0e0;
            overflow-x: hidden;
            min-height: 100vh;
        }

        .quantum-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            position: relative;
        }

        .header h1 {
            font-size: 3rem;
            background: linear-gradient(45deg, #00d4ff, #ff6b6b, #4ecdc4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
            text-shadow: 0 0 30px rgba(0, 212, 255, 0.3);
        }

        .header .subtitle {
            font-size: 1.2rem;
            color: #888;
            font-style: italic;
        }

        .quantum-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .quantum-card {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .quantum-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: left 0.5s;
        }

        .quantum-card:hover::before {
            left: 100%;
        }

        .quantum-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 212, 255, 0.2);
            border-color: rgba(0, 212, 255, 0.3);
        }

        .card-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            font-size: 1.3rem;
            font-weight: bold;
            color: #00d4ff;
        }

        .card-icon {
            margin-right: 10px;
            font-size: 1.5rem;
        }

        .metric-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
        }

        .metric {
            background: rgba(0, 0, 0, 0.3);
            padding: 10px;
            border-radius: 8px;
            text-align: center;
        }

        .metric-label {
            font-size: 0.8rem;
            color: #888;
            margin-bottom: 5px;
        }

        .metric-value {
            font-size: 1.2rem;
            font-weight: bold;
            color: #4ecdc4;
        }

        .opportunity-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .opportunity-item {
            background: rgba(0, 0, 0, 0.2);
            margin: 8px 0;
            padding: 12px;
            border-radius: 8px;
            border-left: 4px solid #00d4ff;
            transition: all 0.3s ease;
        }

        .opportunity-item:hover {
            background: rgba(0, 212, 255, 0.1);
            transform: translateX(5px);
        }

        .opportunity-symbol {
            font-weight: bold;
            color: #ff6b6b;
            font-size: 1.1rem;
        }

        .opportunity-score {
            color: #4ecdc4;
            font-weight: bold;
        }

        .opportunity-details {
            font-size: 0.9rem;
            color: #aaa;
            margin-top: 5px;
        }

        .neural-pulse {
            position: absolute;
            top: 10px;
            right: 10px;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: #00d4ff;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.5; transform: scale(1.2); }
            100% { opacity: 1; transform: scale(1); }
        }

        .market-essence {
            grid-column: 1 / -1;
            background: linear-gradient(135deg, rgba(0, 212, 255, 0.1), rgba(255, 107, 107, 0.1));
            border: 2px solid rgba(0, 212, 255, 0.3);
        }

        .essence-metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }

        .essence-metric {
            background: rgba(0, 0, 0, 0.4);
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            position: relative;
        }

        .essence-metric::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 80%;
            height: 2px;
            background: linear-gradient(90deg, transparent, #00d4ff, transparent);
        }

        .essence-value {
            font-size: 1.8rem;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .essence-label {
            font-size: 0.9rem;
            color: #888;
        }

        .status-indicator {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.8);
            padding: 10px 15px;
            border-radius: 20px;
            font-size: 0.9rem;
            z-index: 1000;
        }

        .status-connected {
            color: #4ecdc4;
        }

        .status-disconnected {
            color: #ff6b6b;
        }

        .loading {
            text-align: center;
            padding: 50px;
            font-size: 1.2rem;
            color: #888;
        }

        .spinner {
            border: 3px solid rgba(255, 255, 255, 0.1);
            border-top: 3px solid #00d4ff;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .quantum-wave {
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 2px;
            background: linear-gradient(90deg, transparent, #00d4ff, transparent);
            animation: wave 3s ease-in-out infinite;
        }

        @keyframes wave {
            0%, 100% { transform: translateX(-100%); }
            50% { transform: translateX(100%); }
        }

        .error-message {
            background: rgba(255, 107, 107, 0.2);
            border: 1px solid #ff6b6b;
            color: #ff6b6b;
            padding: 10px;
            border-radius: 8px;
            margin: 10px 0;
        }

        .success-message {
            background: rgba(78, 205, 196, 0.2);
            border: 1px solid #4ecdc4;
            color: #4ecdc4;
            padding: 10px;
            border-radius: 8px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="status-indicator" id="statusIndicator">
        <span id="statusText">Conectando...</span>
    </div>

    <div class="quantum-container">
        <div class="header">
            <h1>🌙 QBTC - Esencia del Mercado Cuántico</h1>
            <div class="subtitle">Sistema de Oportunidades Neural - Capturando la Esencia del Mercado</div>
        </div>

        <div class="quantum-grid">
            <!-- Esencia del Mercado -->
            <div class="quantum-card market-essence">
                <div class="neural-pulse"></div>
                <div class="card-header">
                    <span class="card-icon">🌊</span>
                    Esencia del Mercado
                </div>
                <div class="essence-metrics" id="marketEssence">
                    <div class="loading">
                        <div class="spinner"></div>
                        Capturando esencia del mercado...
                    </div>
                </div>
                <div class="quantum-wave"></div>
            </div>

            <!-- Métricas Cuánticas -->
            <div class="quantum-card">
                <div class="neural-pulse"></div>
                <div class="card-header">
                    <span class="card-icon">⚛️</span>
                    Métricas Cuánticas
                </div>
                <div class="metric-grid" id="quantumMetrics">
                    <div class="metric">
                        <div class="metric-label">Coherencia</div>
                        <div class="metric-value" id="coherence">--</div>
                    </div>
                    <div class="metric">
                        <div class="metric-label">Conciencia</div>
                        <div class="metric-value" id="consciousness">--</div>
                    </div>
                    <div class="metric">
                        <div class="metric-label">Entrelazamiento</div>
                        <div class="metric-value" id="entanglement">--</div>
                    </div>
                    <div class="metric">
                        <div class="metric-label">Superposición</div>
                        <div class="metric-value" id="superposition">--</div>
                    </div>
                    <div class="metric">
                        <div class="metric-label">Tunelización</div>
                        <div class="metric-value" id="tunneling">--</div>
                    </div>
                    <div class="metric">
                        <div class="metric-label">Leverage Óptimo</div>
                        <div class="metric-value" id="optimalLeverage">--</div>
                    </div>
                </div>
            </div>

            <!-- Oportunidades Top -->
            <div class="quantum-card">
                <div class="neural-pulse"></div>
                <div class="card-header">
                    <span class="card-icon">🚀</span>
                    Oportunidades Top
                </div>
                <div class="opportunity-list" id="topOpportunities">
                    <div class="loading">
                        <div class="spinner"></div>
                        Analizando oportunidades...
                    </div>
                </div>
            </div>

            <!-- Contexto Neural -->
            <div class="quantum-card">
                <div class="neural-pulse"></div>
                <div class="card-header">
                    <span class="card-icon">🧠</span>
                    Contexto Neural
                </div>
                <div id="neuralContext">
                    <div class="loading">
                        <div class="spinner"></div>
                        Procesando contexto neural...
                    </div>
                </div>
            </div>

            <!-- Salud del Mercado -->
            <div class="quantum-card">
                <div class="neural-pulse"></div>
                <div class="card-header">
                    <span class="card-icon">🏥</span>
                    Salud del Mercado
                </div>
                <div id="marketHealth">
                    <div class="loading">
                        <div class="spinner"></div>
                        Evaluando salud del mercado...
                    </div>
                </div>
            </div>

            <!-- Flujo de Liquidez -->
            <div class="quantum-card">
                <div class="neural-pulse"></div>
                <div class="card-header">
                    <span class="card-icon">💧</span>
                    Flujo de Liquidez
                </div>
                <div id="liquidityFlow">
                    <div class="loading">
                        <div class="spinner"></div>
                        Monitoreando liquidez...
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        class QuantumMarketEssence {
            constructor() {
                this.apiBase = 'http://localhost:4601';
                this.frontendApi = 'http://localhost:4603';
                this.updateInterval = 5000;
                this.isConnected = false;
                this.lastUpdate = null;
                
                this.initialize();
            }

            async initialize() {
                console.log('🌙 Inicializando Esencia del Mercado Cuántico...');
                await this.checkConnection();
                await this.loadInitialData();
                this.startPeriodicUpdates();
            }

            async checkConnection() {
                try {
                    const response = await fetch(`${this.apiBase}/health`, {
                        method: 'GET',
                        timeout: 5000
                    });
                    
                    if (response.ok) {
                        this.isConnected = true;
                        this.updateStatus('Conectado', 'status-connected');
                        console.log('✅ Conexión establecida con el sistema cuántico');
                    } else {
                        throw new Error('Respuesta no válida');
                    }
                } catch (error) {
                    this.isConnected = false;
                    this.updateStatus('Desconectado', 'status-disconnected');
                    console.error('❌ Error de conexión:', error.message);
                }
            }

            updateStatus(text, className) {
                const statusText = document.getElementById('statusText');
                const statusIndicator = document.getElementById('statusIndicator');
                
                statusText.textContent = text;
                statusIndicator.className = `status-indicator ${className}`;
            }

            async loadInitialData() {
                if (!this.isConnected) {
                    console.log('⚠️ Sistema desconectado, usando datos simulados...');
                    this.displaySimulatedData();
                    return;
                }

                try {
                    await Promise.all([
                        this.loadOpportunities(),
                        this.loadNeuralContext(),
                        this.loadMarketHealth()
                    ]);
                } catch (error) {
                    console.error('❌ Error cargando datos iniciales:', error);
                    this.displaySimulatedData();
                }
            }

            async loadOpportunities() {
                try {
                    const response = await fetch(`${this.apiBase}/api/opportunities`, {
                        method: 'GET',
                        timeout: 10000
                    });

                    if (response.ok) {
                        const data = await response.json();
                        this.displayOpportunities(data);
                        this.displayQuantumMetrics(data.quantum || {});
                        this.displayMarketEssence(data);
                    } else {
                        throw new Error(`HTTP ${response.status}`);
                    }
                } catch (error) {
                    console.error('❌ Error cargando oportunidades:', error);
                    this.displaySimulatedOpportunities();
                }
            }

            async loadNeuralContext() {
                try {
                    const response = await fetch(`${this.apiBase}/api/neural-context`, {
                        method: 'GET',
                        timeout: 5000
                    });

                    if (response.ok) {
                        const data = await response.json();
                        this.displayNeuralContext(data);
                    } else {
                        throw new Error(`HTTP ${response.status}`);
                    }
                } catch (error) {
                    console.error('❌ Error cargando contexto neural:', error);
                    this.displaySimulatedNeuralContext();
                }
            }

            async loadMarketHealth() {
                try {
                    const response = await fetch(`${this.apiBase}/api/market-health`, {
                        method: 'GET',
                        timeout: 5000
                    });

                    if (response.ok) {
                        const data = await response.json();
                        this.displayMarketHealth(data);
                    } else {
                        throw new Error(`HTTP ${response.status}`);
                    }
                } catch (error) {
                    console.error('❌ Error cargando salud del mercado:', error);
                    this.displaySimulatedMarketHealth();
                }
            }

            displayOpportunities(data) {
                const container = document.getElementById('topOpportunities');
                
                if (!data.opportunities || data.opportunities.length === 0) {
                    container.innerHTML = '<div class="error-message">No se encontraron oportunidades</div>';
                    return;
                }

                const topOpportunities = data.opportunities
                    .sort((a, b) => (b.score || 0) - (a.score || 0))
                    .slice(0, 5);

                container.innerHTML = topOpportunities.map(opp => `
                    <div class="opportunity-item">
                        <div class="opportunity-symbol">${opp.symbol || 'N/A'}</div>
                        <div class="opportunity-score">Score: ${((opp.score || 0) * 100).toFixed(1)}%</div>
                        <div class="opportunity-details">
                            ${opp.type || 'N/A'} | ${opp.strategy || 'N/A'}
                        </div>
                    </div>
                `).join('');
            }

            displayQuantumMetrics(quantum) {
                const metrics = {
                    coherence: quantum.coherence || 0,
                    consciousness: quantum.consciousness || 0,
                    entanglement: quantum.entanglement || 0,
                    superposition: quantum.superposition || 0,
                    tunneling: quantum.tunneling || 0,
                    optimalLeverage: quantum.optimalLeverage || 0
                };

                Object.entries(metrics).forEach(([key, value]) => {
                    const element = document.getElementById(key);
                    if (element) {
                        element.textContent = `${(value * 100).toFixed(1)}%`;
                        element.style.color = this.getMetricColor(value);
                    }
                });
            }

            displayMarketEssence(data) {
                const container = document.getElementById('marketEssence');
                
                const essence = {
                    totalOpportunities: data.opportunities?.length || 0,
                    avgScore: data.opportunities?.reduce((sum, opp) => sum + (opp.score || 0), 0) / Math.max(data.opportunities?.length || 1, 1) || 0,
                    marketRegime: data.marketRegime || 'Neutral',
                    volatilityIndex: data.volatilityIndex || 0,
                    liquidityScore: data.liquidityScore || 0
                };

                container.innerHTML = `
                    <div class="essence-metric">
                        <div class="essence-value">${essence.totalOpportunities}</div>
                        <div class="essence-label">Oportunidades</div>
                    </div>
                    <div class="essence-metric">
                        <div class="essence-value">${(essence.avgScore * 100).toFixed(1)}%</div>
                        <div class="essence-label">Score Promedio</div>
                    </div>
                    <div class="essence-metric">
                        <div class="essence-value">${essence.marketRegime}</div>
                        <div class="essence-label">Régimen</div>
                    </div>
                    <div class="essence-metric">
                        <div class="essence-value">${(essence.volatilityIndex * 100).toFixed(1)}%</div>
                        <div class="essence-label">Volatilidad</div>
                    </div>
                    <div class="essence-metric">
                        <div class="essence-value">${(essence.liquidityScore * 100).toFixed(1)}%</div>
                        <div class="essence-label">Liquidez</div>
                    </div>
                `;
            }

            displayNeuralContext(data) {
                const container = document.getElementById('neuralContext');
                
                const session = data.sessionState || {};
                const quantum = data.quantumMetrics || {};

                container.innerHTML = `
                    <div class="metric-grid">
                        <div class="metric">
                            <div class="metric-label">Sesión Activa</div>
                            <div class="metric-value">${session.activeSession || 'N/A'}</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Intensidad</div>
                            <div class="metric-value">${((session.intensity || 0) * 100).toFixed(1)}%</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Liquidez Factor</div>
                            <div class="metric-value">${((session.liquidityFactor || 0) * 100).toFixed(1)}%</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Volatilidad Factor</div>
                            <div class="metric-value">${((session.volatilityFactor || 0) * 100).toFixed(1)}%</div>
                        </div>
                    </div>
                `;
            }

            displayMarketHealth(data) {
                const container = document.getElementById('marketHealth');
                
                const health = {
                    overall: data.overallHealth || 0,
                    spot: data.spotHealth || 0,
                    futures: data.futuresHealth || 0,
                    options: data.optionsHealth || 0
                };

                container.innerHTML = `
                    <div class="metric-grid">
                        <div class="metric">
                            <div class="metric-label">Salud General</div>
                            <div class="metric-value">${(health.overall * 100).toFixed(1)}%</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Spot</div>
                            <div class="metric-value">${(health.spot * 100).toFixed(1)}%</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Futuros</div>
                            <div class="metric-value">${(health.futures * 100).toFixed(1)}%</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Opciones</div>
                            <div class="metric-value">${(health.options * 100).toFixed(1)}%</div>
                        </div>
                    </div>
                `;
            }

            displaySimulatedData() {
                this.displaySimulatedOpportunities();
                this.displaySimulatedNeuralContext();
                this.displaySimulatedMarketHealth();
                this.displaySimulatedQuantumMetrics();
                this.displaySimulatedMarketEssence();
            }

            displaySimulatedOpportunities() {
                const container = document.getElementById('topOpportunities');
                container.innerHTML = `
                    <div class="opportunity-item">
                        <div class="opportunity-symbol">BTCUSDT</div>
                        <div class="opportunity-score">Score: 85.2%</div>
                        <div class="opportunity-details">FUTURES | Long Leverage</div>
                    </div>
                    <div class="opportunity-item">
                        <div class="opportunity-symbol">ETHUSDT</div>
                        <div class="opportunity-score">Score: 78.9%</div>
                        <div class="opportunity-details">SPOT | Momentum</div>
                    </div>
                    <div class="opportunity-item">
                        <div class="opportunity-symbol">SOLUSDT</div>
                        <div class="opportunity-score">Score: 72.1%</div>
                        <div class="opportunity-details">OPTIONS | Volatility</div>
                    </div>
                `;
            }

            displaySimulatedNeuralContext() {
                const container = document.getElementById('neuralContext');
                container.innerHTML = `
                    <div class="metric-grid">
                        <div class="metric">
                            <div class="metric-label">Sesión Activa</div>
                            <div class="metric-value">Americana</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Intensidad</div>
                            <div class="metric-value">75.3%</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Liquidez Factor</div>
                            <div class="metric-value">82.1%</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Volatilidad Factor</div>
                            <div class="metric-value">68.7%</div>
                        </div>
                    </div>
                `;
            }

            displaySimulatedMarketHealth() {
                const container = document.getElementById('marketHealth');
                container.innerHTML = `
                    <div class="metric-grid">
                        <div class="metric">
                            <div class="metric-label">Salud General</div>
                            <div class="metric-value">87.5%</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Spot</div>
                            <div class="metric-value">92.1%</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Futuros</div>
                            <div class="metric-value">85.3%</div>
                        </div>
                        <div class="metric">
                            <div class="metric-label">Opciones</div>
                            <div class="metric-value">79.8%</div>
                        </div>
                    </div>
                `;
            }

            displaySimulatedQuantumMetrics() {
                const metrics = {
                    coherence: 0.85,
                    consciousness: 0.72,
                    entanglement: 0.68,
                    superposition: 0.91,
                    tunneling: 0.76,
                    optimalLeverage: 0.83
                };

                Object.entries(metrics).forEach(([key, value]) => {
                    const element = document.getElementById(key);
                    if (element) {
                        element.textContent = `${(value * 100).toFixed(1)}%`;
                        element.style.color = this.getMetricColor(value);
                    }
                });
            }

            displaySimulatedMarketEssence() {
                const container = document.getElementById('marketEssence');
                container.innerHTML = `
                    <div class="essence-metric">
                        <div class="essence-value">12</div>
                        <div class="essence-label">Oportunidades</div>
                    </div>
                    <div class="essence-metric">
                        <div class="essence-value">78.7%</div>
                        <div class="essence-label">Score Promedio</div>
                    </div>
                    <div class="essence-metric">
                        <div class="essence-value">Bullish</div>
                        <div class="essence-label">Régimen</div>
                    </div>
                    <div class="essence-metric">
                        <div class="essence-value">65.2%</div>
                        <div class="essence-label">Volatilidad</div>
                    </div>
                    <div class="essence-metric">
                        <div class="essence-value">82.1%</div>
                        <div class="essence-label">Liquidez</div>
                    </div>
                `;
            }

            getMetricColor(value) {
                if (value >= 0.8) return '#4ecdc4';
                if (value >= 0.6) return '#ffd93d';
                if (value >= 0.4) return '#ff6b6b';
                return '#888';
            }

            startPeriodicUpdates() {
                setInterval(async () => {
                    if (this.isConnected) {
                        await this.loadOpportunities();
                        await this.loadNeuralContext();
                        await this.loadMarketHealth();
                    }
                }, this.updateInterval);
            }
        }

        // Inicializar el sistema cuando se carga la página
        document.addEventListener('DOMContentLoaded', () => {
            new QuantumMarketEssence();
        });
    </script>
</body>
</html>
