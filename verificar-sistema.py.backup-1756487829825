#!/usr/bin/env python3
"""
VERIFICACI√ìN R√ÅPIDA - SISTEMA QBTC BANDA 46
Script para verificar el estado de todos los servicios
"""

import requests
import time
from datetime import datetime

def print_banner():
    """Imprime el banner del sistema."""
    print("=" * 80)
    print("üîç VERIFICACI√ìN R√ÅPIDA - SISTEMA QBTC BANDA 46")
    print("=" * 80)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("üéØ Banda: 46")
    print("üîó Puertos: 4601-4606")
    print("=" * 80)

def check_service(name, url, endpoint=""):
    """Verifica un servicio espec√≠fico."""
    try:
        full_url = f"{url}{endpoint}"
        response = requests.get(full_url, timeout=5)
        
        if response.status_code == 200:
            print(f"‚úÖ {name} - {full_url} - FUNCIONANDO")
            return True
        else:
            print(f"‚ùå {name} - {full_url} - ERROR {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå {name} - {url} - NO RESPONDE: {e}")
        return False

def main():
    """Funci√≥n principal."""
    print_banner()
    
    services = [
        {
            "name": "SRONA API",
            "url": "http://localhost:4601",
            "endpoint": "/health"
        },
        {
            "name": "QBTC Core",
            "url": "http://localhost:4602",
            "endpoint": "/api/futures-data"
        },
        {
            "name": "Frontend API",
            "url": "http://localhost:4603",
            "endpoint": "/health"
        },
        {
            "name": "Vigo Futures",
            "url": "http://localhost:4604",
            "endpoint": "/health"
        },
        {
            "name": "Dashboard QBTC",
            "url": "http://localhost:4605",
            "endpoint": "/"
        },
        {
            "name": "Monitor de Gr√°ficos",
            "url": "http://localhost:4606",
            "endpoint": "/"
        }
    ]
    
    print("üîç VERIFICANDO SERVICIOS")
    print("-" * 50)
    
    working_services = 0
    total_services = len(services)
    
    for service in services:
        if check_service(service["name"], service["url"], service["endpoint"]):
            working_services += 1
        time.sleep(0.5)
    
    print("\n" + "=" * 80)
    print("üìä RESUMEN DEL SISTEMA")
    print("=" * 80)
    
    print(f"‚úÖ Servicios funcionando: {working_services}/{total_services}")
    
    if working_services == total_services:
        print("üéâ ¬°SISTEMA COMPLETAMENTE FUNCIONAL!")
        print("üöÄ Todos los servicios est√°n respondiendo correctamente")
    elif working_services > 0:
        print("‚ö†Ô∏è SISTEMA PARCIALMENTE FUNCIONAL")
        print(f"üîß {working_services} de {total_services} servicios funcionando")
    else:
        print("‚ùå SISTEMA NO FUNCIONAL")
        print("üîß Ning√∫n servicio est√° respondiendo")
    
    print("\nüåê ACCESO A SERVICIOS:")
    print("‚Ä¢ SRONA API: http://localhost:4601")
    print("‚Ä¢ QBTC Core: http://localhost:4602")
    print("‚Ä¢ Frontend API: http://localhost:4603")
    print("‚Ä¢ Vigo Futures: http://localhost:4604")
    print("‚Ä¢ Dashboard QBTC: http://localhost:4605")
    print("‚Ä¢ Monitor de Gr√°ficos: http://localhost:4606")
    
    print("\nüìã COMANDOS √öTILES:")
    print("‚Ä¢ Verificar: python verificar-sistema.py")
    print("‚Ä¢ Detener: taskkill /F /IM python.exe & taskkill /F /IM node.exe")
    print("‚Ä¢ Reiniciar: python deploy-banda-46-simple.py")
    
    print("\n" + "=" * 80)

if __name__ == "__main__":
    main()
