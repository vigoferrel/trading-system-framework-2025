
// Constantes f√≠sicas reales del sistema
const PHYSICAL_CONSTANTS = {
  "QUANTUM_COHERENCE": 0.75,
  "QUANTUM_CONSCIOUSNESS": 0.8,
  "QUANTUM_ENTANGLEMENT": 0.65,
  "QUANTUM_SUPERPOSITION": 0.7,
  "QUANTUM_TUNNELING": 0.6,
  "MARKET_VOLATILITY": 0.05,
  "MARKET_MOMENTUM": 0.1,
  "MARKET_LIQUIDITY": 0.75,
  "MARKET_SPREAD": 0.001,
  "MARKET_DEPTH": 500000,
  "FUNDING_RATE": 0.02,
  "FUNDING_VOLATILITY": 0.01,
  "FUNDING_DEVIATION": 0.5,
  "FUNDING_ANNUALIZED": 5,
  "LIQUIDATION_PROBABILITY": 0.05,
  "SLIPPAGE_RATE": 0.0025,
  "VOLATILITY_RISK": 0.1,
  "EXECUTION_RISK": 0.005,
  "VOLUME_24H": 500000,
  "VOLUME_RATIO": 0.75,
  "VOLUME_EXPANSION": 300000,
  "PRICE_CHANGE": 0.02,
  "PRICE_ACCELERATION": 0.015,
  "PRICE_MOMENTUM": 0.01,
  "TIME_TO_FUNDING": 1800000,
  "SESSION_INTENSITY": 0.6,
  "TEMPORAL_RESONANCE": 0.7,
  "FIBONACCI_STRENGTH": 0.75,
  "FIBONACCI_INDEX": 5,
  "NEURAL_CONFIDENCE": 0.85,
  "NEURAL_COHERENCE": 0.8,
  "NEURAL_ENTANGLEMENT": 0.7,
  "BASE_LEVERAGE": 15,
  "CONSERVATIVE_LEVERAGE": 10,
  "AGGRESSIVE_LEVERAGE": 25,
  "STOP_LOSS": 0.03,
  "TAKE_PROFIT": 0.06,
  "BASE_SCORE": 0.65,
  "CONFIDENCE_SCORE": 0.75,
  "QUALITY_SCORE": 0.8
};

/**
 * LAUNCH SRONA MULTI WHALE BACKGROUND
 * ===================================
 * Script para cargar variables de entorno y lanzar el sistema en segundo plano
 */

require('dotenv').config({ path: '../.env' });
const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

// Configuraci√≥n
const CONFIG = {
    scriptPath: path.join(__dirname, 'start-srona-multi-whale-background.js'),
    logFile: path.join(__dirname, '../logs/srona-multi-whale-launch.log'),
    pidFile: path.join(__dirname, '../logs/srona-multi-whale-launch.pid'),
    nodeArgs: []
};

class Launcher {
    constructor(config) {
        this.config = config;
        this.childProcess = null;
        this.ensureDirectories();
    }

    ensureDirectories() {
        const dirs = [
            path.dirname(this.config.logFile),
            path.dirname(this.config.pidFile)
        ];
        
        for (const dir of dirs) {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
            }
        }
    }

    async launch() {
        try {
            console.log('üöÄ Lanzando SRONA MULTI WHALE en segundo plano...');
            console.log('================================================');
            
            // Verificar variables de entorno
            this.checkEnvironmentVariables();
            
            // Verificar si ya hay un proceso en ejecuci√≥n
            if (this.isProcessRunning()) {
                console.warn('‚ö†Ô∏è Ya hay un proceso en ejecuci√≥n');
                return false;
            }
            
            // Lanzar proceso en segundo plano
            this.childProcess = spawn('node', [this.config.scriptPath, ...this.config.nodeArgs], {
                detached: true,
                stdio: ['ignore', 'pipe', 'pipe'],
                env: process.env
            });
            
            // Redirigir salida a archivos
            const outStream = fs.createWriteStream(this.config.logFile, { flags: 'a' });
            const errStream = fs.createWriteStream(this.config.logFile, { flags: 'a' });
            
            this.childProcess.stdout.pipe(outStream);
            this.childProcess.stderr.pipe(errStream);
            
            // Escribir PID file
            fs.writeFileSync(this.config.pidFile, this.childProcess.pid.toString());
            
            // Desconectar proceso para que se ejecute independientemente
            this.childProcess.unref();
            
            console.log(`‚úÖ Proceso lanzado exitosamente`);
            console.log(`üìä PID: ${this.childProcess.pid}`);
            console.log(`üìù Log file: ${this.config.logFile}`);
            console.log(`üìà PID file: ${this.config.pidFile}`);
            console.log(`‚è∞ El sistema comenzar√° a analizar datos en segundos...`);
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Error lanzando proceso:', error);
            return false;
        }
    }

    checkEnvironmentVariables() {
        const requiredVars = ['BINANCE_API_KEY', 'BINANCE_API_SECRET'];
        const missingVars = requiredVars.filter(varName => !process.env[varName]);
        
        if (missingVars.length > 0) {
            throw new Error(`Faltan variables de entorno requeridas: ${missingVars.join(', ')}`);
        }
        
        console.log('‚úÖ Variables de entorno verificadas');
    }

    isProcessRunning() {
        try {
            if (fs.existsSync(this.config.pidFile)) {
                const pid = parseInt(fs.readFileSync(this.config.pidFile, 'utf8'));
                
                // Verificar si el proceso est√° activo (solo en sistemas Unix-like)
                try {
                    process.kill(pid, 0); // No env√≠a se√±al, solo verifica si existe
                    console.warn(`‚ö†Ô∏è Proceso con PID ${pid} ya est√° en ejecuci√≥n`);
                    return true;
                } catch (e) {
                    // El proceso no existe, eliminar PID file
                    fs.unlinkSync(this.config.pidFile);
                    return false;
                }
            }
            return false;
        } catch (error) {
            console.error('Error verificando proceso:', error);
            return false;
        }
    }

    async stop() {
        try {
            if (!fs.existsSync(this.config.pidFile)) {
                console.log('‚ö†Ô∏è No hay proceso en ejecuci√≥n');
                return false;
            }
            
            const pid = parseInt(fs.readFileSync(this.config.pidFile, 'utf8'));
            
            console.log(`üõë Deteniendo proceso con PID: ${pid}`);
            
            // Enviar se√±al SIGTERM para graceful shutdown
            process.kill(pid, 'SIGTERM');
            
            // Esperar un tiempo para que el proceso se detenga
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            // Verificar si el proceso todav√≠a existe
            try {
                process.kill(pid, 0);
                // Si todav√≠a existe, enviar SIGKILL
                console.log('üö® Forzando detenci√≥n del proceso...');
                process.kill(pid, 'SIGKILL');
            } catch (e) {
                // El proceso ya no existe
                console.log('‚úÖ Proceso detenido exitosamente');
            }
            
            // Eliminar PID file
            if (fs.existsSync(this.config.pidFile)) {
                fs.unlinkSync(this.config.pidFile);
            }
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Error deteniendo proceso:', error);
            return false;
        }
    }

    getStatus() {
        try {
            if (fs.existsSync(this.config.pidFile)) {
                const pid = parseInt(fs.readFileSync(this.config.pidFile, 'utf8'));
                
                try {
                    process.kill(pid, 0);
                    return {
                        running: true,
                        pid: pid,
                        pidFile: this.config.pidFile,
                        logFile: this.config.logFile
                    };
                } catch (e) {
                    // El proceso no existe, limpiar PID file
                    if (fs.existsSync(this.config.pidFile)) {
                        fs.unlinkSync(this.config.pidFile);
                    }
                    return {
                        running: false,
                        pid: null,
                        pidFile: this.config.pidFile,
                        logFile: this.config.logFile
                    };
                }
            }
            
            return {
                running: false,
                pid: null,
                pidFile: this.config.pidFile,
                logFile: this.config.logFile
            };
            
        } catch (error) {
            console.error('Error obteniendo estado:', error);
            return {
                running: false,
                pid: null,
                error: error.message
            };
        }
    }

    showLogs(lines = 20) {
        try {
            if (!fs.existsSync(this.config.logFile)) {
                console.log('‚ö†Ô∏è No hay archivo de logs');
                return;
            }
            
            const logContent = fs.readFileSync(this.config.logFile, 'utf8');
            const logLines = logContent.split('\n');
            const recentLines = logLines.slice(-lines);
            
            console.log(`üìù √öltimas ${lines} l√≠neas del log:`);
            console.log('=====================================');
            recentLines.forEach((line, index) => {
                if (line.trim()) {
                    console.log(`${String(logLines.length - lines + index + 1).padStart(6)}: ${line}`);
                }
            });
            
        } catch (error) {
            console.error('‚ùå Error leyendo logs:', error);
        }
    }
}

// Funci√≥n principal
async function main() {
    const args = process.argv.slice(2);
    const command = args[0] || 'start';
    
    const launcher = new Launcher(CONFIG);
    
    switch (command) {
        case 'start':
            const success = await launcher.launch();
            process.exit(success ? 0 : 1);
            
        case 'stop':
            const stopped = await launcher.stop();
            process.exit(stopped ? 0 : 1);
            
        case 'status':
            const status = launcher.getStatus();
            console.log('üìä Estado del proceso:');
            console.log('======================');
            console.log(`Ejecutando: ${status.running ? '‚úÖ S√≠' : '‚ùå No'}`);
            if (status.pid) {
                console.log(`PID: ${status.pid}`);
            }
            console.log(`PID File: ${status.pidFile}`);
            console.log(`Log File: ${status.logFile}`);
            if (status.error) {
                console.log(`Error: ${status.error}`);
            }
            process.exit(0);
            
        case 'logs':
            const lines = parseInt(args[1]) || 20;
            launcher.showLogs(lines);
            process.exit(0);
            
        default:
            console.log('Uso: node launch-srona-multi-whale-background.js [start|stop|status|logs] [lines]');
            console.log('');
            console.log('Comandos:');
            console.log('  start   - Inicia el sistema en segundo plano');
            console.log('  stop    - Detiene el sistema en segundo plano');
            console.log('  status  - Muestra el estado del sistema');
            console.log('  logs    - Muestra las √∫ltimas l√≠neas del log (opcional: n√∫mero de l√≠neas)');
            process.exit(1);
    }
}

// Ejecutar si es el m√≥dulo principal
if (require.main === module) {
    main().catch(error => {
        console.error('Error fatal:', error);
        process.exit(1);
    });
}

module.exports = { Launcher, CONFIG };