const axios = require('axios');

const GEMINI_CONFIG = {
    apiKey: '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',
    model: 'google/gemini-flash-1.5-8b',
    baseUrl: 'https://openrouter.ai/api/v1',
    timeout: 30000
};

async function testGeminiAPI() {
    console.log('[TEST] Probando API de OpenRouter/Gemini...');
    
    const requestBody = {
        model: GEMINI_CONFIG.model,
        messages: [
            {
                role: 'system',
                content: 'Eres un experto analista de mercados financieros. Responde 칔NICAMENTE con JSON v치lido, sin markdown.'
            },
            {
                role: 'user',
                content: 'Analiza BTCUSDT y genera una decisi칩n de trading en formato JSON con campos: decision, confidence, reasoning, risk_level, timeframe, key_factors, contradictions_resolved'
            }
        ],
        temperature: 0.3,
        max_tokens: 1000,
        top_p: 0.9
    };
    
    try {
        console.log('游니 Enviando petici칩n a OpenRouter...');
        
        const response = await axios.post(
            `${GEMINI_CONFIG.baseUrl}/chat/completions`,
            requestBody,
            {
                headers: {
                    'Authorization': `Bearer ${GEMINI_CONFIG.apiKey}`,
                    'Content-Type': 'application/json',
                    'HTTP-Referer': 'https://qbtc-banda46.com',
                    'X-Title': 'QBTC Neural Orchestrator'
                },
                timeout: GEMINI_CONFIG.timeout
            }
        );
        
        console.log('[OK] Respuesta recibida:');
        console.log('Status:', response.status);
        console.log('Headers:', response.headers);
        
        if (response.data && response.data.choices && response.data.choices[0]) {
            const content = response.data.choices[0].message.content;
            console.log('游늯 Contenido de la respuesta:');
            console.log(content);
            
            // Intentar parsear JSON
            try {
                const cleanContent = content.replace(/```json\s*/g, '').replace(/```\s*/g, '').trim();
                const parsed = JSON.parse(cleanContent);
                console.log('[OK] JSON parseado correctamente:');
                console.log(JSON.stringify(parsed, null, 2));
            } catch (parseError) {
                console.log('[ERROR] Error parseando JSON:', parseError.message);
            }
        } else {
            console.log('[ERROR] Respuesta inv치lida:', response.data);
        }
        
    } catch (error) {
        console.error('[ERROR] Error en la petici칩n:');
        console.error('Status:', error.response?.status);
        console.error('Status Text:', error.response?.statusText);
        console.error('Headers:', error.response?.headers);
        console.error('Data:', error.response?.data);
        console.error('Message:', error.message);
    }
}

testGeminiAPI();
