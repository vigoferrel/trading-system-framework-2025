# QBTC Quantum System - Referencia R√°pida de Comandos

## [START] COMANDOS PRINCIPALES

### Arranque del Sistema
```powershell
# Arranque normal
.\Start-QBTCQuantumSystem.ps1

# Arranque en modo de prueba
.\Start-QBTCQuantumSystem.ps1 -TestMode

# Arranque sin verificaciones previas
.\Start-QBTCQuantumSystem.ps1 -SkipPreVerification
```

### Parada del Sistema
```powershell
# Parada segura normal
.\Stop-AllSystems.ps1

# Parada forzada inmediata
.\Stop-AllSystems.ps1 -Force

# Parada sin guardar estado
.\Stop-AllSystems.ps1 -SaveState:$false
```

### Verificaci√≥n de Salud
```powershell
# Verificaci√≥n b√°sica
.\Check-SystemHealth.ps1

# Verificaci√≥n detallada
.\Check-SystemHealth.ps1 -Detailed

# Exportar reporte de salud
.\Check-SystemHealth.ps1 -Detailed -ExportReport
```

---

## [DATA] MONITOREO EN TIEMPO REAL

### Ver Jobs del Sistema
```powershell
# Listar todos los jobs
Get-Job

# Ver jobs en ejecuci√≥n
Get-Job | Where-Object { $_.State -eq "Running" }

# Ver jobs fallidos
Get-Job | Where-Object { $_.State -eq "Failed" }

# Ver output de un job espec√≠fico
Receive-Job -Name "QuantumEngine"
```

### Monitorear Logs
```powershell
# Ver logs de arranque en tiempo real
Get-Content "logs\startup-*.log" -Wait -Tail 10

# Ver logs m√°s recientes
Get-ChildItem "logs\*.log" | Sort-Object LastWriteTime -Descending | Select-Object -First 5

# Ver logs de un d√≠a espec√≠fico
Get-ChildItem "logs\*$(Get-Date -Format 'yyyyMMdd')*.log"
```

### Acceder Dashboard Web
- **URL Principal**: http://localhost:8080
- **API Quantum**: http://localhost:8888/quantum/status
- **Swagger API**: http://localhost:8080/swagger

---

## ‚öõÔ∏è COMANDOS CU√ÅNTICOS

### Estado Cu√°ntico
```powershell
# Verificar coherencia cu√°ntica
Invoke-RestMethod -Uri "http://localhost:8888/quantum/status"

# Guardar estado cu√°ntico
Invoke-RestMethod -Uri "http://localhost:8888/quantum/save-state" -Method POST

# Recargar configuraci√≥n cu√°ntica
Invoke-RestMethod -Uri "http://localhost:8888/quantum/reload-config" -Method POST
```

### Algoritmos Cu√°nticos
```powershell
# Ejecutar an√°lisis cu√°ntico completo
Invoke-RestMethod -Uri "http://localhost:8888/quantum/analyze" -Method POST

# Verificar entrelazamiento
Invoke-RestMethod -Uri "http://localhost:8888/quantum/entanglement"

# Estado de qubits
Invoke-RestMethod -Uri "http://localhost:8888/quantum/qubits"
```

---

## üîó CONECTIVIDAD BINANCE

### Verificar Conectividad
```powershell
# Test conectividad API
Test-NetConnection -ComputerName "api.binance.com" -Port 443

# Test WebSocket
Test-NetConnection -ComputerName "stream.binance.com" -Port 9443

# Ping Binance API
Invoke-RestMethod -Uri "https://api.binance.com/api/v3/ping"
```

### Estado de √ìrdenes y Posiciones
```powershell
# Ver √≥rdenes activas
Invoke-RestMethod -Uri "http://localhost:8080/api/orders/active"

# Ver posiciones abiertas
Invoke-RestMethod -Uri "http://localhost:8080/api/positions/active"

# Ver PnL actual
Invoke-RestMethod -Uri "http://localhost:8080/api/pnl/current"
```

---

## üíπ COMANDOS DE TRADING

### Control de Trading
```powershell
# Detener trading
Invoke-RestMethod -Uri "http://localhost:8080/api/trading/halt" -Method POST

# Reanudar trading
Invoke-RestMethod -Uri "http://localhost:8080/api/trading/resume" -Method POST

# Estado del sistema de trading
Invoke-RestMethod -Uri "http://localhost:8080/api/trading/status"
```

### Gesti√≥n de Posiciones
```powershell
# Cerrar todas las posiciones
Invoke-RestMethod -Uri "http://localhost:8080/api/positions/close-all" -Method POST

# Cerrar posici√≥n espec√≠fica
Invoke-RestMethod -Uri "http://localhost:8080/api/positions/close/BTCUSDT" -Method POST
```

---

## [UP] M√âTRICAS Y AN√ÅLISIS

### M√©tricas del Sistema
```powershell
# CPU y Memoria
Get-Counter '\Processor(_Total)\% Processor Time'
Get-Counter '\Memory\Available MBytes'

# Espacio en disco
Get-CimInstance -ClassName Win32_LogicalDisk -Filter "DriveType=3"

# Conexiones de red activas
Get-NetTCPConnection -State Established
```

### M√©tricas de Trading
```powershell
# Resumen de performance
Invoke-RestMethod -Uri "http://localhost:8080/api/metrics/performance"

# Win rate y estad√≠sticas
Invoke-RestMethod -Uri "http://localhost:8080/api/metrics/stats"

# Drawdown actual
Invoke-RestMethod -Uri "http://localhost:8080/api/metrics/drawdown"
```

---

## üõ†Ô∏è MANTENIMIENTO

### Limpiar Sistema
```powershell
# Limpiar jobs completados
Get-Job | Where-Object { $_.State -eq "Completed" } | Remove-Job

# Limpiar logs antiguos (m√°s de 7 d√≠as)
Get-ChildItem "logs\*.log" | Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-7) } | Remove-Item

# Forzar garbage collection
[System.GC]::Collect()
[System.GC]::WaitForPendingFinalizers()
```

### Reiniciar Componentes
```powershell
# Reiniciar componente espec√≠fico
Stop-Job -Name "QuantumEngine"
Start-Job -Name "QuantumEngine" -ScriptBlock { node quantum\QuantumEngineCore.js }

# Reiniciar todos los jobs
Get-Job | Stop-Job -PassThru | Remove-Job
.\Start-QBTCQuantumSystem.ps1
```

---

## [ALERT] COMANDOS DE EMERGENCIA

### Parada de Emergencia
```powershell
# Parada forzada inmediata
Get-Job | Stop-Job -PassThru | Remove-Job -Force

# Cerrar todas las conexiones
Get-NetTCPConnection -LocalPort 8080,8888 | ForEach-Object { Stop-Process -Id $_.OwningProcess -Force }

# Limpieza completa de emergencia
.\Stop-AllSystems.ps1 -Force
```

### Recovery del Sistema
```powershell
# Verificar integridad despu√©s de error
.\Check-SystemHealth.ps1 -Detailed -ExportReport

# Restart completo del sistema
.\Stop-AllSystems.ps1 -Force
Start-Sleep 30
.\Start-QBTCQuantumSystem.ps1
```

---

## üìù LOGS Y DIAGN√ìSTICO

### Ubicaciones de Logs
- **Startup Logs**: `logs\startup-YYYYMMDD-HHMMSS.log`
- **Shutdown Logs**: `logs\shutdown-YYYYMMDD-HHMMSS.log`
- **Health Reports**: `logs\health-report-YYYYMMDD-HHMMSS.json`
- **Trading Logs**: `logs\trading-*.log`
- **Error Logs**: `logs\error-*.log`

### Comandos de Diagn√≥stico
```powershell
# Ver √∫ltimo error
Get-EventLog -LogName Application -Source "QBTC*" -Newest 10

# Verificar puertos en uso
Get-NetTCPConnection -LocalPort 8080,8888,9000

# Ver procesos Python/Node activos
Get-Process | Where-Object { $_.ProcessName -match "python|node" }
```

---

## üîß CONFIGURACI√ìN

### Variables de Entorno
```powershell
# Configurar credenciales Binance
$env:BINANCE_API_KEY = "tu_api_key_aqui"
$env:BINANCE_API_SECRET = "tu_api_secret_aqui"

# Configurar modo de operaci√≥n
$env:QBTC_MODE = "PRODUCTION"  # o "TEST"
$env:QBTC_LOG_LEVEL = "INFO"   # DEBUG, INFO, WARNING, ERROR
```

### Archivos de Configuraci√≥n
- **Sistema Principal**: `config\system.json`
- **Configuraci√≥n Cu√°ntica**: `quantum\config.json`
- **Par√°metros Trading**: `config\trading.json`
- **Configuraci√≥n Binance**: `config\binance.json`

---

## üìû SOPORTE Y TROUBLESHOOTING

### Comandos √ötiles para Soporte
```powershell
# Generar reporte completo del sistema
$report = @{
    Timestamp = Get-Date
    SystemInfo = Get-ComputerInfo
    Jobs = Get-Job
    Processes = Get-Process | Where-Object { $_.ProcessName -match "python|node" }
    NetworkConnections = Get-NetTCPConnection -LocalPort 8080,8888
    HealthReport = .\Check-SystemHealth.ps1 -Detailed
}
$report | ConvertTo-Json -Depth 3 | Out-File "system-report.json"

# Crear backup de configuraci√≥n
Compress-Archive -Path "config\*", "quantum\*" -DestinationPath "backup-config-$(Get-Date -Format 'yyyyMMdd').zip"
```

### Contacto y Recursos
- **Logs Directory**: `logs\`
- **Config Directory**: `config\`
- **Documentation**: `MASTER_STARTUP_WORKFLOW.md`
- **Health Check**: `.\Check-SystemHealth.ps1 -Detailed`

---

*Este sistema utiliza exclusivamente algoritmos cu√°nticos deterministas basados en z = 9 + 16i @ Œª=log(7919) para m√°xima precisi√≥n y consistencia.*
