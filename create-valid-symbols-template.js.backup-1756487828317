const axios = require('axios');

// Funci√≥n para obtener s√≠mbolos v√°lidos de Binance Futures
async function getValidBinanceFuturesSymbols() {
    try {
        console.log('üîç Obteniendo s√≠mbolos v√°lidos de Binance Futures...');
        
        // Obtener datos reales de Binance Futures
        const response = await axios.get('https://fapi.binance.com/fapi/v1/ticker/24hr');
        
        if (response.data && Array.isArray(response.data)) {
            const validSymbols = [];
            
            // Filtrar solo s√≠mbolos USDT que realmente existen
            response.data.forEach(item => {
                if (item.symbol.endsWith('USDT') && 
                    parseFloat(item.lastPrice) > 0 && 
                    parseFloat(item.volume) > 0) {
                    validSymbols.push(item.symbol);
                }
            });
            
            // Ordenar alfab√©ticamente
            validSymbols.sort();
            
            console.log(`‚úÖ S√≠mbolos v√°lidos encontrados: ${validSymbols.length}`);
            
            // Crear el template
            const template = `// PLANTILLA √öNICA DE S√çMBOLOS V√ÅLIDOS DE BINANCE FUTURES
// Generado autom√°ticamente: ${new Date().toISOString()}
// Total s√≠mbolos v√°lidos: ${validSymbols.length}

const VALID_BINANCE_FUTURES_SYMBOLS = [
${validSymbols.map(symbol => `    '${symbol}'`).join(',\n')}
];

module.exports = { VALID_BINANCE_FUTURES_SYMBOLS };`;
            
            // Guardar en archivo
            const fs = require('fs');
            fs.writeFileSync('valid-symbols-template.js', template);
            
            console.log('‚úÖ Template guardado en: valid-symbols-template.js');
            console.log(`üìä Primeros 10 s√≠mbolos: ${validSymbols.slice(0, 10).join(', ')}`);
            console.log(`üìä √öltimos 10 s√≠mbolos: ${validSymbols.slice(-10).join(', ')}`);
            
            return validSymbols;
        }
    } catch (error) {
        console.error('‚ùå Error obteniendo s√≠mbolos v√°lidos:', error.message);
        return [];
    }
}

// Ejecutar
getValidBinanceFuturesSymbols();
