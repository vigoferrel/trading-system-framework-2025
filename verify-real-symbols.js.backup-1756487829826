const axios = require('axios');

// Funci√≥n para verificar s√≠mbolos reales de Binance Futures
async function verifyRealSymbols() {
    try {
        console.log('üîç Verificando s√≠mbolos reales de Binance Futures...');
        
        // Obtener datos reales de Binance Futures
        const response = await axios.get('https://fapi.binance.com/fapi/v1/ticker/24hr');
        
        if (response.data && Array.isArray(response.data)) {
            const realSymbols = [];
            const fakeSymbols = [];
            
            // Obtener la plantilla actual
            const currentTemplate = require('./valid-symbols-template.js').VALID_BINANCE_FUTURES_SYMBOLS;
            
            console.log(`üìä Verificando ${currentTemplate.length} s√≠mbolos de la plantilla...`);
            
            // Verificar cada s√≠mbolo de la plantilla
            currentTemplate.forEach(symbol => {
                const exists = response.data.some(item => item.symbol === symbol);
                if (exists) {
                    realSymbols.push(symbol);
                } else {
                    fakeSymbols.push(symbol);
                }
            });
            
            console.log(`‚úÖ S√≠mbolos reales encontrados: ${realSymbols.length}`);
            console.log(`‚ùå S√≠mbolos falsos encontrados: ${fakeSymbols.length}`);
            
            if (fakeSymbols.length > 0) {
                console.log('\nüö® S√çMBOLOS FALSOS DETECTADOS:');
                fakeSymbols.forEach(symbol => {
                    console.log(`  - ${symbol}`);
                });
            }
            
            // Crear nueva plantilla con solo s√≠mbolos reales
            const newTemplate = `// PLANTILLA √öNICA DE S√çMBOLOS V√ÅLIDOS DE BINANCE FUTURES
// Generado autom√°ticamente: ${new Date().toISOString()}
// Total s√≠mbolos v√°lidos: ${realSymbols.length}
// S√≠mbolos falsos eliminados: ${fakeSymbols.length}

const VALID_BINANCE_FUTURES_SYMBOLS = [
${realSymbols.map(symbol => `    '${symbol}'`).join(',\n')}
];

module.exports = { VALID_BINANCE_FUTURES_SYMBOLS };`;
            
            // Guardar nueva plantilla
            const fs = require('fs');
            fs.writeFileSync('valid-symbols-template.js', newTemplate);
            
            console.log('\n‚úÖ Nueva plantilla guardada con solo s√≠mbolos reales');
            console.log(`üìä Total s√≠mbolos v√°lidos: ${realSymbols.length}`);
            
            // Verificar espec√≠ficamente MEMEFIUSDT y XEMUSDT
            console.log('\nüîç Verificaci√≥n espec√≠fica:');
            console.log(`MEMEFIUSDT existe: ${realSymbols.includes('MEMEFIUSDT')}`);
            console.log(`XEMUSDT existe: ${realSymbols.includes('XEMUSDT')}`);
            
            return {
                realSymbols,
                fakeSymbols,
                totalReal: realSymbols.length,
                totalFake: fakeSymbols.length
            };
        }
    } catch (error) {
        console.error('‚ùå Error verificando s√≠mbolos:', error.message);
        return null;
    }
}

// Ejecutar verificaci√≥n
verifyRealSymbols();
