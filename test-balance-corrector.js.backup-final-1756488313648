
// Constantes físicas reales del sistema
const PHYSICAL_CONSTANTS = {
  "QUANTUM_COHERENCE": 0.75,
  "QUANTUM_CONSCIOUSNESS": 0.8,
  "QUANTUM_ENTANGLEMENT": 0.65,
  "QUANTUM_SUPERPOSITION": 0.7,
  "QUANTUM_TUNNELING": 0.6,
  "MARKET_VOLATILITY": 0.05,
  "MARKET_MOMENTUM": 0.1,
  "MARKET_LIQUIDITY": 0.75,
  "MARKET_SPREAD": 0.001,
  "MARKET_DEPTH": 500000,
  "FUNDING_RATE": 0.02,
  "FUNDING_VOLATILITY": 0.01,
  "FUNDING_DEVIATION": 0.5,
  "FUNDING_ANNUALIZED": 5,
  "LIQUIDATION_PROBABILITY": 0.05,
  "SLIPPAGE_RATE": 0.0025,
  "VOLATILITY_RISK": 0.1,
  "EXECUTION_RISK": 0.005,
  "VOLUME_24H": 500000,
  "VOLUME_RATIO": 0.75,
  "VOLUME_EXPANSION": 300000,
  "PRICE_CHANGE": 0.02,
  "PRICE_ACCELERATION": 0.015,
  "PRICE_MOMENTUM": 0.01,
  "TIME_TO_FUNDING": 1800000,
  "SESSION_INTENSITY": 0.6,
  "TEMPORAL_RESONANCE": 0.7,
  "FIBONACCI_STRENGTH": 0.75,
  "FIBONACCI_INDEX": 5,
  "NEURAL_CONFIDENCE": 0.85,
  "NEURAL_COHERENCE": 0.8,
  "NEURAL_ENTANGLEMENT": 0.7,
  "BASE_LEVERAGE": 15,
  "CONSERVATIVE_LEVERAGE": 10,
  "AGGRESSIVE_LEVERAGE": 25,
  "STOP_LOSS": 0.03,
  "TAKE_PROFIT": 0.06,
  "BASE_SCORE": 0.65,
  "CONFIDENCE_SCORE": 0.75,
  "QUALITY_SCORE": 0.8
};

/**
 * [TEST] Test Balance Corrector
 * Script de prueba rápida para verificar el corrector de balance
 * 
 * Verifica que el problema de balance $0.00 esté resuelto
 */

const { launchQBTCBalanceCorrectedSystem } = require('./QBTC_BALANCE_CORRECTED_LAUNCHER');

async function testBalanceCorrector() {
    console.log('[TEST] ═══════════════════════════════════════════════════════════════');
    console.log('[TEST] TEST BALANCE CORRECTOR - VERIFICACIÓN RÁPIDA');
    console.log('[TEST] ═══════════════════════════════════════════════════════════════');
    
    try {
        // Configuración de prueba
        const testConfig = {
            testnet: false,
            enableBalanceCorrector: true,
            reportInterval: 10000, // 10 segundos para prueba rápida
            balanceCheckInterval: 5000, // 5 segundos
            positionCheckInterval: 5000 // 5 segundos
        };
        
        console.log('\n[LIST] Iniciando test del corrector de balance...');
        
        // Lanzar sistema con corrector
        const launcher = await launchQBTCBalanceCorrectedSystem(testConfig);
        
        if (launcher) {
            console.log('\n[OK] Sistema lanzado exitosamente');
            
            // Esperar 30 segundos para ver los reportes
            console.log('\n⏳ Esperando 30 segundos para verificar funcionamiento...');
            
            let countdown = 30;
            const countdownInterval = setInterval(() => {
                process.stdout.write(`\r⏳ Tiempo restante: ${countdown}s `);
                countdown--;
                
                if (countdown < 0) {
                    clearInterval(countdownInterval);
                    console.log('\n');
                }
            }, 1000);
            
            // Esperar 30 segundos
            await new Promise(resolve => setTimeout(resolve, 30000));
            
            // Obtener estado final
            const finalStatus = launcher.getStatus();
            
            console.log('\n[DATA] ═══ RESULTADO DEL TEST ═══');
            console.log(`[RELOAD] Sistema funcionando: ${finalStatus.isRunning ? '[OK]' : '[ERROR]'}`);
            console.log(`[MONEY] Corrector de balance: ${finalStatus.hasBalanceCorrector ? '[OK]' : '[ERROR]'}`);
            console.log(`💵 Último balance: $${finalStatus.lastBalance?.toFixed(2) || '0.00'}`);
            console.log(`[DATA] Últimas posiciones: ${finalStatus.lastPositionCount}`);
            
            // Verificar si se resolvió el problema
            if (finalStatus.lastBalance > 0) {
                console.log('\n🎉 ¡PROBLEMA DE BALANCE $0.00 RESUELTO!');
                console.log(`[MONEY] Balance detectado: $${finalStatus.lastBalance.toFixed(2)}`);
            } else {
                console.log('\n[WARNING] Balance aún muestra $0.00');
                console.log('💡 Puede ser que no haya fondos o que necesite más tiempo');
            }
            
            // Detener sistema
            console.log('\n🛑 Deteniendo sistema de prueba...');
            await launcher.stop();
            
            console.log('\n[OK] Test completado exitosamente');
            
        } else {
            console.error('\n[ERROR] Error: No se pudo lanzar el sistema');
        }
        
    } catch (error) {
        console.error('\n[ERROR] Error durante el test:', error.message);
        console.error(error.stack);
    }
    
    console.log('\n[TEST] ═══════════════════════════════════════════════════════════════');
    console.log('[TEST] TEST BALANCE CORRECTOR COMPLETADO');
    console.log('[TEST] ═══════════════════════════════════════════════════════════════');
}

// Función para test rápido sin espera
async function quickBalanceTest() {
    console.log('[FAST] ═══ TEST RÁPIDO DE BALANCE ═══');
    
    try {
        const QBTCBalanceDataCorrector = require('./QBTC_BALANCE_DATA_CORRECTOR');
        
        // Crear corrector mock para prueba
        const mockConnector = {
            getOptionsAccount: async () => ({
                asset: [{
                    asset: 'USDT',
                    equity: '127.38',
                    available: '0.00'
                }]
            }),
            getFuturesAccountBalance: async () => ([{
                asset: 'USDT',
                crossWalletBalance: '0.00',
                availableBalance: '0.00'
            }]),
            getAccountBalance: async () => null
        };
        
        const corrector = new QBTCBalanceDataCorrector(mockConnector);
        
        console.log('[MONEY] Probando corrector de balance...');
        const balance = await corrector.getCorrectedBalance();
        
        if (balance) {
            console.log('[OK] Corrector funcionando:');
            console.log(`   💵 Total Equity: $${balance.totalEquity?.toFixed(2)}`);
            console.log(`   [DIAMOND] Opciones: $${balance.optionsEquity?.toFixed(2)}`);
            console.log(`   [START] Futuros: $${balance.futuresEquity?.toFixed(2)}`);
            console.log(`   📡 Fuente: ${balance.source}`);
            
            if (balance.totalEquity > 0) {
                console.log('🎉 ¡Balance corregido exitosamente!');
            }
        } else {
            console.log('[ERROR] Error obteniendo balance corregido');
        }
        
    } catch (error) {
        console.error('[ERROR] Error en test rápido:', error.message);
    }
    
    console.log('[FAST] ═══════════════════════════════');
}

// Ejecutar según argumentos
if (require.main === module) {
    const args = process.argv.slice(2);
    
    if (args.includes('--quick')) {
        quickBalanceTest().catch(console.error);
    } else {
        testBalanceCorrector().catch(console.error);
    }
}

module.exports = {
    testBalanceCorrector,
    quickBalanceTest
};