const axios = require('axios');

// Configuraci√≥n
const GEMINI_CONFIG = {
    apiKey: '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',
    model: 'google/gemini-flash-1.5-8b',
    baseUrl: 'https://openrouter.ai/api/v1',
    timeout: 30000
};

async function diagnosticoCompleto() {
    console.log('üîç DIAGN√ìSTICO COMPLETO DEL SISTEMA FALLBACK');
    console.log('='.repeat(60));
    
    // 1. Verificar API de OpenRouter
    console.log('\n1Ô∏è‚É£ VERIFICANDO API DE OPENROUTER...');
    try {
        const response = await axios.post(
            `${GEMINI_CONFIG.baseUrl}/chat/completions`,
            {
                model: GEMINI_CONFIG.model,
                messages: [
                    {
                        role: 'system',
                        content: 'Responde √öNICAMENTE con JSON v√°lido: {"test": "ok"}'
                    },
                    {
                        role: 'user',
                        content: 'Genera un JSON simple de prueba'
                    }
                ],
                temperature: 0.1,
                max_tokens: 50
            },
            {
                headers: {
                    'Authorization': `Bearer ${GEMINI_CONFIG.apiKey}`,
                    'Content-Type': 'application/json',
                    'HTTP-Referer': 'https://qbtc-banda46.com',
                    'X-Title': 'QBTC Neural Orchestrator'
                },
                timeout: 10000
            }
        );
        
        if (response.data && response.data.choices && response.data.choices[0]) {
            console.log('‚úÖ API de OpenRouter: FUNCIONANDO');
            console.log('üìÑ Respuesta:', response.data.choices[0].message.content);
        } else {
            console.log('‚ùå API de OpenRouter: Respuesta inv√°lida');
        }
    } catch (error) {
        console.log('‚ùå API de OpenRouter: ERROR');
        console.log('   Status:', error.response?.status);
        console.log('   Error:', error.message);
    }
    
    // 2. Verificar sistemas neuronales
    console.log('\n2Ô∏è‚É£ VERIFICANDO SISTEMAS NEURONALES...');
    try {
        const neuralTemporalEngine = require('./neural-temporal-engine');
        console.log('‚úÖ neural-temporal-engine.js: CARGADO');
        
        // Verificar clases disponibles
        const classes = [
            'CryptoSessionNeuralNetwork',
            'HalvingNeuralPredictor', 
            'CryptoEasterEggDetector',
            'LunarSeasonalNeuralNetwork'
        ];
        
        classes.forEach(className => {
            if (neuralTemporalEngine[className]) {
                console.log(`‚úÖ ${className}: DISPONIBLE`);
            } else {
                console.log(`‚ùå ${className}: NO DISPONIBLE`);
            }
        });
        
    } catch (error) {
        console.log('‚ùå neural-temporal-engine.js: ERROR');
        console.log('   Error:', error.message);
    }
    
    // 3. Verificar nucleo-psicologico
    console.log('\n3Ô∏è‚É£ VERIFICANDO NUCLEO PSICOL√ìGICO...');
    try {
        const nucleoPsicologico = require('./nucleo-psicologico-tasas-cambio');
        console.log('‚úÖ nucleo-psicologico-tasas-cambio.js: CARGADO');
        
        if (typeof nucleoPsicologico.analizarEstadoPsicologico === 'function') {
            console.log('‚úÖ Funci√≥n analizarEstadoPsicologico: DISPONIBLE');
        } else {
            console.log('‚ùå Funci√≥n analizarEstadoPsicologico: NO DISPONIBLE');
        }
        
    } catch (error) {
        console.log('‚ùå nucleo-psicologico-tasas-cambio.js: ERROR');
        console.log('   Error:', error.message);
    }
    
    // 4. Verificar servidor LLM
    console.log('\n4Ô∏è‚É£ VERIFICANDO SERVIDOR LLM...');
    try {
        const response = await axios.get('http://localhost:4607/health', { timeout: 5000 });
        console.log('‚úÖ Servidor LLM: FUNCIONANDO');
        console.log('   Status:', response.status);
        console.log('   Data:', response.data);
    } catch (error) {
        console.log('‚ùå Servidor LLM: NO RESPONDE');
        console.log('   Error:', error.message);
    }
    
    // 5. Verificar visualizador neuronal
    console.log('\n5Ô∏è‚É£ VERIFICANDO VISUALIZADOR NEURONAL...');
    try {
        const response = await axios.get('http://localhost:4606/api/llm-brain-status', { timeout: 5000 });
        console.log('‚úÖ Visualizador Neuronal: FUNCIONANDO');
        console.log('   Status:', response.status);
        console.log('   LLM Status:', response.data.data?.status);
    } catch (error) {
        console.log('‚ùå Visualizador Neuronal: NO RESPONDE');
        console.log('   Error:', error.message);
    }
    
    // 6. An√°lisis de causas probables
    console.log('\n6Ô∏è‚É£ AN√ÅLISIS DE CAUSAS PROBABLES...');
    console.log('üîç Posibles causas del fallback:');
    console.log('   1. Servidor LLM no iniciado o ca√≠do');
    console.log('   2. Error en la carga de sistemas neuronales');
    console.log('   3. Error en la comunicaci√≥n entre servicios');
    console.log('   4. Timeout en las llamadas a la API');
    console.log('   5. Error en el formato de respuesta del LLM');
    
    console.log('\nüí° RECOMENDACIONES:');
    console.log('   1. Reiniciar el servidor LLM Neural Orchestrator');
    console.log('   2. Verificar que todos los archivos neurales est√©n presentes');
    console.log('   3. Revisar logs del servidor para errores espec√≠ficos');
    console.log('   4. Verificar conectividad de red');
    console.log('   5. Comprobar que la API key de OpenRouter sea v√°lida');
    
    console.log('\n' + '='.repeat(60));
    console.log('üîç DIAGN√ìSTICO COMPLETADO');
}

diagnosticoCompleto().catch(console.error);
