
// Constantes f√≠sicas reales del sistema
const PHYSICAL_CONSTANTS = {
  "QUANTUM_COHERENCE": 0.75,
  "QUANTUM_CONSCIOUSNESS": 0.8,
  "QUANTUM_ENTANGLEMENT": 0.65,
  "QUANTUM_SUPERPOSITION": 0.7,
  "QUANTUM_TUNNELING": 0.6,
  "MARKET_VOLATILITY": 0.05,
  "MARKET_MOMENTUM": 0.1,
  "MARKET_LIQUIDITY": 0.75,
  "MARKET_SPREAD": 0.001,
  "MARKET_DEPTH": 500000,
  "FUNDING_RATE": 0.02,
  "FUNDING_VOLATILITY": 0.01,
  "FUNDING_DEVIATION": 0.5,
  "FUNDING_ANNUALIZED": 5,
  "LIQUIDATION_PROBABILITY": 0.05,
  "SLIPPAGE_RATE": 0.0025,
  "VOLATILITY_RISK": 0.1,
  "EXECUTION_RISK": 0.005,
  "VOLUME_24H": 500000,
  "VOLUME_RATIO": 0.75,
  "VOLUME_EXPANSION": 300000,
  "PRICE_CHANGE": 0.02,
  "PRICE_ACCELERATION": 0.015,
  "PRICE_MOMENTUM": 0.01,
  "TIME_TO_FUNDING": 1800000,
  "SESSION_INTENSITY": 0.6,
  "TEMPORAL_RESONANCE": 0.7,
  "FIBONACCI_STRENGTH": 0.75,
  "FIBONACCI_INDEX": 5,
  "NEURAL_CONFIDENCE": 0.85,
  "NEURAL_COHERENCE": 0.8,
  "NEURAL_ENTANGLEMENT": 0.7,
  "BASE_LEVERAGE": 15,
  "CONSERVATIVE_LEVERAGE": 10,
  "AGGRESSIVE_LEVERAGE": 25,
  "STOP_LOSS": 0.03,
  "TAKE_PROFIT": 0.06,
  "BASE_SCORE": 0.65,
  "CONFIDENCE_SCORE": 0.75,
  "QUALITY_SCORE": 0.8
};

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üåô Opportunity Master System - Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 50%, #16213e 100%);
            color: #ffffff;
            min-height: 100vh;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            backdrop-filter: blur(10px);
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #00d4ff, #ff6b6b);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header p {
            font-size: 1.2em;
            opacity: 0.8;
        }

        .status-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding: 15px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            backdrop-filter: blur(10px);
        }

        .status-item {
            text-align: center;
        }

        .status-label {
            font-size: 0.9em;
            opacity: 0.7;
            margin-bottom: 5px;
        }

        .status-value {
            font-size: 1.1em;
            font-weight: bold;
        }

        .status-online {
            color: #00ff88;
        }

        .status-offline {
            color: #ff4757;
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .card {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .card h3 {
            margin-bottom: 15px;
            color: #00d4ff;
            font-size: 1.3em;
        }

        .opportunity-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            margin-bottom: 10px;
            background: rgba(255, 255, 255, 0.03);
            border-radius: 8px;
            border-left: 4px solid #00d4ff;
        }

        .opportunity-symbol {
            font-weight: bold;
            font-size: 1.1em;
        }

        .opportunity-score {
            color: #00ff88;
            font-weight: bold;
        }

        .opportunity-action {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            font-weight: bold;
        }

        .action-strong-buy {
            background: #00ff88;
            color: #000;
        }

        .action-buy {
            background: #00d4ff;
            color: #000;
        }

        .action-watch {
            background: #ffa500;
            color: #000;
        }

        .action-avoid {
            background: #ff4757;
            color: #fff;
        }

        .quantum-metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }

        .metric-item {
            text-align: center;
            padding: 15px;
            background: rgba(255, 255, 255, 0.03);
            border-radius: 10px;
        }

        .metric-value {
            font-size: 1.5em;
            font-weight: bold;
            color: #00d4ff;
            margin-bottom: 5px;
        }

        .metric-label {
            font-size: 0.9em;
            opacity: 0.7;
        }

        .market-overview {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }

        .market-item {
            text-align: center;
            padding: 15px;
            background: rgba(255, 255, 255, 0.03);
            border-radius: 10px;
        }

        .market-value {
            font-size: 1.3em;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .market-label {
            font-size: 0.9em;
            opacity: 0.7;
        }

        .sentiment-bullish {
            color: #00ff88;
        }

        .sentiment-bearish {
            color: #ff4757;
        }

        .sentiment-neutral {
            color: #ffa500;
        }

        .loading {
            text-align: center;
            padding: 40px;
            font-size: 1.2em;
            opacity: 0.7;
        }

        .error {
            color: #ff4757;
            text-align: center;
            padding: 20px;
        }

        .refresh-btn {
            background: linear-gradient(45deg, #00d4ff, #ff6b6b);
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            transition: transform 0.2s;
        }

        .refresh-btn:hover {
            transform: scale(1.05);
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .pulse {
            animation: pulse 2s infinite;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üåô Opportunity Master System</h1>
            <p>Arquitectura SPOT (An√°lisis) ‚Üí OPTIONS (Intel) ‚Üí FUTURES (Operaci√≥n)</p>
        </div>

        <div class="status-bar">
            <div class="status-item">
                <div class="status-label">Opportunity Master</div>
                <div class="status-value" id="master-status">Verificando...</div>
            </div>
            <div class="status-item">
                <div class="status-label">Frontend</div>
                <div class="status-value" id="frontend-status">Verificando...</div>
            </div>
            <div class="status-item">
                <div class="status-label">√öltima Actualizaci√≥n</div>
                <div class="status-value" id="last-update">--</div>
            </div>
            <button class="refresh-btn" onclick="refreshData()">üîÑ Actualizar</button>
        </div>

        <div class="grid">
            <div class="card">
                <h3>üèÜ Top Oportunidades</h3>
                <div id="opportunities-list">
                    <div class="loading">Cargando oportunidades...</div>
                </div>
            </div>

            <div class="card">
                <h3>üåô M√©tricas Cu√°nticas</h3>
                <div class="quantum-metrics" id="quantum-metrics">
                    <div class="loading">Cargando m√©tricas...</div>
                </div>
            </div>

            <div class="card">
                <h3>üìä Estado del Mercado</h3>
                <div class="market-overview" id="market-overview">
                    <div class="loading">Cargando estado del mercado...</div>
                </div>
            </div>

            <div class="card">
                <h3>‚ö° Ejecutar Ahora</h3>
                <div id="execute-now">
                    <div class="loading">Cargando operaciones inmediatas...</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const API_BASE_URL = 'http://localhost:4603';
        let lastUpdate = null;

        async function checkStatus() {
            try {
                const [masterRes, frontendRes] = await Promise.all([
                    fetch(`${API_BASE_URL.replace('4603', '4601')}/health`),
                    fetch(`${API_BASE_URL}/api/status`)
                ]);

                const masterStatus = document.getElementById('master-status');
                const frontendStatus = document.getElementById('frontend-status');

                if (masterRes.ok) {
                    masterStatus.textContent = 'üü¢ ONLINE';
                    masterStatus.className = 'status-value status-online';
                } else {
                    masterStatus.textContent = 'üî¥ OFFLINE';
                    masterStatus.className = 'status-value status-offline';
                }

                if (frontendRes.ok) {
                    frontendStatus.textContent = 'üü¢ ONLINE';
                    frontendStatus.className = 'status-value status-online';
                } else {
                    frontendStatus.textContent = 'üî¥ OFFLINE';
                    frontendStatus.className = 'status-value status-offline';
                }
            } catch (error) {
                console.error('Error checking status:', error);
            }
        }

        async function loadOpportunities() {
            try {
                const response = await fetch(`${API_BASE_URL}/api/opportunities`);
                const data = await response.json();

                if (data.success && data.data) {
                    const opportunitiesList = document.getElementById('opportunities-list');
                    opportunitiesList.innerHTML = '';

                    const opportunities = data.data || [];
                    
                    opportunities.forEach(opportunity => {
                        const item = document.createElement('div');
                        item.className = 'opportunity-item';
                        item.innerHTML = `
                            <div>
                                <div class="opportunity-symbol">${opportunity.symbol}</div>
                                <div style="font-size: 0.8em; opacity: 0.7;">Leverage: ${opportunity.leverage}x | Stop: ${(opportunity.stopLoss * 100).toFixed(1)}%</div>
                            </div>
                            <div style="text-align: right;">
                                <div class="opportunity-score">${(opportunity.score * 100).toFixed(0)}%</div>
                                <div class="opportunity-action action-buy">BUY</div>
                            </div>
                        `;
                        opportunitiesList.appendChild(item);
                    });
                }
            } catch (error) {
                console.error('Error loading opportunities:', error);
                document.getElementById('opportunities-list').innerHTML = '<div class="error">Error cargando oportunidades</div>';
            }
        }

        async function loadQuantumMetrics() {
            try {
                const response = await fetch(`${API_BASE_URL}/api/quantum-metrics`);
                const data = await response.json();

                if (data.success && data.data) {
                    const quantumMetrics = document.getElementById('quantum-metrics');
                    quantumMetrics.innerHTML = '';

                    const metrics = [
                        { key: 'coherence', label: 'Coherence' },
                        { key: 'consciousness', label: 'Consciousness' },
                        { key: 'entanglement', label: 'Entanglement' },
                        { key: 'superposition', label: 'Superposition' },
                        { key: 'tunneling', label: 'Tunneling' },
                        { key: 'optimalLeverage', label: 'Optimal Leverage' }
                    ];

                    metrics.forEach(metric => {
                        const value = data.data[metric.key] || 0;
                        const item = document.createElement('div');
                        item.className = 'metric-item';
                        item.innerHTML = `
                            <div class="metric-value">${(value * 100).toFixed(1)}%</div>
                            <div class="metric-label">${metric.label}</div>
                        `;
                        quantumMetrics.appendChild(item);
                    });
                }
            } catch (error) {
                console.error('Error loading quantum metrics:', error);
                document.getElementById('quantum-metrics').innerHTML = '<div class="error">Error cargando m√©tricas cu√°nticas</div>';
            }
        }

        async function loadMarketOverview() {
            try {
                const response = await fetch(`${API_BASE_URL}/api/market-health`);
                const data = await response.json();

                if (data.success && data.data) {
                    const marketOverview = document.getElementById('market-overview');
                    marketOverview.innerHTML = '';

                    const marketData = [
                        { key: 'volatility', label: 'Volatilidad', value: `${(data.data.volatility * 100).toFixed(1)}%` },
                        { key: 'liquidity', label: 'Liquidez', value: `${(data.data.liquidity * 100).toFixed(0)}%` },
                        { key: 'sentiment', label: 'Sentimiento', value: `${(data.data.sentiment * 100).toFixed(0)}%` },
                        { key: 'executionQueue', label: 'Cola Ejecuci√≥n', value: data.data.executionQueue }
                    ];

                    marketData.forEach(item => {
                        const marketItem = document.createElement('div');
                        marketItem.className = 'market-item';
                        
                        let valueClass = '';
                        if (item.key === 'overall') {
                            valueClass = item.value === 'HEALTHY' ? 'sentiment-bullish' : 'sentiment-bearish';
                        }

                        marketItem.innerHTML = `
                            <div class="market-value ${valueClass}">${item.value}</div>
                            <div class="market-label">${item.label}</div>
                        `;
                        marketOverview.appendChild(marketItem);
                    });
                }
            } catch (error) {
                console.error('Error loading market overview:', error);
                document.getElementById('market-overview').innerHTML = '<div class="error">Error cargando estado del mercado</div>';
            }
        }

        async function loadExecuteNow() {
            try {
                const response = await fetch(`${API_BASE_URL}/api/execute-now`);
                const data = await response.json();

                if (data.success && data.data) {
                    const executeNow = document.getElementById('execute-now');
                    executeNow.innerHTML = '';

                    const opportunities = data.data.topOpportunities || [];
                    
                    if (opportunities.length === 0) {
                        executeNow.innerHTML = '<div style="text-align: center; opacity: 0.7;">No hay operaciones inmediatas</div>';
                        return;
                    }

                    opportunities.forEach(operation => {
                        const item = document.createElement('div');
                        item.className = 'opportunity-item';
                        item.innerHTML = `
                            <div>
                                <div class="opportunity-symbol">${operation.symbol}</div>
                                <div style="font-size: 0.8em; opacity: 0.7;">Leverage: ${operation.leverage}x | Stop: ${(operation.stopLoss * 100).toFixed(1)}%</div>
                            </div>
                            <div style="text-align: right;">
                                <div class="opportunity-action action-buy">BUY</div>
                                <div style="font-size: 0.8em; opacity: 0.7;">Score: ${(operation.score * 100).toFixed(0)}%</div>
                            </div>
                        `;
                        executeNow.appendChild(item);
                    });
                }
            } catch (error) {
                console.error('Error loading execute now:', error);
                document.getElementById('execute-now').innerHTML = '<div class="error">Error cargando operaciones</div>';
            }
        }

        async function refreshData() {
            const refreshBtn = document.querySelector('.refresh-btn');
            refreshBtn.textContent = '‚è≥ Actualizando...';
            refreshBtn.disabled = true;

            try {
                await Promise.all([
                    loadOpportunities(),
                    loadQuantumMetrics(),
                    loadMarketOverview(),
                    loadExecuteNow()
                ]);

                lastUpdate = new Date();
                document.getElementById('last-update').textContent = lastUpdate.toLocaleTimeString();
            } catch (error) {
                console.error('Error refreshing data:', error);
            } finally {
                refreshBtn.textContent = 'üîÑ Actualizar';
                refreshBtn.disabled = false;
            }
        }

        // Inicializaci√≥n
        async function init() {
            await checkStatus();
            await refreshData();
            
            // Actualizar cada 30 segundos
            setInterval(async () => {
                await checkStatus();
                await refreshData();
            }, 30000);
        }

        // Iniciar cuando se carga la p√°gina
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>
