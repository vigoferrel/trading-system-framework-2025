const axios = require('axios');

async function testQuantumRecommendations() {
    try {
        console.log('üß† Testing Enhanced Quantum Recommendations...');
        
        const response = await axios.get('http://localhost:4602/api/quantum-recommendations');
        const data = response.data;
        
        console.log('‚úÖ Enhanced Quantum Recommendations Response Received');
        console.log(`üìä Total Recommendations: ${data.length}`);
        
        if (data.length > 0) {
            console.log('\nüîç Sample Enhanced Recommendations:');
            
            const sampleRecommendations = data.slice(0, 3);
            
            sampleRecommendations.forEach((rec, index) => {
                console.log(`\nüìà Recommendation ${index + 1}:`);
                console.log(`  - Symbol: ${rec.symbol}`);
                console.log(`  - Action: ${rec.action}`);
                console.log(`  - Confidence: ${rec.confidence}`);
                console.log(`  - Risk Level: ${rec.riskLevel}`);
                console.log(`  - Entry Price: $${rec.entryPrice}`);
                console.log(`  - Stop Loss: $${rec.stopLoss}`);
                console.log(`  - Take Profit: $${rec.takeProfit}`);
                console.log(`  - Leverage: ${rec.leverage}`);
                console.log(`  - Reasoning: ${rec.reasoning}`);
                
                if (rec.marketData) {
                    console.log(`  - Market Data:`);
                    console.log(`    * Price: $${rec.marketData.price}`);
                    console.log(`    * Volume: ${rec.marketData.volume}`);
                    console.log(`    * Volatility: ${rec.marketData.volatility}`);
                }
                
                if (rec.quantumMetrics) {
                    console.log(`  - Quantum Metrics:`);
                    console.log(`    * Quantum Score: ${rec.quantumMetrics.quantumScore}`);
                    console.log(`    * Quantum Area: ${rec.quantumMetrics.quantumArea}`);
                    console.log(`    * Quantum Volume: ${rec.quantumMetrics.quantumVolume}`);
                    console.log(`    * Spin State: ${rec.quantumMetrics.spinState}`);
                }
            });
            
            // Verificar que no hay valores NaN
            let nanCount = 0;
            data.forEach(rec => {
                const hasNaN = isNaN(rec.entryPrice) || isNaN(rec.stopLoss) || isNaN(rec.takeProfit) || 
                              isNaN(rec.confidence) || isNaN(rec.leverage);
                if (hasNaN) nanCount++;
            });
            
            console.log(`\nüìà NaN Values Found: ${nanCount}/${data.length} recommendations`);
            
            if (nanCount === 0) {
                console.log('üéâ SUCCESS: All enhanced recommendations are valid!');
            } else {
                console.log('‚ö†Ô∏è  WARNING: Some NaN values present in recommendations');
            }
            
            // Verificar estructura de datos
            const requiredFields = ['symbol', 'action', 'confidence', 'reasoning', 'riskLevel', 
                                  'entryPrice', 'stopLoss', 'takeProfit', 'leverage'];
            
            let missingFields = 0;
            data.forEach(rec => {
                requiredFields.forEach(field => {
                    if (!(field in rec)) missingFields++;
                });
            });
            
            console.log(`üìä Missing Fields: ${missingFields} total missing fields`);
            
            if (missingFields === 0) {
                console.log('‚úÖ SUCCESS: All required fields present in recommendations');
            } else {
                console.log('‚ö†Ô∏è  WARNING: Some required fields missing');
            }
            
        } else {
            console.log('‚ö†Ô∏è  No recommendations found - this might indicate filtering issues');
        }
        
    } catch (error) {
        console.error('‚ùå Error testing quantum recommendations:', error.message);
        if (error.response) {
            console.error('Response status:', error.response.status);
            console.error('Response data:', error.response.data);
        }
    }
}

testQuantumRecommendations();
