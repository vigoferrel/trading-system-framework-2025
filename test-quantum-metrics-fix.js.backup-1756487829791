const axios = require('axios');

async function testQuantumMetricsFix() {
    try {
        console.log('üîç Probando correcci√≥n de m√©tricas cu√°nticas...\n');
        
        // Test quantum analysis endpoint
        const response = await axios.get('http://localhost:4602/api/quantum-analysis');
        
        if (response.data.success) {
            console.log('‚úÖ Endpoint de an√°lisis cu√°ntico funcionando');
            
            const quantumMetrics = response.data.quantumMetrics;
            console.log(`üìä Total de s√≠mbolos analizados: ${Object.keys(quantumMetrics).length}\n`);
            
            // Check for N/A values and placeholder values
            let naCount = 0;
            let placeholderCount = 0;
            let validCount = 0;
            
            Object.entries(quantumMetrics).forEach(([symbol, metrics]) => {
                const spinValue = metrics.spinState?.spin_j;
                const areaValue = metrics.quantumArea;
                const volumeValue = metrics.quantumVolume;
                
                // Check for N/A values
                if (spinValue === 'N/A' || spinValue === null || spinValue === undefined) {
                    naCount++;
                    console.log(`‚ùå ${symbol}: Spin Financiero = N/A`);
                }
                
                // Check for placeholder values (0.10, 0.00, etc.)
                if (areaValue === 0.10 || areaValue === 0.00 || areaValue < 0.1) {
                    placeholderCount++;
                    console.log(`‚ö†Ô∏è  ${symbol}: √Årea Cu√°ntica = ${areaValue} (placeholder)`);
                }
                
                // Check for valid values
                if (spinValue && spinValue !== 'N/A' && areaValue > 0.1 && volumeValue > 1000) {
                    validCount++;
                    if (validCount <= 10) { // Show first 10 valid entries
                        console.log(`‚úÖ ${symbol}: Spin=${spinValue.toFixed(2)}, √Årea=${areaValue.toFixed(2)}, Vol=${volumeValue.toFixed(0)}`);
                    }
                }
            });
            
            console.log(`\nüìà RESUMEN:`);
            console.log(`   ‚úÖ Valores v√°lidos: ${validCount}`);
            console.log(`   ‚ùå Valores N/A: ${naCount}`);
            console.log(`   ‚ö†Ô∏è  Valores placeholder: ${placeholderCount}`);
            
            if (naCount === 0 && placeholderCount === 0) {
                console.log('\nüéâ ¬°CORRECCI√ìN EXITOSA! No se encontraron valores N/A ni placeholders');
            } else {
                console.log('\n‚ö†Ô∏è  A√∫n hay valores problem√°ticos que necesitan correcci√≥n');
            }
            
        } else {
            console.log('‚ùå Error en el endpoint de an√°lisis cu√°ntico');
        }
        
    } catch (error) {
        console.error('‚ùå Error en la prueba:', error.message);
    }
}

testQuantumMetricsFix();
