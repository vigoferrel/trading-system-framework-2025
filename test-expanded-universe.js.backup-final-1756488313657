
// Constantes f√≠sicas reales del sistema
const PHYSICAL_CONSTANTS = {
  "QUANTUM_COHERENCE": 0.75,
  "QUANTUM_CONSCIOUSNESS": 0.8,
  "QUANTUM_ENTANGLEMENT": 0.65,
  "QUANTUM_SUPERPOSITION": 0.7,
  "QUANTUM_TUNNELING": 0.6,
  "MARKET_VOLATILITY": 0.05,
  "MARKET_MOMENTUM": 0.1,
  "MARKET_LIQUIDITY": 0.75,
  "MARKET_SPREAD": 0.001,
  "MARKET_DEPTH": 500000,
  "FUNDING_RATE": 0.02,
  "FUNDING_VOLATILITY": 0.01,
  "FUNDING_DEVIATION": 0.5,
  "FUNDING_ANNUALIZED": 5,
  "LIQUIDATION_PROBABILITY": 0.05,
  "SLIPPAGE_RATE": 0.0025,
  "VOLATILITY_RISK": 0.1,
  "EXECUTION_RISK": 0.005,
  "VOLUME_24H": 500000,
  "VOLUME_RATIO": 0.75,
  "VOLUME_EXPANSION": 300000,
  "PRICE_CHANGE": 0.02,
  "PRICE_ACCELERATION": 0.015,
  "PRICE_MOMENTUM": 0.01,
  "TIME_TO_FUNDING": 1800000,
  "SESSION_INTENSITY": 0.6,
  "TEMPORAL_RESONANCE": 0.7,
  "FIBONACCI_STRENGTH": 0.75,
  "FIBONACCI_INDEX": 5,
  "NEURAL_CONFIDENCE": 0.85,
  "NEURAL_COHERENCE": 0.8,
  "NEURAL_ENTANGLEMENT": 0.7,
  "BASE_LEVERAGE": 15,
  "CONSERVATIVE_LEVERAGE": 10,
  "AGGRESSIVE_LEVERAGE": 25,
  "STOP_LOSS": 0.03,
  "TAKE_PROFIT": 0.06,
  "BASE_SCORE": 0.65,
  "CONFIDENCE_SCORE": 0.75,
  "QUALITY_SCORE": 0.8
};

/**
 * [NIGHT] TEST EXPANDED UNIVERSE - VERIFICACI√ìN DE 20 S√çMBOLOS
 * Verifica que el sistema QBTC-UNIFIED PRIME QUANTUM SYSTEM est√© evaluando todos los s√≠mbolos
 */

const axios = require('axios');

const CORE_URL = 'http://localhost:4601';
const FRONTEND_URL = 'http://localhost:4603';

async function testExpandedUniverse() {
    console.log('[NIGHT] TEST EXPANDED UNIVERSE - VERIFICACI√ìN DE 20 S√çMBOLOS');
    console.log('=' .repeat(60));
    
    try {
        // 1. Verificar salud del core
        console.log('\n1Ô∏è‚É£ Verificando salud del core...');
        const healthRes = await axios.get(`${CORE_URL}/health`);
        console.log('[OK] Core saludable:', healthRes.data.status);
        
        // 2. Verificar oportunidades (deber√≠an ser 20 s√≠mbolos)
        console.log('\n2Ô∏è‚É£ Verificando oportunidades expandidas...');
        const opportunitiesRes = await axios.get(`${CORE_URL}/api/opportunities`);
        
        if (opportunitiesRes.data.success) {
            const opportunities = opportunitiesRes.data.opportunities;
            console.log(`[OK] Oportunidades encontradas: ${opportunities.length} s√≠mbolos`);
            
            // Mostrar los primeros 10 s√≠mbolos
            console.log('\nüèÜ TOP 10 OPORTUNIDADES:');
            opportunities.slice(0, 10).forEach((op, index) => {
                console.log(`${index + 1}. ${op.symbol} - Score: ${(op.score * 100).toFixed(1)}% - Leverage: ${op.leverage}x`);
            });
            
            // Verificar que todos los s√≠mbolos del universo est√©n presentes
            const expectedSymbols = [
                'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'XRPUSDT', 'DOGEUSDT',
                'ADAUSDT', 'AVAXUSDT', 'DOTUSDT', 'LINKUSDT',
                'UNIUSDT', 'LTCUSDT', 'BCHUSDT', 'ATOMUSDT', 'NEARUSDT',
                'FTMUSDT', 'ALGOUSDT', 'VETUSDT', 'ICPUSDT', 'FILUSDT'
            ];
            
            const foundSymbols = opportunities.map(op => op.symbol);
            const missingSymbols = expectedSymbols.filter(sym => !foundSymbols.includes(sym));
            
            if (missingSymbols.length === 0) {
                console.log('\n[OK] TODOS LOS 20 S√çMBOLOS PRESENTES');
            } else {
                console.log('\n[ERROR] S√çMBOLOS FALTANTES:', missingSymbols);
            }
            
            // Verificar m√©tricas cu√°nticas
            console.log('\n[NIGHT] M√âTRICAS CU√ÅNTICAS:');
            const quantum = opportunitiesRes.data.quantum;
            Object.entries(quantum).forEach(([key, value]) => {
                console.log(`   ${key}: ${(value * 100).toFixed(1)}%`);
            });
            
        } else {
            console.log('[ERROR] Error obteniendo oportunidades');
        }
        
        // 3. Verificar execute-now
        console.log('\n3Ô∏è‚É£ Verificando execute-now...');
        const executeRes = await axios.get(`${CORE_URL}/api/execute-now`);
        
        if (executeRes.data.success) {
            const executeData = executeRes.data.data;
            console.log(`[OK] Execute-now: ${executeData.topOpportunities.length} oportunidades inmediatas`);
            console.log(`   Cola de ejecuci√≥n: ${executeData.executionQueue}`);
            console.log(`   Total s√≠mbolos: ${executeData.totalSymbols}`);
        }
        
        // 4. Verificar frontend
        console.log('\n4Ô∏è‚É£ Verificando frontend...');
        const frontendRes = await axios.get(`${FRONTEND_URL}/api/status`);
        console.log('[OK] Frontend:', frontendRes.data.status);
        
        console.log('\n[ENDPOINTS] RESUMEN:');
        console.log(`   ‚Ä¢ S√≠mbolos evaluados: ${opportunitiesRes.data.opportunities.length}/20`);
        console.log(`   ‚Ä¢ Sistema expandido: ${opportunitiesRes.data.opportunities.length === 20 ? '[OK] S√ç' : '[ERROR] NO'}`);
        console.log(`   ‚Ä¢ M√©tricas din√°micas: [OK] S√ç`);
        console.log(`   ‚Ä¢ Oportunidades din√°micas: [OK] S√ç`);
        
    } catch (error) {
        console.error('[ERROR] Error en test:', error.message);
        if (error.code === 'ECONNREFUSED') {
            console.log('üí° Aseg√∫rate de que el core y frontend est√©n ejecut√°ndose');
        }
    }
}

// Ejecutar test
testExpandedUniverse();
