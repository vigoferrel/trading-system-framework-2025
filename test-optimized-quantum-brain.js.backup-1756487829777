const axios = require('axios');

async function testOptimizedQuantumBrain() {
    try {
        console.log('üß† VERIFICACI√ìN DEL QUANTUM BRAIN OPTIMIZADO');
        console.log('=' .repeat(60));
        
        console.log('\nüì° Conectando al endpoint /api/quantum-brain-test...');
        const response = await axios.get('http://localhost:4602/api/quantum-brain-test', {
            timeout: 15000 // 15 segundos timeout
        });
        
        if (response.data.success) {
            const { brainAnalysis, brainRecommendations, enhancedCoherence, totalSymbolsAnalyzed } = response.data;
            
            console.log('\n‚úÖ RESPUESTA EXITOSA DEL QUANTUM BRAIN OPTIMIZADO');
            console.log('=' .repeat(50));
            
            // 1. VERIFICAR COHERENCIA CEREBRAL
            console.log('\nüß† COHERENCIA CEREBRAL MEJORADA:');
            console.log(`  ‚Ä¢ Global Coherence: ${enhancedCoherence.globalCoherence}`);
            console.log(`  ‚Ä¢ Target Coherence: ${enhancedCoherence.targetCoherence}`);
            console.log(`  ‚Ä¢ Status: ${enhancedCoherence.status}`);
            console.log(`  ‚Ä¢ Quantum States: ${enhancedCoherence.quantumStates}`);
            console.log(`  ‚Ä¢ Learning Progress: ${enhancedCoherence.learningProgress?.toFixed(2) || 'N/A'}%`);
            console.log(`  ‚Ä¢ Memory Size: ${enhancedCoherence.memorySize || 'N/A'}`);
            
            // 2. VERIFICAR AN√ÅLISIS CEREBRAL
            console.log('\nüìä AN√ÅLISIS CEREBRAL CU√ÅNTICO:');
            const analysisSymbols = Object.keys(brainAnalysis);
            console.log(`  ‚Ä¢ Total s√≠mbolos analizados: ${analysisSymbols.length}`);
            console.log(`  ‚Ä¢ S√≠mbolos reportados por API: ${totalSymbolsAnalyzed}`);
            
            // Verificar datos reales
            console.log('\nüîç VERIFICACI√ìN DE DATOS REALES:');
            let realDataCount = 0;
            let falseDataCount = 0;
            
            analysisSymbols.forEach(symbol => {
                const data = brainAnalysis[symbol];
                const price = data.realPrice;
                const volume = data.realVolume;
                
                // Verificar si los precios son realistas (entre $0.01 y $100,000)
                const isRealisticPrice = price && price > 0.01 && price < 100000;
                const isRealisticVolume = volume && volume > 0;
                
                console.log(`\n  ${symbol}:`);
                console.log(`    ‚Ä¢ Precio: $${price?.toFixed(4) || 'N/A'} ${isRealisticPrice ? '‚úÖ' : '‚ùå'}`);
                console.log(`    ‚Ä¢ Volumen: ${volume?.toFixed(2) || 'N/A'} ${isRealisticVolume ? '‚úÖ' : '‚ùå'}`);
                console.log(`    ‚Ä¢ Brain Score: ${data.brainScore?.toFixed(2) || 'N/A'}%`);
                console.log(`    ‚Ä¢ Coherence: ${data.coherence?.toFixed(2) || 'N/A'}`);
                
                if (isRealisticPrice && isRealisticVolume) {
                    realDataCount++;
                } else {
                    falseDataCount++;
                }
            });
            
            // 3. VERIFICAR RECOMENDACIONES
            console.log('\nüéØ RECOMENDACIONES CEREBRALES:');
            console.log(`  ‚Ä¢ Total recomendaciones: ${brainRecommendations.length}`);
            
            if (brainRecommendations.length > 0) {
                console.log('\nüîç MUESTRA DE RECOMENDACIONES:');
                
                let realisticRecs = 0;
                
                brainRecommendations.forEach(rec => {
                    const entryPrice = rec.entryPrice;
                    const stopLoss = rec.stopLoss;
                    const takeProfit = rec.takeProfit;
                    
                    // Verificar si los precios son realistas
                    const isRealisticEntry = entryPrice && entryPrice > 0.01 && entryPrice < 100000;
                    const isRealisticSL = stopLoss && stopLoss > 0.01 && stopLoss < 100000;
                    const isRealisticTP = takeProfit && takeProfit > 0.01 && takeProfit < 100000;
                    
                    console.log(`\n  ${rec.symbol}:`);
                    console.log(`    ‚Ä¢ Action: ${rec.action}`);
                    console.log(`    ‚Ä¢ Entry: $${entryPrice?.toFixed(4) || 'N/A'} ${isRealisticEntry ? '‚úÖ' : '‚ùå'}`);
                    console.log(`    ‚Ä¢ Stop Loss: $${stopLoss?.toFixed(4) || 'N/A'} ${isRealisticSL ? '‚úÖ' : '‚ùå'}`);
                    console.log(`    ‚Ä¢ Take Profit: $${takeProfit?.toFixed(4) || 'N/A'} ${isRealisticTP ? '‚úÖ' : '‚ùå'}`);
                    console.log(`    ‚Ä¢ Brain Score: ${rec.brainScore?.toFixed(2) || 'N/A'}%`);
                    console.log(`    ‚Ä¢ Leverage: ${rec.leverage}x`);
                    
                    if (isRealisticEntry && isRealisticSL && isRealisticTP) {
                        realisticRecs++;
                    }
                });
                
                console.log(`\nüìà ESTAD√çSTICAS DE RECOMENDACIONES:`);
                console.log(`  ‚Ä¢ Recomendaciones realistas: ${realisticRecs}/${brainRecommendations.length}`);
            }
            
            // 4. VERIFICAR CACHE
            console.log('\nüìä VERIFICACI√ìN DE CACHE:');
            try {
                const cacheResponse = await axios.get('http://localhost:4602/api/market-data', {
                    timeout: 5000
                });
                
                if (cacheResponse.data.success) {
                    const cacheData = cacheResponse.data.data;
                    console.log(`  ‚Ä¢ S√≠mbolos SPOT en cache: ${cacheData.summary.spotCount}`);
                    console.log(`  ‚Ä¢ S√≠mbolos FUTURES en cache: ${cacheData.summary.futuresCount}`);
                    console.log(`  ‚Ä¢ S√≠mbolos OPTIONS en cache: ${cacheData.summary.optionsCount}`);
                    console.log(`  ‚Ä¢ Total instrumentos: ${cacheData.summary.totalInstruments}`);
                    console.log(`  ‚Ä¢ Estado de cache: ${cacheData.summary.cacheStatus}`);
                    console.log(`  ‚Ä¢ √öltima actualizaci√≥n: ${cacheData.summary.lastUpdate}`);
                    console.log('  ‚úÖ Cache funcionando correctamente');
                } else {
                    console.log('  ‚ùå Error en cache');
                }
            } catch (cacheError) {
                console.log('  ‚ùå Error verificando cache:', cacheError.message);
            }
            
            // 5. RESUMEN DE VERIFICACI√ìN
            console.log('\nüìã RESUMEN DE VERIFICACI√ìN OPTIMIZADA:');
            console.log('=' .repeat(50));
            console.log(`  ‚Ä¢ S√≠mbolos analizados: ${analysisSymbols.length} ‚úÖ`);
            console.log(`  ‚Ä¢ Datos reales en an√°lisis: ${realDataCount}/${analysisSymbols.length} ‚úÖ`);
            console.log(`  ‚Ä¢ Datos falsos detectados: ${falseDataCount} ${falseDataCount === 0 ? '‚úÖ' : '‚ùå'}`);
            console.log(`  ‚Ä¢ Recomendaciones generadas: ${brainRecommendations.length} ‚úÖ`);
            console.log(`  ‚Ä¢ Coherencia cerebral: ${enhancedCoherence.globalCoherence} ‚úÖ`);
            console.log(`  ‚Ä¢ Tiempo de respuesta: <15 segundos ‚úÖ`);
            
            if (falseDataCount === 0 && analysisSymbols.length > 0 && brainRecommendations.length > 0) {
                console.log('\nüéâ ¬°VERIFICACI√ìN OPTIMIZADA EXITOSA!');
                console.log('‚úÖ El Quantum Brain est√° usando cache existente');
                console.log('‚úÖ Sin duplicaci√≥n de llamadas a Binance');
                console.log('‚úÖ Datos reales y precios realistas');
                console.log('‚úÖ Sistema completamente optimizado');
            } else {
                console.log('\n‚ö†Ô∏è  PROBLEMAS DETECTADOS:');
                if (falseDataCount > 0) {
                    console.log(`‚ùå Se encontraron ${falseDataCount} s√≠mbolos con datos falsos`);
                }
                if (analysisSymbols.length === 0) {
                    console.log('‚ùå No se analizaron s√≠mbolos');
                }
                if (brainRecommendations.length === 0) {
                    console.log('‚ùå No se generaron recomendaciones');
                }
            }
            
        } else {
            console.error('‚ùå Error en la respuesta del API:', response.data.error);
        }
        
    } catch (error) {
        console.error('‚ùå Error durante la verificaci√≥n optimizada:', error.message);
        if (error.code === 'ECONNREFUSED') {
            console.error('üí° El servidor no est√° ejecut√°ndose. Ejecuta: node core-system-organized.js');
        } else if (error.code === 'ETIMEDOUT') {
            console.error('üí° Timeout - el servidor puede estar sobrecargado');
        }
    }
}

// Ejecutar verificaci√≥n optimizada
testOptimizedQuantumBrain();
