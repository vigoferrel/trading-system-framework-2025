
// Constantes f√≠sicas reales del sistema
const PHYSICAL_CONSTANTS = {
  "QUANTUM_COHERENCE": 0.75,
  "QUANTUM_CONSCIOUSNESS": 0.8,
  "QUANTUM_ENTANGLEMENT": 0.65,
  "QUANTUM_SUPERPOSITION": 0.7,
  "QUANTUM_TUNNELING": 0.6,
  "MARKET_VOLATILITY": 0.05,
  "MARKET_MOMENTUM": 0.1,
  "MARKET_LIQUIDITY": 0.75,
  "MARKET_SPREAD": 0.001,
  "MARKET_DEPTH": 500000,
  "FUNDING_RATE": 0.02,
  "FUNDING_VOLATILITY": 0.01,
  "FUNDING_DEVIATION": 0.5,
  "FUNDING_ANNUALIZED": 5,
  "LIQUIDATION_PROBABILITY": 0.05,
  "SLIPPAGE_RATE": 0.0025,
  "VOLATILITY_RISK": 0.1,
  "EXECUTION_RISK": 0.005,
  "VOLUME_24H": 500000,
  "VOLUME_RATIO": 0.75,
  "VOLUME_EXPANSION": 300000,
  "PRICE_CHANGE": 0.02,
  "PRICE_ACCELERATION": 0.015,
  "PRICE_MOMENTUM": 0.01,
  "TIME_TO_FUNDING": 1800000,
  "SESSION_INTENSITY": 0.6,
  "TEMPORAL_RESONANCE": 0.7,
  "FIBONACCI_STRENGTH": 0.75,
  "FIBONACCI_INDEX": 5,
  "NEURAL_CONFIDENCE": 0.85,
  "NEURAL_COHERENCE": 0.8,
  "NEURAL_ENTANGLEMENT": 0.7,
  "BASE_LEVERAGE": 15,
  "CONSERVATIVE_LEVERAGE": 10,
  "AGGRESSIVE_LEVERAGE": 25,
  "STOP_LOSS": 0.03,
  "TAKE_PROFIT": 0.06,
  "BASE_SCORE": 0.65,
  "CONFIDENCE_SCORE": 0.75,
  "QUALITY_SCORE": 0.8
};

/**
 * üß† TEST NEURAL QUANTUM - Verificar m√©tricas cu√°nticas mejoradas
 */

const axios = require('axios');

const OPPORTUNITY_MASTER_URL = 'http://localhost:4601';
const FRONTEND_URL = 'http://localhost:4603';

async function testNeuralQuantumMetrics() {
    console.log('üß† [NEURAL TEST] Verificando m√©tricas cu√°nticas mejoradas...\n');
    
    try {
        // Test 1: Health Check
        console.log('üîç Test 1: Health Check del Opportunity Master');
        const healthResponse = await axios.get(`${OPPORTUNITY_MASTER_URL}/health`, { timeout: 5000 });
        console.log(`‚úÖ Health Check: ${healthResponse.data.status}`);
        console.log(`üìä Arquitectura: ${healthResponse.data.architecture}\n`);

        // Test 2: Neural Context
        console.log('üß† Test 2: Contexto Neural');
        const neuralResponse = await axios.get(`${OPPORTUNITY_MASTER_URL}/api/neural-context`, { timeout: 10000 });
        
        if (neuralResponse.data.success) {
            const neuralData = neuralResponse.data.data;
            console.log(`‚úÖ Sesi√≥n activa: ${neuralData.session.primary}`);
            console.log(`üìä Intensidad de sesi√≥n: ${(neuralData.session.intensity * 100).toFixed(1)}%`);
            console.log(`üîó Overlaps detectados: ${neuralData.session.overlaps.length}`);
            console.log(`üíß Factor de liquidez: ${(neuralData.session.liquidity_factor * 100).toFixed(1)}%`);
            console.log(`üìà Expectativa de volatilidad: ${(neuralData.session.volatility_expectation * 100).toFixed(1)}%`);
            console.log(`üéØ Estrategias √≥ptimas: ${neuralData.session.optimal_strategies.join(', ')}`);
            console.log(`üïê Hora UTC actual: ${neuralData.current_time.hour}:00`);
        } else {
            console.log('‚ùå Error obteniendo contexto neural');
        }
        console.log('');

        // Test 3: Oportunidades con m√©tricas cu√°nticas mejoradas
        console.log('üåô Test 3: M√©tricas Cu√°nticas Mejoradas');
        const opportunitiesResponse = await axios.get(`${OPPORTUNITY_MASTER_URL}/api/opportunities`, { timeout: 15000 });

        if (opportunitiesResponse.data.success) {
            const data = opportunitiesResponse.data.data;
            console.log(`‚úÖ Oportunidades generadas: ${data.top ? data.top.length : 0}`);
            
            if (data.quantum) {
                console.log(`üåô M√©tricas Cu√°nticas Mejoradas:`);
                console.log(`   - Coherence: ${(data.quantum.coherence * 100).toFixed(1)}%`);
                console.log(`   - Consciousness: ${(data.quantum.consciousness * 100).toFixed(1)}%`);
                console.log(`   - Entanglement: ${(data.quantum.entanglement * 100).toFixed(1)}%`); // ¬°FIXED!
                console.log(`   - Superposition: ${(data.quantum.superposition * 100).toFixed(1)}%`);
                console.log(`   - Tunneling: ${(data.quantum.tunneling * 100).toFixed(1)}%`);
                console.log(`   - Optimal Leverage: ${(data.quantum.optimalLeverage * 100).toFixed(1)}%`);
            }
            
            if (data.neural) {
                console.log(`üß† Contexto Neural:`);
                console.log(`   - Sesi√≥n: ${data.neural.session}`);
                console.log(`   - Intensidad: ${(data.neural.intensity * 100).toFixed(1)}%`);
                console.log(`   - Overlaps: ${data.neural.overlaps}`);
                console.log(`   - Liquidez: ${(data.neural.liquidity * 100).toFixed(1)}%`);
                console.log(`   - Volatilidad: ${(data.neural.volatility * 100).toFixed(1)}%`);
            }
        } else {
            console.log('‚ùå Error en oportunidades');
        }
        console.log('');

        // Test 4: Market Health con contexto neural
        console.log('üè• Test 4: Market Health Neural');
        const healthDataResponse = await axios.get(`${OPPORTUNITY_MASTER_URL}/api/market-health`, { timeout: 10000 });
        
        if (healthDataResponse.data.success) {
            const healthData = healthDataResponse.data.data;
            console.log(`‚úÖ Estado general: ${healthData.overall}`);
            console.log(`üìä Score: ${healthData.score}`);
            console.log(`üéØ R√©gimen: ${healthData.regime}`);
            console.log(`üåô Quantum Health: ${healthData.quantum ? 'PRESENTE' : 'AUSENTE'}`);
            console.log(`üß† Neural Context: ${healthData.neural ? 'PRESENTE' : 'AUSENTE'}`);
        } else {
            console.log('‚ùå Error en market health');
        }
        console.log('');

        console.log('üéâ Test Neural Quantum completado exitosamente!');
        console.log('üß† Sistema de neuronas temporales integrado');
        console.log('üåô M√©tricas cu√°nticas mejoradas con factores neuronales');
        console.log('üîó Entanglement ahora incluye overlap bonus');
        
    } catch (error) {
        console.error('‚ùå Error en test neural quantum:', error.message);
        if (error.code === 'ECONNREFUSED') {
            console.log('üí° Aseg√∫rate de que ambos sistemas est√©n ejecut√°ndose:');
            console.log('   - Opportunity Master: node opportunity-master-system.js');
            console.log('   - Frontend: node frontend-opportunity-master.js');
        }
    }
}

testNeuralQuantumMetrics();
