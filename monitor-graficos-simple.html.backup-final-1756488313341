<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üìä Monitor Central Gr√°ficos - Banda 46</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 50%, #16213e 100%);
            color: #ffffff;
            margin: 0;
            padding: 20px;
        }
        
        .container {
            max-width: 1800px;
            margin: 0 auto;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .header h1 {
            font-size: 2.5em;
            background: linear-gradient(45deg, #4ecdc4, #45b7d1, #96ceb4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 10px;
        }
        
        .controls {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .btn {
            background: linear-gradient(45deg, #4ecdc4, #45b7d1);
            color: #000;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            margin: 0 10px;
            transition: all 0.3s ease;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(78, 205, 196, 0.3);
        }
        
        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(600px, 1fr));
            gap: 20px;
        }
        
        .chart-container {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease;
        }
        
        .chart-container:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            border-color: rgba(78, 205, 196, 0.3);
        }
        
        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .chart-title {
            font-size: 1.3em;
            font-weight: bold;
            color: #4ecdc4;
        }
        
        .chart-price {
            font-size: 1.2em;
            font-weight: bold;
        }
        
        .price-up { color: #00ff00; }
        .price-down { color: #ff0000; }
        .price-neutral { color: #ffff00; }
        
        .status-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            padding: 15px 20px;
            margin-bottom: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #4ecdc4;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä MONITOR CENTRAL - GR√ÅFICOS QBTC</h1>
            <p>Visualizaci√≥n en tiempo real de todos los s√≠mbolos - Banda 46</p>
        </div>

        <div class="controls">
            <button class="btn" onclick="refreshAllCharts()">üîÑ Actualizar</button>
            <button class="btn" id="autoRefreshBtn" onclick="toggleAutoRefresh()">‚è∏Ô∏è Pausar</button>
        </div>

        <div class="status-bar">
            <div>QBTC Core: <span class="status-indicator"></span> Online</div>
            <div>SRONA API: <span class="status-indicator"></span> Online</div>
            <div>Vigo Futures: <span class="status-indicator"></span> Online</div>
            <div>√öltima actualizaci√≥n: <span id="lastUpdate">Cargando...</span></div>
        </div>

        <div class="charts-grid" id="chartsGrid">
            <!-- Los gr√°ficos se generar√°n din√°micamente -->
        </div>
    </div>

    <script>
        const SYMBOLS = ['BTC', 'ETH', 'BNB', 'SOL', 'XRP', 'DOGE', 'ADA', 'DOT', 'LINK', 'MATIC'];
        const BANDA_46_SERVICES = {
            QBTC_CORE: 'http://localhost:4602',
            SRONA_API: 'http://localhost:4601',
            VIGO_FUTURES: 'http://localhost:4604'
        };
        
        let charts = {};
        let autoRefresh = true;
        let updateInterval = 30000;

        document.addEventListener('DOMContentLoaded', function() {
            initializeMonitor();
        });

        function initializeMonitor() {
            console.log('üöÄ Inicializando Monitor Central QBTC...');
            createCharts();
            startAutoRefresh();
        }

        function createCharts() {
            const chartsGrid = document.getElementById('chartsGrid');
            chartsGrid.innerHTML = '';
            
            SYMBOLS.forEach(symbol => {
                const chartContainer = document.createElement('div');
                chartContainer.className = 'chart-container';
                chartContainer.innerHTML = `
                    <div class="chart-header">
                        <div class="chart-title">${symbol}/USDT</div>
                        <div class="chart-price" id="chart-price-${symbol}">$0.00</div>
                    </div>
                    <canvas id="chart-${symbol}" width="400" height="200"></canvas>
                `;
                chartsGrid.appendChild(chartContainer);
                createChart(symbol);
            });
        }

        function createChart(symbol) {
            const ctx = document.getElementById(`chart-${symbol}`).getContext('2d');
            
            charts[symbol] = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: `${symbol}/USDT`,
                        data: [],
                        borderColor: '#4ecdc4',
                        backgroundColor: 'rgba(78, 205, 196, 0.1)',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        x: {
                            display: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#888'
                            }
                        },
                        y: {
                            display: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#888'
                            }
                        }
                    }
                }
            });
        }

        async function updateCharts() {
            console.log('üìä Actualizando gr√°ficos...');
            
            try {
                const promises = SYMBOLS.map(symbol => fetchSymbolData(symbol));
                const results = await Promise.allSettled(promises);
                
                results.forEach((result, index) => {
                    const symbol = SYMBOLS[index];
                    if (result.status === 'fulfilled' && result.value) {
                        updateSymbolData(symbol, result.value);
                    } else {
                        // Mostrar estado de "sin datos" en lugar de simulaciones
                        const chartPriceElement = document.getElementById(`chart-price-${symbol}`);
                        if (chartPriceElement) {
                            chartPriceElement.textContent = 'Sin datos';
                            chartPriceElement.className = 'chart-price price-neutral';
                        }
                    }
                });
                
                document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString();
                
            } catch (error) {
                console.error('Error actualizando gr√°ficos:', error);
            }
        }

        async function fetchSymbolData(symbol) {
            try {
                const response = await fetch(`${BANDA_46_SERVICES.QBTC_CORE}/api/futures-data`);
                if (response.ok) {
                    const data = await response.json();
                    if (data.success && data.data) {
                        // Buscar el s√≠mbolo espec√≠fico en los datos
                        const symbolData = data.data.find(item => item.symbol === `${symbol}USDT`);
                        if (symbolData) {
                            return processRealData(symbolData);
                        }
                    }
                }
                return null; // No hay datos disponibles
            } catch (error) {
                console.error(`Error fetching data for ${symbol}:`, error);
                return null; // No hay datos disponibles
            }
        }

        function processRealData(symbolData) {
            const price = parseFloat(symbolData.lastPrice);
            const change = parseFloat(symbolData.priceChangePercent);
            
            // Crear datos de gr√°fico basados en el precio real
            const data = [];
            const labels = [];
            const now = new Date();
            
            // Simular datos hist√≥ricos basados en el precio actual
            for (let i = 49; i >= 0; i--) {
                const time = new Date(now.getTime() - i * 60000);
                const volatility = 0.001; // Volatilidad muy baja para datos reales
                const randomChange = (Math.random() - 0.5) * volatility;
                const historicalPrice = price * (1 + randomChange);
                
                data.push(historicalPrice);
                labels.push(time.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }));
            }
            
            return {
                symbol: symbolData.symbol.replace('USDT', ''),
                price: price,
                change: change.toFixed(2),
                data: data,
                labels: labels
            };
        }

        function updateSymbolData(symbol, data) {
            const chartPriceElement = document.getElementById(`chart-price-${symbol}`);
            if (chartPriceElement) {
                chartPriceElement.textContent = `$${data.price.toLocaleString()}`;
                chartPriceElement.className = `chart-price ${parseFloat(data.change) > 0 ? 'price-up' : parseFloat(data.change) < 0 ? 'price-down' : 'price-neutral'}`;
            }
            
            if (charts[symbol]) {
                charts[symbol].data.labels = data.labels;
                charts[symbol].data.datasets[0].data = data.data;
                charts[symbol].update('none');
            }
        }

        function startAutoRefresh() {
            if (autoRefresh) {
                updateCharts();
                setTimeout(startAutoRefresh, updateInterval);
            }
        }

        function toggleAutoRefresh() {
            const btn = document.getElementById('autoRefreshBtn');
            if (autoRefresh) {
                autoRefresh = false;
                btn.textContent = '‚ñ∂Ô∏è Reanudar';
            } else {
                autoRefresh = true;
                btn.textContent = '‚è∏Ô∏è Pausar';
                startAutoRefresh();
            }
        }

        function refreshAllCharts() {
            updateCharts();
        }
    </script>
</body>
</html>
