
// Constantes f√≠sicas reales del sistema
const PHYSICAL_CONSTANTS = {
  "QUANTUM_COHERENCE": 0.75,
  "QUANTUM_CONSCIOUSNESS": 0.8,
  "QUANTUM_ENTANGLEMENT": 0.65,
  "QUANTUM_SUPERPOSITION": 0.7,
  "QUANTUM_TUNNELING": 0.6,
  "MARKET_VOLATILITY": 0.05,
  "MARKET_MOMENTUM": 0.1,
  "MARKET_LIQUIDITY": 0.75,
  "MARKET_SPREAD": 0.001,
  "MARKET_DEPTH": 500000,
  "FUNDING_RATE": 0.02,
  "FUNDING_VOLATILITY": 0.01,
  "FUNDING_DEVIATION": 0.5,
  "FUNDING_ANNUALIZED": 5,
  "LIQUIDATION_PROBABILITY": 0.05,
  "SLIPPAGE_RATE": 0.0025,
  "VOLATILITY_RISK": 0.1,
  "EXECUTION_RISK": 0.005,
  "VOLUME_24H": 500000,
  "VOLUME_RATIO": 0.75,
  "VOLUME_EXPANSION": 300000,
  "PRICE_CHANGE": 0.02,
  "PRICE_ACCELERATION": 0.015,
  "PRICE_MOMENTUM": 0.01,
  "TIME_TO_FUNDING": 1800000,
  "SESSION_INTENSITY": 0.6,
  "TEMPORAL_RESONANCE": 0.7,
  "FIBONACCI_STRENGTH": 0.75,
  "FIBONACCI_INDEX": 5,
  "NEURAL_CONFIDENCE": 0.85,
  "NEURAL_COHERENCE": 0.8,
  "NEURAL_ENTANGLEMENT": 0.7,
  "BASE_LEVERAGE": 15,
  "CONSERVATIVE_LEVERAGE": 10,
  "AGGRESSIVE_LEVERAGE": 25,
  "STOP_LOSS": 0.03,
  "TAKE_PROFIT": 0.06,
  "BASE_SCORE": 0.65,
  "CONFIDENCE_SCORE": 0.75,
  "QUALITY_SCORE": 0.8
};

// CORRECCI√ìN DEL FILTRO DE OPORTUNIDADES
// Reemplazar la funci√≥n displayOpportunities en qbtc-quantum-dashboard-v3.js

async displayOpportunities(opportunities) {
    const opportunitiesGrid = document.getElementById('opportunities-grid');
    if (opportunitiesGrid && opportunities) {
        opportunitiesGrid.innerHTML = '';
        
        console.log(`üîç [DEBUG] Total oportunidades recibidas: ${opportunities.length}`);
        console.log(`üîç [DEBUG] Primeras 3 oportunidades:`, opportunities.slice(0, 3));
        
        // SOLO FUTURES - Oportunidades de ejecuci√≥n real (FILTRO FLEXIBLE)
        const futuresOpportunities = opportunities.filter(item => {
            // Buscar en QUANTUM_UNIVERSE por s√≠mbolo
            const symbolInfo = QUANTUM_UNIVERSE.find(s => s.symbol === item.symbol);
            
            // Si el s√≠mbolo existe en nuestro universo y es de capa EXECUTION, incluirlo
            if (symbolInfo && symbolInfo.layer === 'EXECUTION') {
                console.log(`‚úÖ [DEBUG] ${item.symbol} - Incluido por EXECUTION layer`);
                return true;
            }
            
            // Si no est√° en nuestro universo pero tiene type FUTURES, incluirlo tambi√©n
            if (item.type === 'FUTURES' || item.type === 'FUTURE') {
                console.log(`‚úÖ [DEBUG] ${item.symbol} - Incluido por FUTURES type`);
                return true;
            }
            
            // Para debugging: mostrar qu√© oportunidades est√°n llegando
            console.log(`‚ùå [DEBUG] ${item.symbol} - Type: ${item.type} - En universo: ${!!symbolInfo} - Layer: ${symbolInfo?.layer}`);
            
            return false;
        });
        
        console.log(`üîç [DEBUG] Oportunidades FUTURES filtradas: ${futuresOpportunities.length}`);
        
        // Si no hay oportunidades de FUTURES, mostrar mensaje
        if (futuresOpportunities.length === 0) {
            opportunitiesGrid.innerHTML = `
                <div class="error" style="padding: 20px; text-align: center; color: #ff6b6b; grid-column: 1 / -1;">
                    <h3>üö® Esperando Oportunidades de Ejecuci√≥n (FUTURES)</h3>
                    <p>El sistema cu√°ntico est√° procesando datos en tiempo real...</p>
                    <p>üìä SPOT: An√°lisis | üéØ OPTIONS: Inteligencia | ‚ö° FUTURES: Ejecuci√≥n</p>
                    <p><strong>Debug:</strong> Se recibieron ${opportunities.length} oportunidades del backend</p>
                    <div style="margin-top: 15px;">
                        <div style="display: inline-block; margin: 5px; padding: 8px 12px; background: rgba(78, 205, 196, 0.2); border-radius: 8px; border: 1px solid #4ecdc4;">
                            <span style="color: #4ecdc4; font-weight: bold;">SPOT (An√°lisis)</span>
                        </div>
                        <div style="display: inline-block; margin: 5px; padding: 8px 12px; background: rgba(69, 183, 209, 0.2); border-radius: 8px; border: 1px solid #45b7d1;">
                            <span style="color: #45b7d1; font-weight: bold;">OPTIONS (Intel)</span>
                        </div>
                        <div style="display: inline-block; margin: 5px; padding: 8px 12px; background: rgba(255, 107, 107, 0.2); border-radius: 8px; border: 1px solid #ff6b6b;">
                            <span style="color: #ff6b6b; font-weight: bold;">FUTURES (Ejecuci√≥n)</span>
                        </div>
                    </div>
                    <button onclick="dashboard.loadOpportunities()" style="margin-top: 15px; padding: 10px 20px; background: #4ecdc4; color: white; border: none; border-radius: 8px; cursor: pointer; font-weight: bold;">
                        üîÑ REFRESCAR DATOS REALES
                    </button>
                </div>
            `;
            return;
        }
        
        // Eliminar duplicados y mejorar ponderaci√≥n (CON DATOS REALES DE OPTIONS)
        const uniqueFutures = await this.removeDuplicatesAndSort(futuresOpportunities);
        
        // Separar LONGS y SHORTS
        const { longs, shorts } = await this.separateLongsAndShorts(uniqueFutures);
        
        // Crear secciones separadas para LONGS y SHORTS
        const longsCards = await this.renderOpportunityCards(longs.slice(0, 4), 'LONG');
        const shortsCards = await this.renderOpportunityCards(shorts.slice(0, 4), 'SHORT');
        
        opportunitiesGrid.innerHTML = `
            <div class="opportunities-section" style="grid-column: 1 / -1; margin-bottom: 30px;">
                <h3 style="text-align: center; color: #96ceb4; font-size: 1.5em; margin-bottom: 20px;">
                    üìà MEJORES LONGS - FUTURES (${longs.length} oportunidades)
                </h3>
                <div class="longs-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px;">
                    ${longsCards}
                </div>
            </div>
            
            <div class="opportunities-section" style="grid-column: 1 / -1;">
                <h3 style="text-align: center; color: #ff6b6b; font-size: 1.5em; margin-bottom: 20px;">
                    üìâ MEJORES SHORTS - FUTURES (${shorts.length} oportunidades)
                </h3>
                <div class="shorts-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px;">
                    ${shortsCards}
                </div>
            </div>
        `;
    }
}
