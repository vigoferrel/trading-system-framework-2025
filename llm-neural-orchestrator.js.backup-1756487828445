/**
 * üß† LLM NEURAL ORCHESTRATOR - CEREBRO MAESTRO NEURONAL
 * ====================================================
 * 
 * Sistema que integra todos los sistemas neuronales existentes
 * y usa Google Gemini Flash 1.5 como cerebro maestro para
 * resolver contradicciones y generar decisiones unificadas
 */

const axios = require('axios');

// Configuraci√≥n de OpenRouter con Google Gemini Flash 1.5
const GEMINI_CONFIG = {
    apiKey: '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',
    model: 'google/gemini-flash-1.5-8b',
    baseUrl: 'https://openrouter.ai/api/v1',
    timeout: 30000
};

class LLMNeuralOrchestrator {
    constructor() {
        // Sistemas neuronales existentes (sin modificar)
        this.neuralSystems = {
            session: null,      // CryptoSessionNeuralNetwork
            halving: null,      // HalvingNeuralPredictor
            easterEgg: null,    // CryptoEasterEggDetector
            lunar: null,        // LunarSeasonalNeuralNetwork
            leonardo: null,     // LeonardoProjectionNeuron
            fibonacci: null,    // FibonacciWaveNeuron
            prime: null,        // PrimeCycleProjectionNeuron
            quantum: null,      // QuantumInterferenceNeuron
            psychological: null // NucleoPsicologicoTasasCambio
        };
        
        // LLM como cerebro maestro
        this.geminiBrain = new GeminiBrainMaster();
        
        // Cache para optimizar llamadas
        this.decisionCache = new Map();
        this.cacheTimeout = 30000; // 30 segundos
        
        // Estado del sistema
        this.systemState = {
            lastUpdate: null,
            totalDecisions: 0,
            llmCalls: 0,
            cacheHits: 0,
            errors: 0
        };
        
        console.log('üß† [LLM NEURAL ORCHESTRATOR] Inicializado con Google Gemini Flash 1.5');
    }
    
    /**
     * üöÄ INICIALIZAR SISTEMAS NEURONALES
     */
    async initializeNeuralSystems() {
        console.log('üß† [LLM ORCHESTRATOR] Inicializando sistemas neuronales...');
        
        try {
            // Cargar el motor neural temporal que contiene todos los sistemas
            const neuralTemporalEngine = require('./neural-temporal-engine');
            
            // Cargar sistemas neuronales desde el motor temporal
            this.neuralSystems.session = neuralTemporalEngine.CryptoSessionNeuralNetwork;
            this.neuralSystems.halving = neuralTemporalEngine.HalvingNeuralPredictor;
            this.neuralSystems.easterEgg = neuralTemporalEngine.CryptoEasterEggDetector;
            this.neuralSystems.lunar = neuralTemporalEngine.LunarSeasonalNeuralNetwork;
            
            // Cargar sistemas adicionales
            const nucleoPsicologico = await this.loadNeuralSystem('nucleo-psicologico-tasas-cambio');
            this.neuralSystems.psychological = nucleoPsicologico.analizarEstadoPsicologico;
            
            // Crear instancias de los sistemas neuronales
            this.neuralSystems.session = new this.neuralSystems.session();
            this.neuralSystems.halving = new this.neuralSystems.halving();
            this.neuralSystems.easterEgg = new this.neuralSystems.easterEgg();
            this.neuralSystems.lunar = new this.neuralSystems.lunar();
            
            console.log('‚úÖ [LLM ORCHESTRATOR] Sistemas neuronales inicializados desde neural-temporal-engine.js');
            
        } catch (error) {
            console.warn('‚ö†Ô∏è [LLM ORCHESTRATOR] Error cargando sistemas neuronales:', error.message);
            // Continuar con sistemas disponibles
        }
    }
    
    /**
     * üì¶ CARGAR SISTEMA NEURONAL DIN√ÅMICAMENTE
     */
    async loadNeuralSystem(systemName) {
        try {
            const system = require(`./${systemName}`);
            return system;
        } catch (error) {
            console.warn(`‚ö†Ô∏è Sistema neural ${systemName} no disponible`);
            return this.createFallbackSystem(systemName);
        }
    }
    
    /**
     * üîÑ CREAR SISTEMA FALLBACK
     */
    createFallbackSystem(systemName) {
        return {
            name: systemName,
            isFallback: true,
            getCurrentState: () => ({
                status: 'FALLBACK',
                confidence: 0.5,
                data: {}
            })
        };
    }
    
    /**
     * üéØ GENERAR DECISI√ìN UNIFICADA CON LLM
     */
    async generateUnifiedDecision(symbol = 'BTCUSDT') {
        console.log(`üß† [LLM ORCHESTRATOR] Generando decisi√≥n unificada para ${symbol}...`);
        
        try {
            // 1. Verificar cache
            const cacheKey = `${symbol}_${Date.now() - (Date.now() % 30000)}`; // 30s cache
            if (this.decisionCache.has(cacheKey)) {
                this.systemState.cacheHits++;
                console.log('‚úÖ [LLM ORCHESTRATOR] Usando decisi√≥n cacheada');
                return this.decisionCache.get(cacheKey);
            }
            
            // 2. Recolectar todas las se√±ales neuronales
            const neuralSignals = await this.gatherAllNeuralSignals(symbol);
            
            // 3. Formatear para Gemini
            const geminiPrompt = this.formatNeuralSignalsForGemini(neuralSignals, symbol);
            
            // 4. Consultar Gemini para decisi√≥n unificada
            const geminiDecision = await this.geminiBrain.analyzeAndDecide(geminiPrompt);
            
            // 5. Validar y formatear respuesta
            const unifiedDecision = this.validateAndFormatGeminiResponse(geminiDecision, neuralSignals);
            
            // 6. Actualizar estad√≠sticas
            this.systemState.totalDecisions++;
            this.systemState.llmCalls++;
            this.systemState.lastUpdate = new Date();
            
            // 7. Cachear resultado
            this.decisionCache.set(cacheKey, unifiedDecision);
            
            console.log(`‚úÖ [LLM ORCHESTRATOR] Decisi√≥n unificada generada: ${unifiedDecision.final_decision}`);
            
            return unifiedDecision;
            
        } catch (error) {
            console.error('‚ùå [LLM ORCHESTRATOR] Error generando decisi√≥n:', error.message);
            this.systemState.errors++;
            
            // Fallback a decisi√≥n b√°sica
            return this.generateFallbackDecision(symbol);
        }
    }
    
    /**
     * üìä RECOLECTAR TODAS LAS SE√ëALES NEURONALES
     */
    async gatherAllNeuralSignals(symbol) {
        const signals = {
            symbol: symbol,
            timestamp: new Date().toISOString(),
            session: null,
            halving: null,
            easterEgg: null,
            lunar: null,
            leonardo: null,
            fibonacci: null,
            prime: null,
            quantum: null,
            psychological: null
        };
        
        // Recolectar se√±ales de sistemas disponibles
        const promises = [];
        
        if (this.neuralSystems.session) {
            try {
                signals.session = this.neuralSystems.session.getCurrentSessionNeuralState();
            } catch (err) {
                console.warn('Error session neural:', err.message);
            }
        }
        
        if (this.neuralSystems.halving) {
            try {
                signals.halving = this.neuralSystems.halving.getCurrentHalvingState();
            } catch (err) {
                console.warn('Error halving neural:', err.message);
            }
        }
        
        if (this.neuralSystems.easterEgg) {
            try {
                signals.easterEgg = this.neuralSystems.easterEgg.scanForEasterEggs(symbol);
            } catch (err) {
                console.warn('Error easter egg:', err.message);
            }
        }
        
        if (this.neuralSystems.lunar) {
            try {
                signals.lunar = this.neuralSystems.lunar.getCurrentLunarSeasonalState();
            } catch (err) {
                console.warn('Error lunar neural:', err.message);
            }
        }
        
        if (this.neuralSystems.leonardo) {
            promises.push(
                this.neuralSystems.leonardo.generateProjection(symbol)
                    .then(result => signals.leonardo = result)
                    .catch(err => console.warn('Error leonardo neural:', err.message))
            );
        }
        
        if (this.neuralSystems.fibonacci) {
            promises.push(
                this.neuralSystems.fibonacci.analyzeWaves(symbol)
                    .then(result => signals.fibonacci = result)
                    .catch(err => console.warn('Error fibonacci neural:', err.message))
            );
        }
        
        if (this.neuralSystems.prime) {
            promises.push(
                this.neuralSystems.prime.analyzePrimeCycles(symbol)
                    .then(result => signals.prime = result)
                    .catch(err => console.warn('Error prime neural:', err.message))
            );
        }
        
        if (this.neuralSystems.quantum) {
            promises.push(
                this.neuralSystems.quantum.analyzeQuantumInterference(symbol)
                    .then(result => signals.quantum = result)
                    .catch(err => console.warn('Error quantum neural:', err.message))
            );
        }
        
        if (this.neuralSystems.psychological) {
            try {
                signals.psychological = await this.neuralSystems.psychological(symbol, 45000, {});
            } catch (err) {
                console.warn('Error psychological:', err.message);
            }
        }
        
        return signals;
    }
    
    /**
     * üìù FORMATEAR SE√ëALES PARA GEMINI
     */
    formatNeuralSignalsForGemini(signals, symbol) {
        const sessionInfo = signals.session ? `
        SESI√ìN NEURAL:
        - Estado: ${signals.session.primary_session || 'N/A'}
        - Intensidad: ${signals.session.session_intensity || 0}%
        - Overlaps: ${signals.session.overlaps?.length || 0}
        - Estrategias: ${signals.session.optimal_strategies?.join(', ') || 'N/A'}
        ` : 'SESI√ìN NEURAL: No disponible';
        
        const psychologicalInfo = signals.psychological ? `
        ESTADO PSICOL√ìGICO:
        - Estado: ${signals.psychological.estado || 'N/A'}
        - Confianza: ${signals.psychological.confianza || 0}%
        - Recomendaci√≥n: ${signals.psychological.accion_recomendada || 'N/A'}
        - Se√±ales: ${signals.psychological.senales_medibles ? Object.keys(signals.psychological.senales_medibles).join(', ') : 'N/A'}
        ` : 'ESTADO PSICOL√ìGICO: No disponible';
        
        const quantumInfo = signals.quantum ? `
        M√âTRICAS CU√ÅNTICAS:
        - Coherencia: ${signals.quantum.coherence || 0}%
        - Consciencia: ${signals.quantum.consciousness || 0}%
        - Entrelazamiento: ${signals.quantum.entanglement || 0}%
        - Superposici√≥n: ${signals.quantum.superposition || 0}%
        - Tunelamiento: ${signals.quantum.tunneling || 0}%
        ` : 'M√âTRICAS CU√ÅNTICAS: No disponible';
        
        const halvingInfo = signals.halving ? `
        CICLO HALVING:
        - Fase: ${signals.halving.current_phase || 'N/A'}
        - D√≠as restantes: ${signals.halving.days_to_next_halving || 'N/A'}
        - Influencia: ${signals.halving.halving_influence || 0}%
        ` : 'CICLO HALVING: No disponible';
        
        const lunarInfo = signals.lunar ? `
        PATRONES LUNARES:
        - Fase lunar: ${signals.lunar.lunar?.phase || 'N/A'}
        - Influencia: ${signals.lunar.lunar?.influence?.volatility_factor || 0}%
        - Multiplicador volumen: ${signals.lunar.lunar?.influence?.volume_multiplier || 1}x
        ` : 'PATRONES LUNARES: No disponible';
        
        return `
        AN√ÅLISIS NEURONAL UNIFICADO - ${symbol}
        ======================================
        
        SE√ëALES NEURONALES DETECTADAS:
        
        ${sessionInfo}
        
        ${psychologicalInfo}
        
        ${quantumInfo}
        
        ${halvingInfo}
        
        ${lunarInfo}
        
        EASTER EGGS DETECTADOS:
        ${signals.easterEgg ? `- ${signals.easterEgg.easter_eggs?.length || 0} anomal√≠as detectadas` : '- No disponible'}
        
        PROYECCI√ìN LEONARDO:
        ${signals.leonardo ? `- Target: ${signals.leonardo.target_price || 'N/A'}, Confianza: ${signals.leonardo.confidence || 0}%` : '- No disponible'}
        
        ONDAS FIBONACCI:
        ${signals.fibonacci ? `- Onda actual: ${signals.fibonacci.current_wave || 'N/A'}, Ratio: ${signals.fibonacci.wave_ratio || 'N/A'}` : '- No disponible'}
        
        CICLOS PRIMOS:
        ${signals.prime ? `- Primo actual: ${signals.prime.current_prime || 'N/A'}, Posici√≥n: ${signals.prime.cycle_position || 'N/A'}` : '- No disponible'}
        
        INTERFERENCIA CU√ÅNTICA:
        ${signals.quantum ? `- Estado: ${signals.quantum.interference_state || 'N/A'}, Fuerza: ${signals.quantum.interference_strength || 0}%` : '- No disponible'}
        
        TAREA: Analiza todas las se√±ales neuronales y genera una recomendaci√≥n unificada y coherente.
        Considera el contexto del mercado, la confianza de cada se√±al, y resuelve las contradicciones.
        
        FORMATO DE RESPUESTA (JSON):
        {
          "decision": "STRONG_BUY|BUY|HOLD|SELL|STRONG_SELL",
          "confidence": 0-100,
          "reasoning": "Explicaci√≥n detallada de la decisi√≥n",
          "risk_level": "LOW|MEDIUM|HIGH",
          "timeframe": "SHORT|MEDIUM|LONG",
          "key_factors": ["factor1", "factor2", "factor3"],
          "contradictions_resolved": "Explicaci√≥n de c√≥mo se resolvieron las contradicciones"
        }
        `;
    }
    
    /**
     * ‚úÖ VALIDAR Y FORMATEAR RESPUESTA DE GEMINI
     */
    validateAndFormatGeminiResponse(geminiResponse, neuralSignals) {
        try {
            // Limpiar respuesta de markdown si existe
            let cleanResponse = geminiResponse;
            if (typeof geminiResponse === 'string') {
                // Remover ```json y ``` si existen
                cleanResponse = geminiResponse.replace(/```json\s*/g, '').replace(/```\s*/g, '').trim();
            }
            
            // Intentar parsear JSON
            let decision;
            if (typeof cleanResponse === 'string') {
                decision = JSON.parse(cleanResponse);
            } else {
                decision = cleanResponse;
            }
            
            // Validar campos requeridos
            const validDecisions = ['STRONG_BUY', 'BUY', 'HOLD', 'SELL', 'STRONG_SELL'];
            const validRiskLevels = ['LOW', 'MEDIUM', 'HIGH'];
            const validTimeframes = ['SHORT', 'MEDIUM', 'LONG'];
            
            if (!validDecisions.includes(decision.decision)) {
                decision.decision = 'HOLD';
            }
            
            if (!validRiskLevels.includes(decision.risk_level)) {
                decision.risk_level = 'MEDIUM';
            }
            
            if (!validTimeframes.includes(decision.timeframe)) {
                decision.timeframe = 'MEDIUM';
            }
            
            if (typeof decision.confidence !== 'number' || decision.confidence < 0 || decision.confidence > 100) {
                decision.confidence = 50;
            }
            
            // Formatear respuesta final
            return {
                symbol: neuralSignals.symbol,
                timestamp: new Date().toISOString(),
                final_decision: decision.decision,
                confidence: decision.confidence,
                reasoning: decision.reasoning || 'An√°lisis neural unificado',
                risk_level: decision.risk_level,
                timeframe: decision.timeframe,
                key_factors: decision.key_factors || [],
                contradictions_resolved: decision.contradictions_resolved || 'No se detectaron contradicciones',
                neural_signals: neuralSignals,
                llm_validated: true,
                system_stats: {
                    total_decisions: this.systemState.totalDecisions,
                    llm_calls: this.systemState.llmCalls,
                    cache_hits: this.systemState.cacheHits,
                    errors: this.systemState.errors
                }
            };
            
        } catch (error) {
            console.error('‚ùå [LLM ORCHESTRATOR] Error validando respuesta Gemini:', error.message);
            return this.generateFallbackDecision(neuralSignals.symbol);
        }
    }
    
    /**
     * üîÑ GENERAR DECISI√ìN FALLBACK
     */
    generateFallbackDecision(symbol) {
        return {
            symbol: symbol,
            timestamp: new Date().toISOString(),
            final_decision: 'HOLD',
            confidence: 50,
            reasoning: 'Sistema en modo fallback - an√°lisis b√°sico',
            risk_level: 'MEDIUM',
            timeframe: 'MEDIUM',
            key_factors: ['Sistema neural b√°sico'],
            contradictions_resolved: 'N/A - modo fallback',
            neural_signals: {},
            llm_validated: false,
            system_stats: this.systemState
        };
    }
    
    /**
     * üìä OBTENER ESTAD√çSTICAS DEL SISTEMA
     */
    getSystemStats() {
        return {
            ...this.systemState,
            cache_size: this.decisionCache.size,
            uptime: this.systemState.lastUpdate ? 
                Date.now() - this.systemState.lastUpdate.getTime() : 0
        };
    }
    
    /**
     * üßπ LIMPIAR CACHE
     */
    clearCache() {
        this.decisionCache.clear();
        console.log('üßπ [LLM ORCHESTRATOR] Cache limpiado');
    }
}

/**
 * üß† CEREBRO MAESTRO GEMINI
 */
class GeminiBrainMaster {
    constructor() {
        this.config = GEMINI_CONFIG;
        this.retryAttempts = 3;
        this.retryDelay = 1000;
    }
    
    /**
     * üéØ ANALIZAR Y DECIDIR CON GEMINI
     */
    async analyzeAndDecide(prompt) {
        console.log('üß† [GEMINI BRAIN] Analizando con Gemini Flash 1.5...');
        
        for (let attempt = 1; attempt <= this.retryAttempts; attempt++) {
            try {
                const response = await this.callGeminiAPI(prompt);
                console.log('‚úÖ [GEMINI BRAIN] An√°lisis completado');
                return response;
                
            } catch (error) {
                console.warn(`‚ö†Ô∏è [GEMINI BRAIN] Intento ${attempt} fall√≥:`, error.message);
                
                if (attempt === this.retryAttempts) {
                    throw new Error(`Gemini API fall√≥ despu√©s de ${this.retryAttempts} intentos`);
                }
                
                // Esperar antes del siguiente intento
                await new Promise(resolve => setTimeout(resolve, this.retryDelay * attempt));
            }
        }
    }
    
    /**
     * üì° LLAMAR API DE OPENROUTER (GEMINI FLASH 1.5)
     */
    async callGeminiAPI(prompt) {
        const requestBody = {
            model: this.config.model,
            messages: [
                {
                    role: 'system',
                    content: 'Eres un experto analista de mercados financieros especializado en criptomonedas. Tu tarea es analizar se√±ales neuronales complejas y generar recomendaciones de trading coherentes y bien fundamentadas. IMPORTANTE: Responde √öNICAMENTE con JSON v√°lido, sin markdown, sin ```json, sin explicaciones adicionales. Solo el objeto JSON.'
                },
                {
                    role: 'user',
                    content: prompt
                }
            ],
            temperature: 0.3,
            max_tokens: 1000,
            top_p: 0.9
        };
        
        const response = await axios.post(
            `${this.config.baseUrl}/chat/completions`,
            requestBody,
            {
                headers: {
                    'Authorization': `Bearer ${this.config.apiKey}`,
                    'Content-Type': 'application/json',
                    'HTTP-Referer': 'https://qbtc-banda46.com',
                    'X-Title': 'QBTC Neural Orchestrator'
                },
                timeout: this.config.timeout
            }
        );
        
        if (response.data && response.data.choices && response.data.choices[0]) {
            return response.data.choices[0].message.content;
        } else {
            throw new Error('Respuesta inv√°lida de OpenRouter API');
        }
    }
}

module.exports = {
    LLMNeuralOrchestrator,
    GeminiBrainMaster
};
