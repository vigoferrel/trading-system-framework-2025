<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🔮 QBTC-UNIFIED PRIME QUANTUM DASHBOARD V4 - DATOS REALES</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 50%, #16213e 100%);
            color: #ffffff;
            min-height: 100vh;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .quantum-header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .quantum-header h1 {
            font-size: 2.5em;
            background: linear-gradient(45deg, #4ecdc4, #45b7d1, #96ceb4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 10px;
        }

        .quantum-header p {
            color: #888;
            font-size: 1.1em;
        }

        .status-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(255, 255, 255, 0.05);
            padding: 15px 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .status-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #4ecdc4;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .opportunities-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .opportunity-card {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease;
        }

        .opportunity-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            border-color: rgba(78, 205, 196, 0.3);
        }

        .opportunity-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .symbol {
            font-size: 1.5em;
            font-weight: bold;
            color: #4ecdc4;
        }

        .score {
            background: linear-gradient(45deg, #4ecdc4, #45b7d1);
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
            font-size: 0.9em;
        }

        .price-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .current-price {
            font-size: 1.8em;
            font-weight: bold;
        }

        .price-change {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
        }

        .change-amount {
            font-size: 1.2em;
            font-weight: bold;
        }

        .change-percent {
            font-size: 0.9em;
        }

        .positive { color: #4ecdc4; }
        .negative { color: #ff6b6b; }

        .volume-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding: 10px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
        }

        .strategy {
            background: rgba(78, 205, 196, 0.1);
            color: #4ecdc4;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.8em;
            font-weight: bold;
            text-align: center;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .btn {
            flex: 1;
            padding: 10px;
            border: none;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            text-decoration: none;
            display: inline-block;
        }

        .btn-analyze {
            background: linear-gradient(45deg, #45b7d1, #4ecdc4);
            color: white;
        }

        .btn-execute {
            background: linear-gradient(45deg, #4ecdc4, #96ceb4);
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .section-title {
            font-size: 1.8em;
            margin-bottom: 20px;
            color: #4ecdc4;
            text-align: center;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #888;
        }

        .error {
            background: rgba(255, 107, 107, 0.1);
            border: 1px solid #ff6b6b;
            color: #ff6b6b;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
        }

        .success {
            background: rgba(78, 205, 196, 0.1);
            border: 1px solid #4ecdc4;
            color: #4ecdc4;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
        }

        .stats-bar {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.05);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .stat-value {
            font-size: 2em;
            font-weight: bold;
            color: #4ecdc4;
        }

        .stat-label {
            color: #888;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="quantum-header">
            <h1>🔮 QBTC-UNIFIED PRIME QUANTUM DASHBOARD V4</h1>
            <p>Sistema de Trading Cuántico Avanzado - Datos Reales</p>
        </div>

        <div class="status-bar">
            <div class="status-item">
                <div class="status-indicator"></div>
                <span>Sistema Cuántico: ACTIVO</span>
            </div>
            <div class="status-item">
                <span>Última actualización: <span id="last-update">--:--:--</span></span>
            </div>
            <div class="status-item">
                <span>Oportunidades: <span id="opportunities-count">0</span></span>
            </div>
        </div>

        <div class="stats-bar">
            <div class="stat-card">
                <div class="stat-value" id="total-opportunities">0</div>
                <div class="stat-label">Total Oportunidades</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="longs-count">0</div>
                <div class="stat-label">LONGS</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="shorts-count">0</div>
                <div class="stat-label">SHORTS</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="avg-score">0%</div>
                <div class="stat-label">Score Promedio</div>
            </div>
        </div>

        <h2 class="section-title">⚡ OPORTUNIDADES FUTURES - EJECUCIÓN REAL</h2>
        <div id="opportunities-container">
            <div class="loading">🔄 Cargando oportunidades...</div>
        </div>
    </div>

    <script>
        // Constantes físicas reales del sistema
        const PHYSICAL_CONSTANTS = {
            QUANTUM_COHERENCE: 0.75,
            QUANTUM_CONSCIOUSNESS: 0.8,
            QUANTUM_ENTANGLEMENT: 0.65,
            QUANTUM_SUPERPOSITION: 0.7,
            QUANTUM_TUNNELING: 0.6,
            MARKET_VOLATILITY: 0.05,
            MARKET_MOMENTUM: 0.1,
            MARKET_LIQUIDITY: 0.75,
            MARKET_SPREAD: 0.001,
            MARKET_DEPTH: 500000,
            FUNDING_RATE: 0.02,
            FUNDING_VOLATILITY: 0.01,
            FUNDING_DEVIATION: 0.5,
            FUNDING_ANNUALIZED: 5.0,
            LIQUIDATION_PROBABILITY: 0.05,
            SLIPPAGE_RATE: 0.0025,
            VOLATILITY_RISK: 0.1,
            EXECUTION_RISK: 0.005,
            VOLUME_24H: 500000,
            VOLUME_RATIO: 0.75,
            VOLUME_EXPANSION: 300000,
            PRICE_CHANGE: 0.02,
            PRICE_ACCELERATION: 0.015,
            PRICE_MOMENTUM: 0.01,
            TIME_TO_FUNDING: 1800000,
            SESSION_INTENSITY: 0.6,
            TEMPORAL_RESONANCE: 0.7,
            FIBONACCI_STRENGTH: 0.75,
            FIBONACCI_INDEX: 5,
            NEURAL_CONFIDENCE: 0.85,
            NEURAL_COHERENCE: 0.8,
            NEURAL_ENTANGLEMENT: 0.7,
            BASE_LEVERAGE: 15,
            CONSERVATIVE_LEVERAGE: 10,
            AGGRESSIVE_LEVERAGE: 25,
            STOP_LOSS: 0.03,
            TAKE_PROFIT: 0.06,
            BASE_SCORE: 0.65,
            CONFIDENCE_SCORE: 0.75,
            QUALITY_SCORE: 0.8
        };

        // Función para calcular score real basado en métricas
        function calculateRealOpportunityScore(symbol, data) {
            const baseScore = PHYSICAL_CONSTANTS.BASE_SCORE;
            
            // Factores de ajuste basados en datos reales
            const volumeFactor = Math.min(1, data.volume / 1000000); // Normalizar volumen
            const volatilityFactor = Math.min(1, Math.abs(data.priceChangePercent) / 10); // Normalizar volatilidad
            const momentumFactor = data.priceChangePercent > 0 ? 0.1 : -0.1; // Momentum
            
            // Score final con límites
            const finalScore = Math.max(0.1, Math.min(0.95, 
                baseScore + volumeFactor * 0.2 + volatilityFactor * 0.15 + momentumFactor
            ));
            
            return finalScore;
        }

        // Función para determinar estrategia real
        function determineRealStrategy(symbol, data) {
            const priceChange = data.priceChangePercent;
            const volume = data.volume;
            
            if (priceChange > 5 && volume > 1000000) return 'BULLISH_MOMENTUM';
            if (priceChange < -5 && volume > 1000000) return 'BEARISH_MOMENTUM';
            if (Math.abs(priceChange) < 2) return 'SIDEWAYS_RANGE';
            if (volume > 5000000) return 'HIGH_VOLUME_BREAKOUT';
            return 'NEUTRAL_ANALYSIS';
        }

        // Función para formatear volumen
        function formatVolume(volume) {
            if (volume > 1000000000) {
                return (volume / 1000000000).toFixed(1) + 'B';
            } else if (volume > 1000000) {
                return (volume / 1000000).toFixed(1) + 'M';
            } else if (volume > 1000) {
                return (volume / 1000).toFixed(1) + 'K';
            }
            return volume.toFixed(0);
        }

        // Función para crear tarjeta de oportunidad
        function createOpportunityCard(opportunity) {
            const score = calculateRealOpportunityScore(opportunity.symbol, {
                volume: opportunity.volume,
                priceChangePercent: opportunity.priceChangePercent
            });

            const strategy = determineRealStrategy(opportunity.symbol, {
                priceChangePercent: opportunity.priceChangePercent,
                volume: opportunity.volume
            });

            const isPositive = opportunity.priceChangePercent > 0;
            const changeClass = isPositive ? 'positive' : 'negative';
            const changeSign = isPositive ? '+' : '';

            return `
                <div class="opportunity-card">
                    <div class="opportunity-header">
                        <div class="symbol">${opportunity.symbol}</div>
                        <div class="score">${(score * 100).toFixed(1)}%</div>
                    </div>
                    
                    <div class="price-info">
                        <div class="current-price">$${parseFloat(opportunity.currentPrice || opportunity.price || 0).toFixed(4)}</div>
                        <div class="price-change">
                            <div class="change-amount ${changeClass}">${changeSign}${(opportunity.priceChange || 0).toFixed(4)}</div>
                            <div class="change-percent ${changeClass}">${changeSign}${(opportunity.priceChangePercent || 0).toFixed(2)}%</div>
                        </div>
                    </div>
                    
                    <div class="volume-info">
                        <span>VOLUMEN</span>
                        <span>${formatVolume(opportunity.volume)}</span>
                    </div>
                    
                    <div class="strategy">${strategy}</div>
                    
                    <div class="action-buttons">
                        <a href="#" class="btn btn-analyze" onclick="analyzeOpportunity('${opportunity.symbol}')">🔍 ANALIZAR</a>
                        <a href="#" class="btn btn-execute" onclick="executeTrade('${opportunity.symbol}', '${isPositive ? 'LONG' : 'SHORT'}')">⚡ EJECUTAR ${isPositive ? 'LONG' : 'SHORT'}</a>
                    </div>
                </div>
            `;
        }

        // Función para cargar oportunidades
        async function loadOpportunities() {
            try {
                const response = await axios.get('http://localhost:4602/api/enhanced-opportunities');
                const opportunities = response.data.opportunities || [];
                
                // Separar longs y shorts
                const longs = opportunities.filter(opp => opp.priceChangePercent > 0);
                const shorts = opportunities.filter(opp => opp.priceChangePercent < 0);
                
                // Ordenar por score y tomar los mejores
                const bestLongs = longs
                    .sort((a, b) => calculateRealOpportunityScore(b.symbol, b) - calculateRealOpportunityScore(a.symbol, a))
                    .slice(0, 6);
                
                const bestShorts = shorts
                    .sort((a, b) => calculateRealOpportunityScore(b.symbol, b) - calculateRealOpportunityScore(a.symbol, a))
                    .slice(0, 6);

                // Actualizar estadísticas
                document.getElementById('total-opportunities').textContent = opportunities.length;
                document.getElementById('longs-count').textContent = longs.length;
                document.getElementById('shorts-count').textContent = shorts.length;
                
                const avgScore = opportunities.length > 0 ? 
                    (opportunities.reduce((sum, opp) => sum + calculateRealOpportunityScore(opp.symbol, opp), 0) / opportunities.length * 100).toFixed(1) : 0;
                document.getElementById('avg-score').textContent = avgScore + '%';

                // Crear HTML
                let html = '';
                
                if (bestLongs.length > 0) {
                    html += '<h3 style="color: #4ecdc4; margin: 20px 0;">📈 MEJORES LONGS - FUTURES (' + bestLongs.length + ' oportunidades)</h3>';
                    html += '<div class="opportunities-grid">';
                    bestLongs.forEach(opp => {
                        html += createOpportunityCard(opp);
                    });
                    html += '</div>';
                }

                if (bestShorts.length > 0) {
                    html += '<h3 style="color: #ff6b6b; margin: 20px 0;">📉 MEJORES SHORTS - FUTURES (' + bestShorts.length + ' oportunidades)</h3>';
                    html += '<div class="opportunities-grid">';
                    bestShorts.forEach(opp => {
                        html += createOpportunityCard(opp);
                    });
                    html += '</div>';
                }

                if (opportunities.length === 0) {
                    html = '<div class="error">❌ No se encontraron oportunidades en este momento</div>';
                }

                document.getElementById('opportunities-container').innerHTML = html;
                document.getElementById('opportunities-count').textContent = opportunities.length;
                document.getElementById('last-update').textContent = new Date().toLocaleTimeString();

            } catch (error) {
                console.error('Error cargando oportunidades:', error);
                document.getElementById('opportunities-container').innerHTML = `
                    <div class="error">
                        ❌ Error cargando oportunidades: ${error.message}
                    </div>
                `;
            }
        }

        // Funciones de acción
        function analyzeOpportunity(symbol) {
            alert(`🔍 Analizando ${symbol}...`);
            // Aquí iría la lógica de análisis
        }

        function executeTrade(symbol, direction) {
            alert(`⚡ Ejecutando ${direction} en ${symbol}...`);
            // Aquí iría la lógica de ejecución
        }

        // Cargar datos iniciales
        loadOpportunities();

        // Actualizar cada 30 segundos
        setInterval(loadOpportunities, 30000);
    </script>
</body>
</html>
