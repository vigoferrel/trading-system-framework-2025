<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🧠 Visualizador Neuronal de Recomendaciones - QBTC Banda 46</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 25%, #16213e 50%, #0f3460 75%, #533483 100%);
            color: #ffffff;
            min-height: 100vh;
            overflow-x: hidden;
        }

        .container {
            max-width: 1920px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 30px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }

        .header h1 {
            font-size: 3em;
            background: linear-gradient(45deg, #4ecdc4, #45b7d1, #96ceb4, #feca57, #ff6b6b);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 10px;
            text-shadow: 0 0 30px rgba(78, 205, 196, 0.5);
        }

        .header p {
            font-size: 1.2em;
            color: #b8b8b8;
            margin-bottom: 20px;
        }

        .status-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(0, 0, 0, 0.3);
            padding: 15px 25px;
            border-radius: 15px;
            margin-bottom: 30px;
        }

        .status-item {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        .status-active { background: #00ff00; }
        .status-warning { background: #ffaa00; }
        .status-error { background: #ff0000; }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .controls {
            text-align: center;
            margin-bottom: 30px;
        }

        .btn {
            background: linear-gradient(45deg, #4ecdc4, #45b7d1);
            color: #000;
            border: none;
            padding: 15px 30px;
            border-radius: 10px;
            cursor: pointer;
            font-weight: bold;
            margin: 0 10px;
            transition: all 0.3s ease;
            font-size: 1.1em;
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(78, 205, 196, 0.4);
        }

        .btn.secondary {
            background: linear-gradient(45deg, #ff6b6b, #feca57);
        }

        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(600px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }

        .card {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 20px;
            padding: 25px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
            border-color: rgba(78, 205, 196, 0.3);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .card-title {
            font-size: 1.4em;
            font-weight: bold;
            color: #4ecdc4;
        }

        .card-subtitle {
            font-size: 0.9em;
            color: #888;
        }

        .recommendations-list {
            list-style: none;
        }

        .recommendation-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            margin-bottom: 10px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            border-left: 4px solid #4ecdc4;
        }

        .recommendation-item.strong-buy { border-left-color: #00ff00; }
        .recommendation-item.buy { border-left-color: #4ecdc4; }
        .recommendation-item.hold { border-left-color: #ffaa00; }
        .recommendation-item.sell { border-left-color: #ff6b6b; }
        .recommendation-item.strong-sell { border-left-color: #ff0000; }

        .recommendation-symbol {
            font-weight: bold;
            font-size: 1.2em;
        }

        .recommendation-score {
            font-size: 1.1em;
            font-weight: bold;
        }

        .recommendation-action {
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
            font-size: 0.9em;
        }

        .action-strong-buy { background: #00ff00; color: #000; }
        .action-buy { background: #4ecdc4; color: #000; }
        .action-hold { background: #ffaa00; color: #000; }
        .action-sell { background: #ff6b6b; color: #fff; }
        .action-strong-sell { background: #ff0000; color: #fff; }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }

        .metric-item {
            text-align: center;
            padding: 15px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
        }

        .metric-value {
            font-size: 1.5em;
            font-weight: bold;
            color: #4ecdc4;
        }

        .metric-label {
            font-size: 0.9em;
            color: #888;
            margin-top: 5px;
        }

        .session-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .session-badge {
            padding: 8px 20px;
            border-radius: 20px;
            font-weight: bold;
            text-transform: uppercase;
        }

        .session-asian { background: #ff6b6b; color: #fff; }
        .session-european { background: #4ecdc4; color: #000; }
        .session-american { background: #feca57; color: #000; }
        .session-off-hours { background: #888; color: #fff; }

        .overlaps-list {
            list-style: none;
            margin-top: 15px;
        }

        .overlap-item {
            padding: 10px;
            margin-bottom: 8px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            border-left: 3px solid #feca57;
        }

        .psychological-state {
            text-align: center;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
        }

        .state-fear { background: rgba(255, 0, 0, 0.2); border: 2px solid #ff0000; }
        .state-greed { background: rgba(255, 170, 0, 0.2); border: 2px solid #ffaa00; }
        .state-neutral { background: rgba(78, 205, 196, 0.2); border: 2px solid #4ecdc4; }
        .state-accumulation { background: rgba(0, 255, 0, 0.2); border: 2px solid #00ff00; }

        .state-title {
            font-size: 1.5em;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .state-confidence {
            font-size: 1.2em;
            color: #4ecdc4;
        }

        .chart-container {
            position: relative;
            height: 300px;
            margin-top: 20px;
        }

        .loading {
            text-align: center;
            padding: 50px;
            color: #888;
        }

        .error {
            text-align: center;
            padding: 20px;
            color: #ff6b6b;
            background: rgba(255, 107, 107, 0.1);
            border-radius: 10px;
        }

        @media (max-width: 768px) {
            .dashboard-grid {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .status-bar {
                flex-direction: column;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>🧠 Visualizador Neuronal de Recomendaciones</h1>
            <p>QBTC Banda 46 - Sistema de Análisis Neural Integrado</p>
            <div class="status-bar">
                <div class="status-item">
                    <div class="status-indicator status-active"></div>
                    <span>Neural Engine: ACTIVO</span>
                </div>
                <div class="status-item">
                    <div class="status-indicator status-active"></div>
                    <span>Session Detector: ACTIVO</span>
                </div>
                <div class="status-item">
                    <div class="status-indicator status-active"></div>
                    <span>Psychological Analyzer: ACTIVO</span>
                </div>
                <div class="status-item">
                    <div class="status-indicator status-active"></div>
                    <span>Quantum Processor: ACTIVO</span>
                </div>
                <div class="status-item">
                    <span>Última actualización: <span id="lastUpdate">--</span></span>
                </div>
            </div>
        </div>

        <!-- Controls -->
        <div class="controls">
            <button class="btn" onclick="refreshAllData()">🔄 Actualizar Datos</button>
            <button class="btn secondary" id="autoRefreshBtn" onclick="toggleAutoRefresh()">▶️ Iniciar Auto-refresh</button>
            <button class="btn" onclick="exportData()">📊 Exportar Datos</button>
        </div>

        <!-- Dashboard Grid -->
        <div class="dashboard-grid">
            <!-- Top Recommendations -->
            <div class="card">
                <div class="card-header">
                    <div>
                        <div class="card-title">🏆 Top Recomendaciones</div>
                        <div class="card-subtitle">Ranking de oportunidades neuronales</div>
                    </div>
                </div>
                <div id="recommendationsContent">
                    <div class="loading">Cargando recomendaciones...</div>
                </div>
            </div>

            <!-- Session Neural State -->
            <div class="card">
                <div class="card-header">
                    <div>
                        <div class="card-title">🌍 Estado de Sesión Neural</div>
                        <div class="card-subtitle">Análisis de sesiones globales</div>
                    </div>
                </div>
                <div id="sessionContent">
                    <div class="loading">Cargando estado de sesión...</div>
                </div>
            </div>

            <!-- Psychological Market State -->
            <div class="card">
                <div class="card-header">
                    <div>
                        <div class="card-title">🎨 Estado Psicológico del Mercado</div>
                        <div class="card-subtitle">Análisis Leonardo-Feynman</div>
                    </div>
                </div>
                <div id="psychologicalContent">
                    <div class="loading">Cargando estado psicológico...</div>
                </div>
            </div>

            <!-- Quantum Metrics -->
            <div class="card">
                <div class="card-header">
                    <div>
                        <div class="card-title">⚛️ Métricas Cuánticas</div>
                        <div class="card-subtitle">Estado cuántico del sistema</div>
                    </div>
                </div>
                <div id="quantumContent">
                    <div class="loading">Cargando métricas cuánticas...</div>
                </div>
            </div>

            <!-- Options Analysis -->
            <div class="card">
                <div class="card-header">
                    <div>
                        <div class="card-title">🎲 Análisis de Opciones Cuánticas</div>
                        <div class="card-subtitle">Estrategias cuánticas de opciones</div>
                    </div>
                </div>
                <div id="optionsContent">
                    <div class="loading">Cargando análisis de opciones...</div>
                </div>
            </div>

            <!-- Unified Neural Score -->
            <div class="card">
                <div class="card-header">
                    <div>
                        <div class="card-title">📊 Score Neuronal Unificado</div>
                        <div class="card-subtitle">Score integrado de todos los sistemas</div>
                    </div>
                </div>
                <div id="unifiedContent">
                    <div class="loading">Cargando score unificado...</div>
                </div>
            </div>
        </div>

        <!-- NUEVA SECCIÓN: CEREBRO MAESTRO LLM -->
        <div class="section">
            <div class="card">
                <div class="card-header">
                    <div>
                        <div class="card-title">🧠 Cerebro Maestro LLM</div>
                        <div class="card-subtitle">Google Gemini Flash 1.5 - Resolución de Contradicciones</div>
                    </div>
                </div>
                <div id="llmBrainContent">
                    <div class="loading">Conectando con el cerebro maestro...</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Configuración
        const API_BASE = 'http://localhost:4606';
        let autoRefresh = false;
        let updateInterval = 30000; // 30 segundos

        // Inicialización
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🧠 Visualizador Neuronal iniciado');
            refreshAllData();
        });

        // Funciones principales
        async function refreshAllData() {
            console.log('🔄 Actualizando todos los datos...');
            
            try {
                await Promise.all([
                    loadRecommendations(),
                    loadSessionState(),
                    loadPsychologicalState(),
                    loadQuantumMetrics(),
                    loadOptionsAnalysis(),
                    loadUnifiedScore(),
                    loadLLMBrain()
                ]);
                
                document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString();
                
            } catch (error) {
                console.error('Error actualizando datos:', error);
            }
        }

        async function loadRecommendations() {
            try {
                const response = await fetch(`${API_BASE}/api/neural-recommendations`);
                const data = await response.json();
                
                if (data.success && data.data.top_recommendations) {
                    displayRecommendations(data.data.top_recommendations);
                } else {
                    document.getElementById('recommendationsContent').innerHTML = 
                        '<div class="error">No hay recomendaciones disponibles</div>';
                }
            } catch (error) {
                document.getElementById('recommendationsContent').innerHTML = 
                    '<div class="error">Error cargando recomendaciones</div>';
            }
        }

        async function loadSessionState() {
            try {
                const response = await fetch(`${API_BASE}/api/session-state`);
                const data = await response.json();
                
                if (data.success) {
                    displaySessionState(data.data);
                } else {
                    document.getElementById('sessionContent').innerHTML = 
                        '<div class="error">No hay datos de sesión disponibles</div>';
                }
            } catch (error) {
                document.getElementById('sessionContent').innerHTML = 
                    '<div class="error">Error cargando estado de sesión</div>';
            }
        }

        async function loadPsychologicalState() {
            try {
                const response = await fetch(`${API_BASE}/api/psychological-state`);
                const data = await response.json();
                
                if (data.success) {
                    displayPsychologicalState(data.data);
                } else {
                    document.getElementById('psychologicalContent').innerHTML = 
                        '<div class="error">No hay datos psicológicos disponibles</div>';
                }
            } catch (error) {
                document.getElementById('psychologicalContent').innerHTML = 
                    '<div class="error">Error cargando estado psicológico</div>';
            }
        }

        async function loadQuantumMetrics() {
            try {
                const response = await fetch(`${API_BASE}/api/quantum-metrics`);
                const data = await response.json();
                
                if (data.success) {
                    displayQuantumMetrics(data.data);
                } else {
                    document.getElementById('quantumContent').innerHTML = 
                        '<div class="error">No hay métricas cuánticas disponibles</div>';
                }
            } catch (error) {
                document.getElementById('quantumContent').innerHTML = 
                    '<div class="error">Error cargando métricas cuánticas</div>';
            }
        }

        async function loadOptionsAnalysis() {
            try {
                const response = await fetch(`${API_BASE}/api/options-analysis`);
                const data = await response.json();
                
                if (data.success) {
                    displayOptionsAnalysis(data.data);
                } else {
                    document.getElementById('optionsContent').innerHTML = 
                        '<div class="error">No hay análisis de opciones disponible</div>';
                }
            } catch (error) {
                document.getElementById('optionsContent').innerHTML = 
                    '<div class="error">Error cargando análisis de opciones</div>';
            }
        }

        async function loadUnifiedScore() {
            try {
                const response = await fetch(`${API_BASE}/api/unified-score`);
                const data = await response.json();
                
                if (data.success) {
                    displayUnifiedScore(data.data);
                } else {
                    document.getElementById('unifiedContent').innerHTML = 
                        '<div class="error">No hay score unificado disponible</div>';
                }
            } catch (error) {
                document.getElementById('unifiedContent').innerHTML = 
                    '<div class="error">Error cargando score unificado</div>';
            }
        }

        // Funciones de visualización
        function displayRecommendations(recommendations) {
            const container = document.getElementById('recommendationsContent');
            
            if (!recommendations || recommendations.length === 0) {
                container.innerHTML = '<div class="error">No hay recomendaciones disponibles</div>';
                return;
            }

            const html = `
                <ul class="recommendations-list">
                    ${recommendations.map(rec => `
                        <li class="recommendation-item ${getActionClass(rec.action)}">
                            <div>
                                <div class="recommendation-symbol">${rec.symbol}</div>
                                <div style="font-size: 0.9em; color: #888;">Rank #${rec.rank}</div>
                            </div>
                            <div style="text-align: right;">
                                <div class="recommendation-score">${rec.score}</div>
                                <div class="recommendation-action ${getActionClass(rec.action)}">${rec.action}</div>
                            </div>
                        </li>
                    `).join('')}
                </ul>
            `;
            
            container.innerHTML = html;
        }

        function displaySessionState(sessionData) {
            const container = document.getElementById('sessionContent');
            
            const sessionClass = `session-${sessionData.primary_session}`;
            const sessionName = sessionData.primary_session.toUpperCase();
            
            const html = `
                <div class="session-info">
                    <div>
                        <div class="session-badge ${sessionClass}">${sessionName}</div>
                        <div style="margin-top: 10px; font-size: 0.9em; color: #888;">
                            Intensidad: ${(sessionData.session_intensity * 100).toFixed(1)}%
                        </div>
                    </div>
                    <div style="text-align: right;">
                        <div style="font-size: 1.2em; color: #4ecdc4;">
                            ${sessionData.current_time.utc_hour}:00 UTC
                        </div>
                        <div style="font-size: 0.9em; color: #888;">
                            Día ${sessionData.current_time.utc_day}
                        </div>
                    </div>
                </div>
                
                <div class="metrics-grid">
                    <div class="metric-item">
                        <div class="metric-value">${(sessionData.market_liquidity_factor * 100).toFixed(1)}%</div>
                        <div class="metric-label">Liquidez</div>
                    </div>
                    <div class="metric-item">
                        <div class="metric-value">${(sessionData.volatility_expectation * 100).toFixed(1)}%</div>
                        <div class="metric-label">Volatilidad</div>
                    </div>
                </div>
                
                <div style="margin-top: 20px;">
                    <div style="font-weight: bold; margin-bottom: 10px;">Estrategias Óptimas:</div>
                    <div style="display: flex; flex-wrap: wrap; gap: 8px;">
                        ${sessionData.optimal_strategies.map(strategy => 
                            `<span style="background: rgba(78, 205, 196, 0.2); padding: 5px 10px; border-radius: 15px; font-size: 0.9em;">${strategy}</span>`
                        ).join('')}
                    </div>
                </div>
                
                ${sessionData.overlaps.length > 0 ? `
                    <div style="margin-top: 20px;">
                        <div style="font-weight: bold; margin-bottom: 10px;">Overlaps Críticos:</div>
                        <ul class="overlaps-list">
                            ${sessionData.overlaps.map(overlap => `
                                <li class="overlap-item">
                                    <div style="font-weight: bold;">${overlap.type}</div>
                                    <div style="font-size: 0.9em; color: #888;">
                                        Intensidad: ${(overlap.intensity * 100).toFixed(1)}%
                                    </div>
                                </li>
                            `).join('')}
                        </ul>
                    </div>
                ` : ''}
            `;
            
            container.innerHTML = html;
        }

        function displayPsychologicalState(psychData) {
            const container = document.getElementById('psychologicalContent');
            
            const stateClass = `state-${psychData.current_state.toLowerCase()}`;
            
            const html = `
                <div class="psychological-state ${stateClass}">
                    <div class="state-title">${psychData.current_state}</div>
                    <div class="state-confidence">Confianza: ${(psychData.confidence * 100).toFixed(1)}%</div>
                    <div style="margin-top: 15px; font-style: italic; color: #ccc;">
                        "${psychData.psychology_note}"
                    </div>
                </div>
                
                <div style="margin-top: 20px;">
                    <div style="font-weight: bold; margin-bottom: 15px;">Señales Medibles:</div>
                    <div class="metrics-grid">
                        <div class="metric-item">
                            <div class="metric-value">${(psychData.measurable_signals.funding_rate * 100).toFixed(2)}%</div>
                            <div class="metric-label">Funding Rate</div>
                        </div>
                        <div class="metric-item">
                            <div class="metric-value">${psychData.measurable_signals.volume_spike.toFixed(2)}x</div>
                            <div class="metric-label">Volume Spike</div>
                        </div>
                        <div class="metric-item">
                            <div class="metric-value">${(psychData.measurable_signals.volatility * 100).toFixed(1)}%</div>
                            <div class="metric-label">Volatilidad</div>
                        </div>
                        <div class="metric-item">
                            <div class="metric-value">${psychData.measurable_signals.open_interest.toFixed(2)}</div>
                            <div class="metric-label">Open Interest</div>
                        </div>
                    </div>
                </div>
                
                <div style="margin-top: 20px; text-align: center;">
                    <div style="font-weight: bold; margin-bottom: 10px;">Acción Recomendada:</div>
                    <div class="recommendation-action ${getActionClass(psychData.recommended_action)}">
                        ${psychData.recommended_action}
                    </div>
                </div>
            `;
            
            container.innerHTML = html;
        }

        function displayQuantumMetrics(quantumData) {
            const container = document.getElementById('quantumContent');
            
            const html = `
                <div class="metrics-grid">
                    <div class="metric-item">
                        <div class="metric-value">${(quantumData.coherence * 100).toFixed(1)}%</div>
                        <div class="metric-label">Coherencia</div>
                    </div>
                    <div class="metric-item">
                        <div class="metric-value">${(quantumData.consciousness * 100).toFixed(1)}%</div>
                        <div class="metric-label">Consciencia</div>
                    </div>
                    <div class="metric-item">
                        <div class="metric-value">${(quantumData.entanglement * 100).toFixed(1)}%</div>
                        <div class="metric-label">Entrelazamiento</div>
                    </div>
                    <div class="metric-item">
                        <div class="metric-value">${(quantumData.superposition * 100).toFixed(1)}%</div>
                        <div class="metric-label">Superposición</div>
                    </div>
                    <div class="metric-item">
                        <div class="metric-value">${(quantumData.tunneling * 100).toFixed(1)}%</div>
                        <div class="metric-label">Tunelamiento</div>
                    </div>
                    <div class="metric-item">
                        <div class="metric-value">${(quantumData.optimal_leverage * 100).toFixed(1)}%</div>
                        <div class="metric-label">Leverage Óptimo</div>
                    </div>
                </div>
                
                <div style="margin-top: 20px;">
                    <div style="font-weight: bold; margin-bottom: 10px;">Resonancia Lambda 888:</div>
                    <div style="background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 10px;">
                        <div>Fuerza: ${(quantumData.lambda_resonance.strength * 100).toFixed(1)}%</div>
                        <div>Frecuencia: ${quantumData.lambda_resonance.frequency} Hz</div>
                        <div>Amplitud: ${(quantumData.lambda_resonance.amplitude * 100).toFixed(1)}%</div>
                    </div>
                </div>
                
                <div style="margin-top: 20px;">
                    <div style="font-weight: bold; margin-bottom: 10px;">Prime 7919:</div>
                    <div style="background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 10px;">
                        <div>Energía de Transformación: ${(quantumData.prime_7919.transformation_energy * 100).toFixed(1)}%</div>
                        <div>Ciclos Primos: ${quantumData.prime_7919.prime_cycles}</div>
                        <div>Alineación Fibonacci: ${(quantumData.prime_7919.fibonacci_alignment * 100).toFixed(1)}%</div>
                    </div>
                </div>
            `;
            
            container.innerHTML = html;
        }

        function displayOptionsAnalysis(optionsData) {
            const container = document.getElementById('optionsContent');
            
            const html = `
                <div style="margin-bottom: 20px;">
                    <div style="font-weight: bold; margin-bottom: 10px;">Estrategias Cuánticas:</div>
                    ${optionsData.strategies.map(strategy => `
                        <div style="background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 10px; margin-bottom: 10px;">
                            <div style="font-weight: bold; color: #4ecdc4;">${strategy.name}</div>
                            <div style="display: flex; justify-content: space-between; margin-top: 10px;">
                                <span>Probabilidad: ${(strategy.probability * 100).toFixed(1)}%</span>
                                <span>Factor Cuántico: ${(strategy.quantum_factor * 100).toFixed(1)}%</span>
                            </div>
                            <div style="margin-top: 10px; font-size: 0.9em; color: #888;">
                                Strikes: ${strategy.optimal_strikes.join(', ')} | 
                                Expirations: ${strategy.optimal_expirations.join(', ')}
                            </div>
                        </div>
                    `).join('')}
                </div>
                
                <div style="margin-top: 20px;">
                    <div style="font-weight: bold; margin-bottom: 10px;">Estado Cuántico:</div>
                    <div class="metrics-grid">
                        <div class="metric-item">
                            <div class="metric-value">${(optionsData.quantum_state.coherence * 100).toFixed(1)}%</div>
                            <div class="metric-label">Coherencia</div>
                        </div>
                        <div class="metric-item">
                            <div class="metric-value">${(optionsData.quantum_state.entanglement * 100).toFixed(1)}%</div>
                            <div class="metric-label">Entrelazamiento</div>
                        </div>
                        <div class="metric-item">
                            <div class="metric-value">${(optionsData.quantum_state.superposition * 100).toFixed(1)}%</div>
                            <div class="metric-label">Superposición</div>
                        </div>
                    </div>
                </div>
            `;
            
            container.innerHTML = html;
        }

        function displayUnifiedScore(unifiedData) {
            const container = document.getElementById('unifiedContent');
            
            const scorePercent = (unifiedData.unified_score * 100).toFixed(1);
            const confidencePercent = (unifiedData.confidence * 100).toFixed(1);
            
            const html = `
                <div style="text-align: center; margin-bottom: 30px;">
                    <div style="font-size: 3em; font-weight: bold; color: #4ecdc4;">${scorePercent}%</div>
                    <div style="font-size: 1.2em; color: #888;">Score Neuronal Unificado</div>
                    <div style="margin-top: 10px;">
                        <div class="recommendation-action ${getActionClass(unifiedData.recommendation)}">
                            ${unifiedData.recommendation}
                        </div>
                    </div>
                    <div style="margin-top: 10px; color: #888;">
                        Confianza: ${confidencePercent}%
                    </div>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <div style="font-weight: bold; margin-bottom: 15px;">Breakdown por Factor:</div>
                    <div class="metrics-grid">
                        <div class="metric-item">
                            <div class="metric-value">${(unifiedData.breakdown.session_score * 100).toFixed(1)}%</div>
                            <div class="metric-label">Sesión (${(unifiedData.weights.session * 100).toFixed(0)}%)</div>
                        </div>
                        <div class="metric-item">
                            <div class="metric-value">${(unifiedData.breakdown.psychological_score * 100).toFixed(1)}%</div>
                            <div class="metric-label">Psicológico (${(unifiedData.weights.psychological * 100).toFixed(0)}%)</div>
                        </div>
                        <div class="metric-item">
                            <div class="metric-value">${(unifiedData.breakdown.quantum_score * 100).toFixed(1)}%</div>
                            <div class="metric-label">Cuántico (${(unifiedData.weights.quantum * 100).toFixed(0)}%)</div>
                        </div>
                        <div class="metric-item">
                            <div class="metric-value">${(unifiedData.breakdown.options_score * 100).toFixed(1)}%</div>
                            <div class="metric-label">Opciones (${(unifiedData.weights.options * 100).toFixed(0)}%)</div>
                        </div>
                    </div>
                </div>
            `;
            
            container.innerHTML = html;
        }

        // FUNCIONES DEL CEREBRO MAESTRO LLM
        async function loadLLMBrain() {
            try {
                const [decisionResponse, statusResponse] = await Promise.all([
                    fetch(`${API_BASE}/api/llm-unified-decision`),
                    fetch(`${API_BASE}/api/llm-brain-status`)
                ]);
                
                const decisionData = await decisionResponse.json();
                const statusData = await statusResponse.json();
                
                if (decisionData.success && statusData.success) {
                    displayLLMBrain(decisionData.data, statusData.data);
                } else {
                    document.getElementById('llmBrainContent').innerHTML = 
                        '<div class="error">Error conectando con el cerebro maestro LLM</div>';
                }
            } catch (error) {
                document.getElementById('llmBrainContent').innerHTML = 
                    '<div class="error">Error cargando cerebro maestro LLM</div>';
            }
        }

        function displayLLMBrain(decisionData, statusData) {
            const container = document.getElementById('llmBrainContent');
            
            const confidencePercent = decisionData.confidence || 0;
            const statusClass = statusData.status === 'ACTIVE' ? 'status-active' : 'status-error';
            
            const html = `
                <div style="margin-bottom: 20px;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                        <div style="font-weight: bold; font-size: 1.1em;">Decisión Unificada del Cerebro Maestro</div>
                        <div class="status-indicator ${statusClass}"></div>
                    </div>
                    
                    <div style="text-align: center; margin-bottom: 20px;">
                        <div style="font-size: 2.5em; font-weight: bold; color: #feca57;">${decisionData.final_decision}</div>
                        <div style="font-size: 1.1em; color: #888; margin-top: 5px;">
                            Confianza: ${confidencePercent}%
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 15px;">
                        <div style="font-weight: bold; margin-bottom: 10px;">Razonamiento:</div>
                        <div style="background: rgba(255,255,255,0.05); padding: 15px; border-radius: 10px; font-style: italic;">
                            "${decisionData.reasoning || 'Análisis neural unificado por cerebro maestro'}"
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 15px;">
                        <div style="font-weight: bold; margin-bottom: 10px;">Factores Clave:</div>
                        <div style="display: flex; flex-wrap: wrap; gap: 8px;">
                            ${(decisionData.key_factors || []).map(factor => 
                                `<span style="background: rgba(78, 205, 196, 0.2); padding: 5px 10px; border-radius: 15px; font-size: 0.9em;">${factor}</span>`
                            ).join('')}
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 15px;">
                        <div style="font-weight: bold; margin-bottom: 10px;">Contradicciones Resueltas:</div>
                        <div style="background: rgba(255,255,255,0.05); padding: 10px; border-radius: 8px; font-size: 0.9em;">
                            ${decisionData.contradictions_resolved || 'No se detectaron contradicciones'}
                        </div>
                    </div>
                </div>
                
                <div style="border-top: 1px solid rgba(255,255,255,0.1); padding-top: 15px;">
                    <div style="font-weight: bold; margin-bottom: 10px;">Estado del Cerebro Maestro:</div>
                    <div class="metrics-grid">
                        <div class="metric-item">
                            <div class="metric-value">${statusData.llm_provider}</div>
                            <div class="metric-label">Proveedor LLM</div>
                        </div>
                        <div class="metric-item">
                            <div class="metric-value">${statusData.total_decisions || 0}</div>
                            <div class="metric-label">Decisiones Totales</div>
                        </div>
                        <div class="metric-item">
                            <div class="metric-value">${statusData.llm_calls || 0}</div>
                            <div class="metric-label">Llamadas LLM</div>
                        </div>
                        <div class="metric-item">
                            <div class="metric-value">${statusData.cache_hits || 0}</div>
                            <div class="metric-label">Cache Hits</div>
                        </div>
                    </div>
                    
                    <div style="margin-top: 15px;">
                        <div style="font-weight: bold; margin-bottom: 10px;">Características:</div>
                        <div style="display: flex; flex-wrap: wrap; gap: 5px;">
                            ${(statusData.features || []).map(feature => 
                                `<span style="background: rgba(69, 183, 209, 0.2); padding: 3px 8px; border-radius: 10px; font-size: 0.8em;">${feature}</span>`
                            ).join('')}
                        </div>
                    </div>
                </div>
            `;
            
            container.innerHTML = html;
        }

        // Funciones auxiliares
        function getActionClass(action) {
            const actionMap = {
                'STRONG_BUY': 'strong-buy',
                'BUY': 'buy',
                'HOLD': 'hold',
                'SELL': 'sell',
                'STRONG_SELL': 'strong-sell'
            };
            return actionMap[action] || 'hold';
        }

        function toggleAutoRefresh() {
            const btn = document.getElementById('autoRefreshBtn');
            if (autoRefresh) {
                autoRefresh = false;
                btn.textContent = '▶️ Iniciar Auto-refresh';
            } else {
                autoRefresh = true;
                btn.textContent = '⏸️ Detener Auto-refresh';
                startAutoRefresh();
            }
        }

        function startAutoRefresh() {
            if (autoRefresh) {
                setTimeout(() => {
                    refreshAllData();
                    startAutoRefresh();
                }, updateInterval);
            }
        }

        function exportData() {
            // Función para exportar datos (implementación futura)
            alert('Función de exportación en desarrollo');
        }
    </script>
</body>
</html>
