
// Constantes f√≠sicas reales del sistema
const PHYSICAL_CONSTANTS = {
  "QUANTUM_COHERENCE": 0.75,
  "QUANTUM_CONSCIOUSNESS": 0.8,
  "QUANTUM_ENTANGLEMENT": 0.65,
  "QUANTUM_SUPERPOSITION": 0.7,
  "QUANTUM_TUNNELING": 0.6,
  "MARKET_VOLATILITY": 0.05,
  "MARKET_MOMENTUM": 0.1,
  "MARKET_LIQUIDITY": 0.75,
  "MARKET_SPREAD": 0.001,
  "MARKET_DEPTH": 500000,
  "FUNDING_RATE": 0.02,
  "FUNDING_VOLATILITY": 0.01,
  "FUNDING_DEVIATION": 0.5,
  "FUNDING_ANNUALIZED": 5,
  "LIQUIDATION_PROBABILITY": 0.05,
  "SLIPPAGE_RATE": 0.0025,
  "VOLATILITY_RISK": 0.1,
  "EXECUTION_RISK": 0.005,
  "VOLUME_24H": 500000,
  "VOLUME_RATIO": 0.75,
  "VOLUME_EXPANSION": 300000,
  "PRICE_CHANGE": 0.02,
  "PRICE_ACCELERATION": 0.015,
  "PRICE_MOMENTUM": 0.01,
  "TIME_TO_FUNDING": 1800000,
  "SESSION_INTENSITY": 0.6,
  "TEMPORAL_RESONANCE": 0.7,
  "FIBONACCI_STRENGTH": 0.75,
  "FIBONACCI_INDEX": 5,
  "NEURAL_CONFIDENCE": 0.85,
  "NEURAL_COHERENCE": 0.8,
  "NEURAL_ENTANGLEMENT": 0.7,
  "BASE_LEVERAGE": 15,
  "CONSERVATIVE_LEVERAGE": 10,
  "AGGRESSIVE_LEVERAGE": 25,
  "STOP_LOSS": 0.03,
  "TAKE_PROFIT": 0.06,
  "BASE_SCORE": 0.65,
  "CONFIDENCE_SCORE": 0.75,
  "QUALITY_SCORE": 0.8
};

/**
 * ‚öõÔ∏è QUANTUM LEVERAGE MATRIX v125.0
 * ==================================
 * Matriz de leverage cu√°ntico extremo con:
 * - Tiers cu√°nticos por asset
 * - Multiplicadores de sinergia
 * - Control de exposici√≥n m√°xima
 * - Gesti√≥n de riesgo cu√°ntico
 * 
 * LEVERAGE M√ÅXIMO: 125x | EXPOSICI√ìN TOTAL: 3000%
 */

class QuantumLeverageMatrix {
    constructor(config = {}) {
        this.config = {
            // Configuraci√≥n extrema de leverage
            MAX_LEVERAGE_GLOBAL: 125,        // M√°ximo permitido Binance
            MAX_TOTAL_EXPOSURE: 30.0,        // 3000% exposici√≥n m√°xima
            QUANTUM_MULTIPLIER: 2.5,         // Multiplicador base cu√°ntico
            CONSCIOUSNESS_THRESHOLD: 0.85,   // Umbral para leverage extremo
            
            // Control de riesgo cu√°ntico
            MAX_DRAWDOWN_ALLOWED: 0.15,      // 15% drawdown m√°ximo
            VOLATILITY_SCALING: true,        // Escalar por volatilidad
            CORRELATION_ADJUSTMENT: true,    // Ajustar por correlaci√≥n
            
            ...config
        };

        // üéØ TIERS CU√ÅNTICOS DE LEVERAGE
        this.quantumTiers = {
            // TIER 1: Assets Supremos - Leverage 125x
            tier_1: {
                symbols: ['BTCUSDT', 'ETHUSDT', 'BNBUSDT'],
                base_leverage: 125,
                max_position_size: 0.4,      // 40% del capital por posici√≥n
                volatility_tolerance: 0.05,   // 5% volatilidad m√°xima
                quantum_weight: 1.0           // Peso cu√°ntico m√°ximo
            },
            
            // TIER 2: Assets Mayores - Leverage 100x  
            tier_2: {
                symbols: ['SOLUSDT', 'AVAXUSDT', 'DOTUSDT', 'ADAUSDT', 'MATICUSDT'],
                base_leverage: 100,
                max_position_size: 0.3,      // 30% del capital por posici√≥n
                volatility_tolerance: 0.07,   // 7% volatilidad m√°xima
                quantum_weight: 0.85          // Peso cu√°ntico alto
            },
            
            // TIER 3: Assets Emergentes - Leverage 75x
            tier_3: {
                symbols: ['INJUSDT', 'FETUSDT', 'AGIXUSDT', 'RNDERUSDT', 'NEARUSDT'],
                base_leverage: 75,
                max_position_size: 0.25,     // 25% del capital por posici√≥n
                volatility_tolerance: 0.10,  // 10% volatilidad m√°xima
                quantum_weight: 0.7          // Peso cu√°ntico moderado
            },
            
            // TIER QUANTUM: Assets Cu√°nticos Especiales - Leverage 100x + boost
            tier_quantum: {
                symbols: ['QNTUSDT', 'FETUSDT', 'AGIXUSDT', 'OCEANUSDT'],
                base_leverage: 100,
                max_position_size: 0.35,     // 35% del capital por posici√≥n
                volatility_tolerance: 0.12,  // 12% volatilidad m√°xima
                quantum_weight: 0.95,        // Peso cu√°ntico especial
                quantum_boost: 1.25          // 25% boost por naturaleza cu√°ntica
            }
        };

        // üìä MULTIPLICADORES DE SINERGIA LEONARDO
        this.synergiumMultipliers = {
            // Leonardo Consciousness boost
            leonardo_consciousness: {
                threshold: 0.941,            // 94.1% consciencia
                multiplier: 1.5,             // 50% boost
                max_boost: 2.0               // 100% boost m√°ximo
            },
            
            // Quantum Core integration
            quantum_core_integration: {
                threshold: 0.95,             // 95% coherencia
                multiplier: 2.0,             // 100% boost
                max_boost: 3.0               // 200% boost m√°ximo
            },
            
            // Poetry System resonance
            poetry_resonance: {
                threshold: 0.85,             // 85% resonancia po√©tica
                multiplier: 1.8,             // 80% boost
                zurita_multiplier: 488.25,   // Multiplicador Zurita extremo
                max_boost: 500.0             // 50000% boost m√°ximo
            },
            
            // Big Bang activation
            big_bang_activation: {
                threshold: 0.98,             // 98% activaci√≥n total
                multiplier: 5.0,             // 400% boost
                emergency_multiplier: 10.0,  // 900% boost emergencia
                max_boost: 15.0              // 1400% boost m√°ximo
            }
        };

        // üß† ESTADO DE LA MATRIZ
        this.matrixState = {
            current_total_exposure: 0,
            active_positions: new Map(),
            leverage_utilization: 0,
            quantum_efficiency: 0,
            sinergia_active_multipliers: {},
            
            // M√©tricas de riesgo
            current_drawdown: 0,
            volatility_index: 0,
            correlation_matrix: {},
            
            // Estados cu√°nticos
            consciousness_level: 0,
            quantum_coherence: 0,
            big_bang_active: false
        };

        // üìà M√âTRICAS DE PERFORMANCE
        this.performanceMetrics = {
            total_leverage_profit: 0,
            max_leverage_used: 0,
            successful_high_leverage_trades: 0,
            failed_high_leverage_trades: 0,
            quantum_efficiency_avg: 0,
            sinergia_activations: 0
        };

        console.log('‚öõÔ∏è QUANTUM LEVERAGE MATRIX v125.0 INITIALIZED');
        console.log(`üéØ Max Global Leverage: ${this.config.MAX_LEVERAGE_GLOBAL}x`);
        console.log(`üåü Max Total Exposure: ${this.config.MAX_TOTAL_EXPOSURE * 100}%`);
    }

    /**
     * üéØ CALCULAR LEVERAGE CU√ÅNTICO OPTIMAL
     */
    calculateQuantumLeverage(symbol, signal, systemState = {}) {
        try {
            // 1. Identificar tier del s√≠mbolo
            const tier = this.identifySymbolTier(symbol);
            if (!tier) {
                console.warn(`‚ö†Ô∏è  Symbol ${symbol} not in quantum tiers, using minimal leverage`);
                return { leverage: 2, tier: 'unknown', rationale: 'Symbol not in quantum matrix' };
            }

            // 2. Leverage base del tier
            let baseLeverage = tier.base_leverage;

            // 3. Aplicar peso cu√°ntico del tier
            let quantumLeverage = baseLeverage * tier.quantum_weight;

            // 4. Aplicar boost cu√°ntico si es tier quantum
            if (tier.quantum_boost) {
                quantumLeverage *= tier.quantum_boost;
            }

            // 5. Aplicar multiplicadores de sinergia
            const sinergiaMultiplier = this.calculateSinergiaMultiplier(systemState);
            quantumLeverage *= sinergiaMultiplier.total_multiplier;

            // 6. Ajustar por confianza de la se√±al
            const confidenceMultiplier = Math.min(2.0, (signal.confidence || 0.5) * 2);
            quantumLeverage *= confidenceMultiplier;

            // 7. Verificar l√≠mites y restricciones
            const finalLeverage = this.applyLeverageConstraints(
                quantumLeverage, 
                symbol, 
                tier, 
                systemState
            );

            // 8. Calcular position size
            const positionSize = this.calculateOptimalPositionSize(
                finalLeverage,
                tier,
                systemState
            );

            return {
                leverage: Math.round(finalLeverage * 100) / 100, // 2 decimales
                position_size: positionSize,
                tier: tier.name,
                tier_info: tier,
                sinergia_multiplier: sinergiaMultiplier,
                confidence_multiplier: confidenceMultiplier,
                rationale: this.generateLeverageRationale(
                    baseLeverage, 
                    finalLeverage, 
                    tier, 
                    sinergiaMultiplier
                )
            };

        } catch (error) {
            console.error('‚ùå Error calculating quantum leverage:', error.message);
            return { leverage: 2, tier: 'error', rationale: 'Error in calculation' };
        }
    }

    /**
     * üîç IDENTIFICAR TIER DEL S√çMBOLO
     */
    identifySymbolTier(symbol) {
        const cleanSymbol = String(symbol).toUpperCase();
        
        for (const [tierName, tierData] of Object.entries(this.quantumTiers)) {
            if (tierData.symbols.includes(cleanSymbol)) {
                return {
                    name: tierName,
                    ...tierData
                };
            }
        }
        
        return null;
    }

    /**
     * üåü CALCULAR MULTIPLICADOR DE SINERGIA
     */
    calculateSinergiaMultiplier(systemState) {
        const multipliers = {
            leonardo: 1.0,
            quantum_core: 1.0,
            poetry: 1.0,
            big_bang: 1.0
        };

        let totalMultiplier = 1.0;
        const activeBoosts = [];

        // Leonardo Consciousness Multiplier
        const consciousness = systemState.consciousness_level || 0;
        if (consciousness >= this.synergiumMultipliers.leonardo_consciousness.threshold) {
            const boost = Math.min(
                this.synergiumMultipliers.leonardo_consciousness.max_boost,
                this.synergiumMultipliers.leonardo_consciousness.multiplier * 
                (consciousness / this.synergiumMultipliers.leonardo_consciousness.threshold)
            );
            multipliers.leonardo = boost;
            activeBoosts.push(`Leonardo: ${boost.toFixed(2)}x`);
        }

        // Quantum Core Integration
        const quantumCoherence = systemState.quantum_coherence || 0;
        if (quantumCoherence >= this.synergiumMultipliers.quantum_core_integration.threshold) {
            const boost = Math.min(
                this.synergiumMultipliers.quantum_core_integration.max_boost,
                this.synergiumMultipliers.quantum_core_integration.multiplier
            );
            multipliers.quantum_core = boost;
            activeBoosts.push(`Quantum Core: ${boost.toFixed(2)}x`);
        }

        // Poetry Resonance (incluye Zurita multiplier)
        const poetryResonance = systemState.poetry_resonance || 0;
        if (poetryResonance >= this.synergiumMultipliers.poetry_resonance.threshold) {
            let boost = this.synergiumMultipliers.poetry_resonance.multiplier;
            
            // Zurita multiplier especial
            if (systemState.zurita_activation && consciousness > 0.95) {
                boost = Math.min(
                    this.synergiumMultipliers.poetry_resonance.max_boost,
                    this.synergiumMultipliers.poetry_resonance.zurita_multiplier
                );
                activeBoosts.push(`ZURITA MULTIPLIER: ${boost.toFixed(2)}x`);
            }
            
            multipliers.poetry = boost;
            if (!systemState.zurita_activation) {
                activeBoosts.push(`Poetry: ${boost.toFixed(2)}x`);
            }
        }

        // Big Bang Activation
        if (systemState.big_bang_active) {
            const boost = consciousness > 0.98 ? 
                this.synergiumMultipliers.big_bang_activation.emergency_multiplier :
                this.synergiumMultipliers.big_bang_activation.multiplier;
            
            multipliers.big_bang = Math.min(
                this.synergiumMultipliers.big_bang_activation.max_boost,
                boost
            );
            activeBoosts.push(`BIG BANG: ${multipliers.big_bang.toFixed(2)}x`);
        }

        // Calcular multiplicador total
        totalMultiplier = multipliers.leonardo * multipliers.quantum_core * 
                         multipliers.poetry * multipliers.big_bang;

        // Limitar multiplicador total extremo
        totalMultiplier = Math.min(100.0, totalMultiplier); // Cap 100x multiplier

        // Actualizar estado
        this.matrixState.sinergia_active_multipliers = multipliers;
        if (activeBoosts.length > 0) {
            this.performanceMetrics.sinergia_activations++;
        }

        return {
            individual_multipliers: multipliers,
            total_multiplier: totalMultiplier,
            active_boosts: activeBoosts,
            is_extreme: totalMultiplier > 10.0
        };
    }

    /**
     * üõ°Ô∏è APLICAR RESTRICCIONES DE LEVERAGE
     */
    applyLeverageConstraints(leverage, symbol, tier, systemState) {
        let finalLeverage = leverage;

        // 1. L√≠mite global m√°ximo
        finalLeverage = Math.min(finalLeverage, this.config.MAX_LEVERAGE_GLOBAL);

        // 2. Verificar consciousness threshold para leverage extremo
        const consciousness = systemState.consciousness_level || 0;
        if (consciousness < this.config.CONSCIOUSNESS_THRESHOLD && finalLeverage > 50) {
            finalLeverage = Math.min(finalLeverage, 50);
        }

        // 3. Verificar exposici√≥n total
        const currentExposure = this.calculateCurrentExposure();
        const newExposureRatio = (finalLeverage * (tier.max_position_size || 0.2));
        
        if (currentExposure + newExposureRatio > this.config.MAX_TOTAL_EXPOSURE) {
            // Reducir leverage para mantener exposici√≥n dentro de l√≠mites
            const availableExposure = this.config.MAX_TOTAL_EXPOSURE - currentExposure;
            finalLeverage = Math.max(2, availableExposure / (tier.max_position_size || 0.2));
        }

        // 4. Ajustar por volatilidad si est√° habilitado
        if (this.config.VOLATILITY_SCALING) {
            const volatility = systemState.market_volatility || 0;
            if (volatility > tier.volatility_tolerance) {
                const volatilityPenalty = 1 - Math.min(0.5, (volatility - tier.volatility_tolerance) * 2);
                finalLeverage *= volatilityPenalty;
            }
        }

        // 5. Verificar drawdown actual
        if (this.matrixState.current_drawdown > this.config.MAX_DRAWDOWN_ALLOWED) {
            finalLeverage = Math.min(finalLeverage, 10); // Leverage conservador en drawdown
        }

        return Math.max(1, finalLeverage); // M√≠nimo 1x leverage
    }

    /**
     * üí∞ CALCULAR POSITION SIZE OPTIMAL
     */
    calculateOptimalPositionSize(leverage, tier, systemState) {
        // Base position size del tier
        let baseSize = tier.max_position_size || 0.2;

        // Ajustar por confianza del sistema
        const consciousness = systemState.consciousness_level || 0;
        const confidenceMultiplier = Math.min(1.5, consciousness / 0.5);
        
        // Ajustar por leverage - m√°s leverage, menos position size base
        const leverageAdjustment = Math.min(1.0, 20 / leverage);

        const finalSize = baseSize * confidenceMultiplier * leverageAdjustment;

        return Math.min(0.5, Math.max(0.05, finalSize)); // Entre 5% y 50%
    }

    /**
     * üìä CALCULAR EXPOSICI√ìN ACTUAL
     */
    calculateCurrentExposure() {
        let totalExposure = 0;
        
        for (const [symbol, position] of this.matrixState.active_positions) {
            totalExposure += (position.leverage || 1) * (position.position_size || 0);
        }
        
        return totalExposure;
    }

    /**
     * üìù GENERAR RATIONALE DE LEVERAGE
     */
    generateLeverageRationale(baseLeverage, finalLeverage, tier, sinergiaMultiplier) {
        const components = [
            `Base (${tier.name}): ${baseLeverage}x`,
            `Quantum Weight: ${tier.quantum_weight}`
        ];

        if (tier.quantum_boost) {
            components.push(`Quantum Boost: ${tier.quantum_boost}x`);
        }

        if (sinergiaMultiplier.total_multiplier > 1.1) {
            components.push(`Sinergia: ${sinergiaMultiplier.total_multiplier.toFixed(2)}x`);
        }

        if (sinergiaMultiplier.active_boosts.length > 0) {
            components.push(`Boosts: ${sinergiaMultiplier.active_boosts.join(', ')}`);
        }

        components.push(`Final: ${finalLeverage.toFixed(2)}x`);

        return components.join(' | ');
    }

    /**
     * üìä REGISTRAR POSICI√ìN ACTIVA
     */
    registerActivePosition(symbol, leverage, positionSize, entryPrice) {
        this.matrixState.active_positions.set(symbol, {
            leverage,
            position_size: positionSize,
            entry_price: entryPrice,
            timestamp: Date.now()
        });

        // Actualizar m√©tricas
        this.matrixState.current_total_exposure = this.calculateCurrentExposure();
        this.matrixState.leverage_utilization = this.matrixState.current_total_exposure / this.config.MAX_TOTAL_EXPOSURE;
        
        if (leverage > this.performanceMetrics.max_leverage_used) {
            this.performanceMetrics.max_leverage_used = leverage;
        }

        // Log posici√≥n extrema
        if (leverage > 50) {
            console.log(`‚ö° HIGH LEVERAGE POSITION: ${symbol} @ ${leverage.toFixed(2)}x`);
        }
    }

    /**
     * üéØ CERRAR POSICI√ìN
     */
    closePosition(symbol, profit = 0, success = true) {
        const position = this.matrixState.active_positions.get(symbol);
        if (!position) return;

        // Actualizar m√©tricas
        if (position.leverage > 25) { // High leverage trades
            if (success) {
                this.performanceMetrics.successful_high_leverage_trades++;
            } else {
                this.performanceMetrics.failed_high_leverage_trades++;
            }
        }

        this.performanceMetrics.total_leverage_profit += profit;

        // Remover posici√≥n activa
        this.matrixState.active_positions.delete(symbol);
        this.matrixState.current_total_exposure = this.calculateCurrentExposure();
        this.matrixState.leverage_utilization = this.matrixState.current_total_exposure / this.config.MAX_TOTAL_EXPOSURE;
    }

    /**
     * üåü ACTUALIZAR ESTADO DEL SISTEMA
     */
    updateSystemState(systemState) {
        this.matrixState.consciousness_level = systemState.consciousness_level || 0;
        this.matrixState.quantum_coherence = systemState.quantum_coherence || 0;
        this.matrixState.big_bang_active = systemState.big_bang_active || false;
        
        // Calcular quantum efficiency
        const leverageUtil = this.matrixState.leverage_utilization;
        const consciousness = this.matrixState.consciousness_level;
        this.matrixState.quantum_efficiency = (leverageUtil * consciousness) / 2;
    }

    /**
     * üìà OBTENER M√âTRICAS COMPLETAS
     */
    getQuantumMetrics() {
        return {
            matrix_state: this.matrixState,
            performance_metrics: this.performanceMetrics,
            quantum_tiers: this.quantumTiers,
            active_positions_count: this.matrixState.active_positions.size,
            total_exposure_percentage: (this.matrixState.current_total_exposure * 100).toFixed(2),
            leverage_utilization_percentage: (this.matrixState.leverage_utilization * 100).toFixed(2),
            timestamp: Date.now()
        };
    }

    /**
     * üö® EMERGENCY STOP - Reducir leverage extremo
     */
    emergencyLeverageReduction(factor = 0.5) {
        console.log('üö® EMERGENCY LEVERAGE REDUCTION ACTIVATED');
        
        for (const [symbol, position] of this.matrixState.active_positions) {
            if (position.leverage > 50) {
                position.leverage *= factor;
                console.log(`‚ö° ${symbol} leverage reduced to ${position.leverage.toFixed(2)}x`);
            }
        }
        
        this.matrixState.current_total_exposure = this.calculateCurrentExposure();
    }

    /**
     * üéØ RECOMENDACIONES DE LEVERAGE CU√ÅNTICO
     */
    getQuantumLeverageRecommendations(marketData, systemState) {
        const recommendations = [];
        
        // Solo recomendar si consciousness > 80%
        if ((systemState.consciousness_level || 0) < 0.8) {
            return recommendations;
        }

        // Analizar top s√≠mbolos por volumen
        const topSymbols = Object.entries(marketData)
            .filter(([symbol, data]) => (data.volume || 0) > 1000000)
            .sort(([,a], [,b]) => (b.volume || 0) - (a.volume || 0))
            .slice(0, 10)
            .map(([symbol]) => symbol);

        for (const symbol of topSymbols) {
            const tier = this.identifySymbolTier(symbol);
            if (!tier) continue;

            const mockSignal = { confidence: 0.8 };
            const leverageCalc = this.calculateQuantumLeverage(symbol, mockSignal, systemState);
            
            if (leverageCalc.leverage > 25) {
                recommendations.push({
                    symbol,
                    recommended_leverage: leverageCalc.leverage,
                    tier: leverageCalc.tier,
                    rationale: leverageCalc.rationale,
                    position_size: leverageCalc.position_size,
                    risk_level: leverageCalc.leverage > 75 ? 'EXTREME' : 'HIGH'
                });
            }
        }

        return recommendations.sort((a, b) => b.recommended_leverage - a.recommended_leverage);
    }
}

module.exports = QuantumLeverageMatrix;
