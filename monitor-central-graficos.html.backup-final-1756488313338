<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üìä MONITOR CENTRAL - GR√ÅFICOS QBTC BANDA 46</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 50%, #16213e 100%);
            color: #ffffff;
            min-height: 100vh;
        }

        .container {
            max-width: 1800px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .header h1 {
            font-size: 2.5em;
            background: linear-gradient(45deg, #4ecdc4, #45b7d1, #96ceb4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 10px;
        }

        .header p {
            color: #888;
            font-size: 1.1em;
        }

        .controls {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .control-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .control-group label {
            color: #4ecdc4;
            font-weight: bold;
        }

        .control-group select, .control-group input {
            padding: 8px 12px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            color: #ffffff;
            font-family: inherit;
        }

        .control-group select option {
            background: #1a1a2e;
            color: #ffffff;
        }

        .btn {
            background: linear-gradient(45deg, #4ecdc4, #45b7d1);
            color: #000;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(78, 205, 196, 0.3);
        }

        .btn.active {
            background: linear-gradient(45deg, #96ceb4, #4ecdc4);
        }

        .status-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            padding: 15px 20px;
            margin-bottom: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .status-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #4ecdc4;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(600px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .chart-container {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease;
        }

        .chart-container:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            border-color: rgba(78, 205, 196, 0.3);
        }

        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .chart-title {
            font-size: 1.3em;
            font-weight: bold;
            color: #4ecdc4;
        }

        .chart-price {
            font-size: 1.2em;
            font-weight: bold;
        }

        .price-up { color: #00ff00; }
        .price-down { color: #ff0000; }
        .price-neutral { color: #ffff00; }

        .chart-canvas {
            width: 100% !important;
            height: 300px !important;
        }

        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
        }

        .summary-card {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .summary-card h3 {
            color: #4ecdc4;
            margin-bottom: 10px;
            font-size: 1.1em;
        }

        .summary-value {
            font-size: 1.5em;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .summary-change {
            font-size: 0.9em;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #888;
        }

        .error {
            background: rgba(255, 0, 0, 0.1);
            color: #ff0000;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
            border: 1px solid rgba(255, 0, 0, 0.3);
        }

        .success {
            background: rgba(0, 255, 0, 0.1);
            color: #00ff00;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
            border: 1px solid rgba(0, 255, 0, 0.3);
        }

        @media (max-width: 768px) {
            .charts-grid {
                grid-template-columns: 1fr;
            }
            
            .controls {
                flex-direction: column;
                align-items: center;
            }
            
            .header h1 {
                font-size: 2em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä MONITOR CENTRAL - GR√ÅFICOS QBTC</h1>
            <p>Visualizaci√≥n en tiempo real de todos los s√≠mbolos - Banda 46</p>
        </div>

        <div class="controls">
            <div class="control-group">
                <label>Vista:</label>
                <select id="viewMode" onchange="changeViewMode()">
                    <option value="all">Todos los S√≠mbolos</option>
                    <option value="top">Top 5</option>
                    <option value="custom">Personalizado</option>
                </select>
            </div>
            
            <div class="control-group">
                <label>Timeframe:</label>
                <select id="timeframe" onchange="updateCharts()">
                    <option value="1m">1 Minuto</option>
                    <option value="5m">5 Minutos</option>
                    <option value="15m">15 Minutos</option>
                    <option value="1h">1 Hora</option>
                    <option value="4h">4 Horas</option>
                    <option value="1d">1 D√≠a</option>
                </select>
            </div>
            
            <div class="control-group">
                <label>Actualizaci√≥n:</label>
                <select id="updateInterval" onchange="changeUpdateInterval()">
                    <option value="5000">5 segundos</option>
                    <option value="10000">10 segundos</option>
                    <option value="30000" selected>30 segundos</option>
                    <option value="60000">1 minuto</option>
                </select>
            </div>
            
            <button class="btn" onclick="refreshAllCharts()">üîÑ Actualizar</button>
            <button class="btn" id="autoRefreshBtn" onclick="toggleAutoRefresh()">‚è∏Ô∏è Pausar</button>
        </div>

        <div class="status-bar">
            <div class="status-item">
                <span class="status-indicator"></span>
                <span>QBTC Core: Online</span>
            </div>
            <div class="status-item">
                <span class="status-indicator"></span>
                <span>SRONA API: Online</span>
            </div>
            <div class="status-item">
                <span class="status-indicator"></span>
                <span>Vigo Futures: Online</span>
            </div>
            <div class="status-item">
                <span>√öltima actualizaci√≥n: <span id="lastUpdate">Cargando...</span></span>
            </div>
        </div>

        <div class="summary-grid" id="summaryGrid">
            <!-- Resumen de s√≠mbolos se generar√° din√°micamente -->
        </div>

        <div class="charts-grid" id="chartsGrid">
            <!-- Los gr√°ficos se generar√°n din√°micamente -->
        </div>
    </div>

    <script>
        // Configuraci√≥n de la banda 46
        const BANDA_46_SERVICES = {
            SRONA_API: 'http://localhost:4601',
            QBTC_CORE: 'http://localhost:4602',
            FRONTEND_API: 'http://localhost:4603',
            VIGO_FUTURES: 'http://localhost:4604',
            DASHBOARD_QBTC: 'http://localhost:4605'
        };

        // S√≠mbolos disponibles
        const SYMBOLS = ['BTC', 'ETH', 'BNB', 'SOL', 'XRP', 'DOGE', 'ADA', 'DOT', 'LINK', 'MATIC'];
        
        // Variables globales
        let charts = {};
        let updateInterval = 30000;
        let autoRefresh = true;
        let currentViewMode = 'all';
        let currentTimeframe = '15m';

        // Inicializaci√≥n
        document.addEventListener('DOMContentLoaded', function() {
            initializeMonitor();
        });

        function initializeMonitor() {
            console.log('üöÄ Inicializando Monitor Central QBTC...');
            
            // Crear resumen de s√≠mbolos
            createSummaryGrid();
            
            // Crear gr√°ficos iniciales
            createCharts();
            
            // Iniciar actualizaci√≥n autom√°tica
            startAutoRefresh();
            
            // Actualizar estado de servicios
            updateServiceStatus();
        }

        function createSummaryGrid() {
            const summaryGrid = document.getElementById('summaryGrid');
            summaryGrid.innerHTML = '';
            
            SYMBOLS.forEach(symbol => {
                const card = document.createElement('div');
                card.className = 'summary-card';
                card.innerHTML = `
                    <h3>${symbol}</h3>
                    <div class="summary-value" id="price-${symbol}">$0.00</div>
                    <div class="summary-change" id="change-${symbol}">0.00%</div>
                `;
                summaryGrid.appendChild(card);
            });
        }

        function createCharts() {
            const chartsGrid = document.getElementById('chartsGrid');
            chartsGrid.innerHTML = '';
            
            const symbolsToShow = getSymbolsToShow();
            
            symbolsToShow.forEach(symbol => {
                const chartContainer = document.createElement('div');
                chartContainer.className = 'chart-container';
                chartContainer.innerHTML = `
                    <div class="chart-header">
                        <div class="chart-title">${symbol}/USDT</div>
                        <div class="chart-price" id="chart-price-${symbol}">$0.00</div>
                    </div>
                    <canvas id="chart-${symbol}" class="chart-canvas"></canvas>
                `;
                chartsGrid.appendChild(chartContainer);
                
                // Crear gr√°fico
                createChart(symbol);
            });
        }

        function createChart(symbol) {
            const ctx = document.getElementById(`chart-${symbol}`).getContext('2d');
            
            charts[symbol] = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: `${symbol}/USDT`,
                        data: [],
                        borderColor: '#4ecdc4',
                        backgroundColor: 'rgba(78, 205, 196, 0.1)',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        x: {
                            display: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#888'
                            }
                        },
                        y: {
                            display: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#888'
                            }
                        }
                    },
                    interaction: {
                        intersect: false,
                        mode: 'index'
                    }
                }
            });
        }

        function getSymbolsToShow() {
            switch(currentViewMode) {
                case 'top':
                    return SYMBOLS.slice(0, 5);
                case 'custom':
                    return SYMBOLS.slice(0, 3); // Mostrar solo 3 para vista personalizada
                default:
                    return SYMBOLS;
            }
        }

        async function updateCharts() {
            console.log('üìä Actualizando gr√°ficos...');
            
            try {
                // Obtener datos de todos los s√≠mbolos
                const promises = SYMBOLS.map(symbol => fetchSymbolData(symbol));
                const results = await Promise.allSettled(promises);
                
                // Procesar resultados
                results.forEach((result, index) => {
                    if (result.status === 'fulfilled') {
                        const symbol = SYMBOLS[index];
                        updateSymbolData(symbol, result.value);
                    } else {
                        console.error(`Error obteniendo datos de ${SYMBOLS[index]}:`, result.reason);
                    }
                });
                
                // Actualizar timestamp
                document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString();
                
            } catch (error) {
                console.error('Error actualizando gr√°ficos:', error);
                showError('Error al actualizar los gr√°ficos');
            }
        }

        async function fetchSymbolData(symbol) {
            try {
                // Intentar obtener datos del QBTC Core
                const response = await axios.get(`${BANDA_46_SERVICES.QBTC_CORE}/futures_data?symbol=${symbol}USDT`, {
                    timeout: 5000
                });
                
                if (response.data && response.data.success) {
                    return response.data.data;
                }
                
                // Si no hay datos del QBTC Core, usar datos simulados
                return generateMockData(symbol);
                
            } catch (error) {
                console.warn(`No se pudo obtener datos reales para ${symbol}, usando datos simulados`);
                return generateMockData(symbol);
            }
        }

        function generateMockData(symbol) {
            const basePrice = getBasePrice(symbol);
            const volatility = 0.02; // 2% de volatilidad
            
            const data = [];
            const labels = [];
            const now = new Date();
            
            // Generar 50 puntos de datos
            for (let i = 49; i >= 0; i--) {
                const time = new Date(now.getTime() - i * 60000); // Cada minuto
                const randomChange = (Math.random() - 0.5) * volatility;
                const price = basePrice * (1 + randomChange);
                
                data.push(price);
                labels.push(time.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }));
            }
            
            return {
                symbol: symbol,
                price: data[data.length - 1],
                change: ((data[data.length - 1] - data[0]) / data[0] * 100).toFixed(2),
                data: data,
                labels: labels
            };
        }

        function getBasePrice(symbol) {
            const prices = {
                'BTC': 118948.90,
                'ETH': 4636.73,
                'BNB': 456.78,
                'SOL': 196.72,
                'XRP': 0.58,
                'DOGE': 0.12,
                'ADA': 0.45,
                'DOT': 6.23,
                'LINK': 14.56,
                'MATIC': 0.78
            };
            return prices[symbol] || 100;
        }

        function updateSymbolData(symbol, data) {
            // Actualizar resumen
            const priceElement = document.getElementById(`price-${symbol}`);
            const changeElement = document.getElementById(`change-${symbol}`);
            
            if (priceElement && changeElement) {
                priceElement.textContent = `$${data.price.toLocaleString()}`;
                changeElement.textContent = `${data.change}%`;
                changeElement.className = `summary-change ${parseFloat(data.change) > 0 ? 'price-up' : parseFloat(data.change) < 0 ? 'price-down' : 'price-neutral'}`;
            }
            
            // Actualizar precio en el gr√°fico
            const chartPriceElement = document.getElementById(`chart-price-${symbol}`);
            if (chartPriceElement) {
                chartPriceElement.textContent = `$${data.price.toLocaleString()}`;
                chartPriceElement.className = `chart-price ${parseFloat(data.change) > 0 ? 'price-up' : parseFloat(data.change) < 0 ? 'price-down' : 'price-neutral'}`;
            }
            
            // Actualizar gr√°fico
            if (charts[symbol]) {
                charts[symbol].data.labels = data.labels;
                charts[symbol].data.datasets[0].data = data.data;
                charts[symbol].update('none');
            }
        }

        function changeViewMode() {
            currentViewMode = document.getElementById('viewMode').value;
            createCharts();
        }

        function changeUpdateInterval() {
            updateInterval = parseInt(document.getElementById('updateInterval').value);
            if (autoRefresh) {
                stopAutoRefresh();
                startAutoRefresh();
            }
        }

        function startAutoRefresh() {
            if (autoRefresh) {
                updateCharts();
                setTimeout(startAutoRefresh, updateInterval);
            }
        }

        function stopAutoRefresh() {
            autoRefresh = false;
        }

        function toggleAutoRefresh() {
            const btn = document.getElementById('autoRefreshBtn');
            if (autoRefresh) {
                stopAutoRefresh();
                btn.textContent = '‚ñ∂Ô∏è Reanudar';
                btn.className = 'btn';
            } else {
                autoRefresh = true;
                btn.textContent = '‚è∏Ô∏è Pausar';
                btn.className = 'btn active';
                startAutoRefresh();
            }
        }

        function refreshAllCharts() {
            updateCharts();
        }

        async function updateServiceStatus() {
            const services = [
                { name: 'QBTC Core', url: `${BANDA_46_SERVICES.QBTC_CORE}/health` },
                { name: 'SRONA API', url: `${BANDA_46_SERVICES.SRONA_API}/health` },
                { name: 'Vigo Futures', url: `${BANDA_46_SERVICES.VIGO_FUTURES}/health` }
            ];
            
            for (const service of services) {
                try {
                    await axios.get(service.url, { timeout: 3000 });
                    console.log(`‚úÖ ${service.name} est√° online`);
                } catch (error) {
                    console.warn(`‚ö†Ô∏è ${service.name} no est√° disponible`);
                }
            }
        }

        function showError(message) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error';
            errorDiv.textContent = message;
            document.querySelector('.container').insertBefore(errorDiv, document.querySelector('.charts-grid'));
            
            setTimeout(() => {
                errorDiv.remove();
            }, 5000);
        }

        function showSuccess(message) {
            const successDiv = document.createElement('div');
            successDiv.className = 'success';
            successDiv.textContent = message;
            document.querySelector('.container').insertBefore(successDiv, document.querySelector('.charts-grid'));
            
            setTimeout(() => {
                successDiv.remove();
            }, 3000);
        }
    </script>
</body>
</html>
