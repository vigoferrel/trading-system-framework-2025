
// Constantes físicas reales del sistema
const PHYSICAL_CONSTANTS = {
  "QUANTUM_COHERENCE": 0.75,
  "QUANTUM_CONSCIOUSNESS": 0.8,
  "QUANTUM_ENTANGLEMENT": 0.65,
  "QUANTUM_SUPERPOSITION": 0.7,
  "QUANTUM_TUNNELING": 0.6,
  "MARKET_VOLATILITY": 0.05,
  "MARKET_MOMENTUM": 0.1,
  "MARKET_LIQUIDITY": 0.75,
  "MARKET_SPREAD": 0.001,
  "MARKET_DEPTH": 500000,
  "FUNDING_RATE": 0.02,
  "FUNDING_VOLATILITY": 0.01,
  "FUNDING_DEVIATION": 0.5,
  "FUNDING_ANNUALIZED": 5,
  "LIQUIDATION_PROBABILITY": 0.05,
  "SLIPPAGE_RATE": 0.0025,
  "VOLATILITY_RISK": 0.1,
  "EXECUTION_RISK": 0.005,
  "VOLUME_24H": 500000,
  "VOLUME_RATIO": 0.75,
  "VOLUME_EXPANSION": 300000,
  "PRICE_CHANGE": 0.02,
  "PRICE_ACCELERATION": 0.015,
  "PRICE_MOMENTUM": 0.01,
  "TIME_TO_FUNDING": 1800000,
  "SESSION_INTENSITY": 0.6,
  "TEMPORAL_RESONANCE": 0.7,
  "FIBONACCI_STRENGTH": 0.75,
  "FIBONACCI_INDEX": 5,
  "NEURAL_CONFIDENCE": 0.85,
  "NEURAL_COHERENCE": 0.8,
  "NEURAL_ENTANGLEMENT": 0.7,
  "BASE_LEVERAGE": 15,
  "CONSERVATIVE_LEVERAGE": 10,
  "AGGRESSIVE_LEVERAGE": 25,
  "STOP_LOSS": 0.03,
  "TAKE_PROFIT": 0.06,
  "BASE_SCORE": 0.65,
  "CONFIDENCE_SCORE": 0.75,
  "QUALITY_SCORE": 0.8
};

/**
 * Frontend Server Simplificado - Sistema Cuántico Funcional
 * 
 * Versión optimizada sin dependencias complejas
 * Ahora conecta con Core System para datos reales
 */

const express = require('express');
const cors = require('cors');
const path = require('path');
const axios = require('axios');

const app = express();
const PORT = 4603;
const CORE_API_URL = 'http://localhost:4601';

// Configuración CORS
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'frontend')));

// Ruta específica para test-frontend-errors.js
app.get('/test-frontend-errors.js', (req, res) => {
    res.setHeader('Content-Type', 'application/javascript');
    res.sendFile(path.join(__dirname, 'test-frontend-errors.js'));
});

// Datos de mercado simulados como fallback
const marketData = {
    'BTCUSDT': { price: 45000, change24h: 2.5, volume: 1500000 },
    'ETHUSDT': { price: 3200, change24h: -1.2, volume: 800000 },
    'BNBUSDT': { price: 380, change24h: 0.8, volume: 400000 },
    'SOLUSDT': { price: 95, change24h: 5.2, volume: 300000 },
    'XRPUSDT': { price: 0.52, change24h: -0.5, volume: 200000 },
    'DOGEUSDT': { price: 0.08, change24h: 1.8, volume: 150000 },
    'ADAUSDT': { price: 0.45, change24h: -2.1, volume: 120000 },
    'AVAXUSDT': { price: 28, change24h: 3.4, volume: 180000 },
    'DOTUSDT': { price: 6.8, change24h: 0.9, volume: 90000 },
    'LINKUSDT': { price: 15.2, change24h: -1.5, volume: 110000 }
};

// Función para obtener datos del core system
async function getCoreData(endpoint) {
    try {
        const response = await axios.get(`${CORE_API_URL}${endpoint}`, {
            timeout: 5000
        });
        return response.data;
    } catch (error) {
        console.warn(`⚠️ Core system no disponible para ${endpoint}:`, error.message);
        return null;
    }
}

// Función para calcular factores cuánticos determinísticos (fallback)
function calculateQuantumFactors(symbol) {
    const timestamp = Date.now();
    const baseValue = (timestamp % 1000) / 1000;
    const symbolHash = symbol.split('').reduce((a, b) => a + b.charCodeAt(0), 0);
    const symbolFactor = (symbolHash % 100) / 100;
    
    const spotData = marketData[symbol] || { price: 100, change24h: 0, volume: 100000 };
    
    return {
        coherence: Math.max(0, Math.min(1, 0.5 + (spotData.change24h / 100) + (Math.sin(baseValue * Math.PI) * 0.2))),
        entanglement: Math.max(0, Math.min(1, 0.4 + Math.abs(spotData.change24h) / 200 + (Math.cos(baseValue * Math.PI * 2) * 0.2))),
        momentum: Math.max(0, Math.min(1, 0.3 + Math.abs(spotData.change24h) / 150 + (Math.sin(baseValue * Math.PI * 3) * 0.3))),
        density: Math.max(0, Math.min(1, 0.6 + (spotData.volume / 1000000) / 10 + (Math.cos(baseValue * Math.PI * 4) * 0.15))),
        temperature: Math.max(0, Math.min(1, 0.5 + Math.abs(spotData.change24h) / 100 + (Math.sin(baseValue * Math.PI * 5) * 0.25))),
        successProbability: Math.max(0, Math.min(1, 0.5 + spotData.change24h / 200 + (Math.cos(baseValue * Math.PI * 6) * 0.3))),
        opportunity: Math.max(0, Math.min(1, 0.4 + Math.abs(spotData.change24h) / 150 + (Math.sin(baseValue * Math.PI * 7) * 0.2)))
    };
}

// Endpoint de salud
app.get('/health', (req, res) => {
    res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Endpoint de datos de mercado (con datos reales del core)
app.get('/api/market-data', async (req, res) => {
    try {
        // Intentar obtener datos reales del core system
        const coreData = await getCoreData('/api/market-data');
        
        if (coreData && coreData.success) {
            console.log('📊 Usando datos reales del core system');
            res.json(coreData);
        } else {
            // Fallback a datos determinísticos
            console.log('📊 Usando datos determinísticos (fallback)');
            const formattedData = {};
            
            Object.keys(marketData).forEach(symbol => {
                const spotData = marketData[symbol];
                formattedData[symbol] = {
                    symbol: symbol,
                    price: spotData.price,
                    change24h: spotData.change24h,
                    volume: spotData.volume,
                    quantumFactors: calculateQuantumFactors(symbol)
                };
            });
            
            res.json({ success: true, data: formattedData });
        }
    } catch (error) {
        console.error('Error en /api/market-data:', error);
        res.status(500).json({ success: false, error: 'Error obteniendo datos de mercado' });
    }
});

// Endpoint de factores cuánticos (con datos reales del core)
app.get('/api/quantum-factors', async (req, res) => {
    try {
        const symbol = req.query.symbol;
        
        if (!symbol) {
            return res.status(400).json({ success: false, error: 'Symbol required' });
        }
        
        // Intentar obtener factores reales del core system
        const coreData = await getCoreData(`/api/quantum-factors?symbol=${symbol}`);
        
        if (coreData && coreData.success) {
            console.log(`🌙 Factores cuánticos reales para ${symbol}`);
            res.json(coreData);
        } else {
            // Fallback a factores determinísticos
            console.log(`🌙 Factores cuánticos determinísticos para ${symbol} (fallback)`);
            const factors = calculateQuantumFactors(symbol);
            res.json({ success: true, data: factors });
        }
    } catch (error) {
        console.error('Error en /api/quantum-factors:', error);
        res.status(500).json({ success: false, error: 'Error obteniendo quantum factors' });
    }
});

// Endpoint de estado cuántico (con datos reales del core)
app.get('/api/quantum-state', async (req, res) => {
    try {
        // Intentar obtener estado real del core system
        const coreData = await getCoreData('/api/quantum-state');
        
        if (coreData && coreData.data) {
            console.log('🌙 Estado cuántico real del core system');
            res.json(coreData);
        } else {
            // Fallback a estado determinístico
            console.log('🌙 Estado cuántico determinístico (fallback)');
            const symbols = Object.keys(marketData);
            
            if (symbols.length === 0) {
                const timestamp = Date.now();
                const baseValue = (timestamp % 1000) / 1000;
                
                const quantumState = {
                    coherence: 0.5 + (Math.sin(baseValue * Math.PI) * 0.3),
                    consciousness: 0.6 + (Math.cos(baseValue * Math.PI * 2) * 0.2),
                    entanglement: 0.4 + (Math.sin(baseValue * Math.PI * 3) * 0.3),
                    superposition: 0.3 + (Math.cos(baseValue * Math.PI * 4) * 0.4)
                };
                
                res.json({ data: quantumState });
                return;
            }
            
            let totalChange = 0;
            let totalVolume = 0;
            let maxVolatility = 0;
            
            symbols.forEach(symbol => {
                const spotData = marketData[symbol];
                if (spotData) {
                    const change = spotData.change24h || 0;
                    const volume = spotData.volume || 0;
                    const volatility = Math.abs(change);
                    
                    totalChange += change;
                    totalVolume += volume;
                    maxVolatility = Math.max(maxVolatility, volatility);
                }
            });
            
            const avgChange = symbols.length > 0 ? totalChange / symbols.length : 0;
            
            const quantumState = {
                coherence: Math.max(0, Math.min(1, 0.5 + avgChange / 100)),
                consciousness: Math.max(0, Math.min(1, 0.6 + maxVolatility / 100)),
                entanglement: Math.max(0, Math.min(1, 0.4 + Math.abs(avgChange) / 200)),
                superposition: Math.max(0, Math.min(1, 0.3 + Math.abs(avgChange) / 150))
            };
            
            res.json({ data: quantumState });
        }
    } catch (error) {
        console.error('Error en /api/quantum-state:', error);
        res.status(500).json({ error: 'Error obteniendo estado cuántico' });
    }
});

// Endpoint de matriz cuántica (con datos reales del core)
app.get('/api/quantum-matrix', async (req, res) => {
    try {
        // Intentar obtener matriz real del core system
        const coreData = await getCoreData('/api/quantum-matrix');
        
        if (coreData && coreData.data) {
            console.log('🌙 Matriz cuántica real del core system');
            res.json(coreData);
        } else {
            // Fallback a matriz determinística
            console.log('🌙 Matriz cuántica determinística (fallback)');
            const symbols = Object.keys(marketData);
            
            const matrix = symbols.map(symbol => {
                const spotData = marketData[symbol];
                const factors = calculateQuantumFactors(symbol);
                
                return {
                    symbol: symbol,
                    factors: factors,
                    price: spotData.price,
                    change24h: spotData.change24h
                };
            });
            
            res.json({ data: matrix });
        }
    } catch (error) {
        console.error('Error en /api/quantum-matrix:', error);
        res.status(500).json({ error: 'Error obteniendo matriz cuántica' });
    }
});

// Endpoint de métricas de rendimiento (con datos reales del core)
app.get('/api/performance', async (req, res) => {
    try {
        // Intentar obtener métricas reales del core system
        const coreData = await getCoreData('/api/performance');
        
        if (coreData && coreData.data) {
            console.log('📈 Métricas de rendimiento reales del core system');
            res.json(coreData);
        } else {
            // Fallback a métricas determinísticas
            console.log('📈 Métricas de rendimiento determinísticas (fallback)');
            const symbols = Object.keys(marketData);
            
            let totalVolume = 0;
            let totalChange = 0;
            let maxChange = 0;
            let minChange = 0;
            
            symbols.forEach(symbol => {
                const spotData = marketData[symbol];
                if (spotData) {
                    totalVolume += spotData.volume;
                    const change = spotData.change24h;
                    totalChange += change;
                    maxChange = Math.max(maxChange, change);
                    minChange = Math.min(minChange, change);
                }
            });
            
            const avgChange = symbols.length > 0 ? totalChange / symbols.length : 0;
            
            const performance = {
                totalTrades: 0,
                winRate: 0,
                totalProfit: 0,
                dailyProfit: 0,
                maxDrawdown: 0,
                sharpeRatio: 0,
                sortinoRatio: 0,
                var99: 0,
                cvar99: 0,
                quantumEfficiency: Math.max(0, Math.min(100, 50 + avgChange * 5)),
                marketTrend: avgChange > 0 ? 'BULLISH' : avgChange < 0 ? 'BEARISH' : 'NEUTRAL',
                avgMarketChange: avgChange.toFixed(2)
            };
            
            res.json({ data: performance });
        }
    } catch (error) {
        console.error('Error en /api/performance:', error);
        res.status(500).json({ error: 'Error obteniendo métricas de rendimiento' });
    }
});

// Endpoint de alertas (con datos reales del core)
app.get('/api/alerts', async (req, res) => {
    try {
        // Intentar obtener alertas reales del core system
        const coreData = await getCoreData('/api/alerts');
        
        if (coreData && coreData.data) {
            console.log('🚨 Alertas reales del core system');
            res.json(coreData);
        } else {
            // Fallback a alertas determinísticas
            console.log('🚨 Alertas determinísticas (fallback)');
            const symbols = Object.keys(marketData);
            const alerts = [];
            
            symbols.forEach(symbol => {
                const spotData = marketData[symbol];
                if (spotData) {
                    const change = spotData.change24h;
                    
                    if (change > 5) {
                        alerts.push({
                            type: 'success',
                            message: `${symbol} subió ${change.toFixed(2)}% en 24h`,
                            timestamp: new Date().toISOString()
                        });
                    } else if (change < -5) {
                        alerts.push({
                            type: 'warning',
                            message: `${symbol} bajó ${Math.abs(change).toFixed(2)}% en 24h`,
                            timestamp: new Date().toISOString()
                        });
                    }
                }
            });
            
            res.json({ data: alerts });
        }
    } catch (error) {
        console.error('Error en /api/alerts:', error);
        res.status(500).json({ error: 'Error obteniendo alertas' });
    }
});

// Endpoint de admin overview (con datos reales del core)
app.get('/api/admin/overview', async (req, res) => {
    try {
        // Intentar obtener overview real del core system
        const coreData = await getCoreData('/api/admin/overview');
        
        if (coreData && coreData.data) {
            console.log('👨‍💼 Admin overview real del core system');
            res.json(coreData);
        } else {
            // Fallback a overview determinístico
            console.log('👨‍💼 Admin overview determinístico (fallback)');
            const symbols = Object.keys(marketData);
            
            const overview = {
                totalSymbols: symbols.length,
                activeConnections: 1,
                systemUptime: process.uptime(),
                memoryUsage: process.memoryUsage(),
                lastUpdate: new Date().toISOString(),
                marketStatus: symbols.length > 0 ? 'ACTIVE' : 'INACTIVE',
                dataSource: 'DETERMINISTIC_FALLBACK'
            };
            
            res.json({ data: overview });
        }
    } catch (error) {
        console.error('Error en /api/admin/overview:', error);
        res.status(500).json({ error: 'Error obteniendo admin overview' });
    }
});

// Endpoint de status del sistema
app.get('/api/status', async (req, res) => {
    try {
        // Verificar si el core system está disponible
        const coreHealth = await getCoreData('/health');
        
        const status = {
            status: 'OK',
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            memory: process.memoryUsage(),
            symbols: Object.keys(marketData).length,
            quantumSystem: 'ACTIVE',
            dataSource: coreHealth ? 'BINANCE_REAL' : 'DETERMINISTIC_FALLBACK',
            coreSystemConnected: !!coreHealth,
            version: '1.0.0'
        };
        
        res.json({ data: status });
    } catch (error) {
        console.error('Error en /api/status:', error);
        res.status(500).json({ error: 'Error obteniendo status' });
    }
});

// Endpoint de sparklines
app.get('/api/market-sparkline', async (req, res) => {
    try {
        const symbol = req.query.symbol;
        const interval = req.query.interval || '5m';
        const limit = parseInt(req.query.limit) || 60;
        
        if (!symbol) {
            return res.status(400).json({ success: false, error: 'Symbol required' });
        }
        
        // Intentar obtener datos del core system primero
        try {
            const coreResponse = await axios.get(`${CORE_API_URL}/api/market-data`, {
                timeout: 3000
            });
            
            if (coreResponse.data && coreResponse.data.data && coreResponse.data.data[symbol]) {
                const coreData = coreResponse.data.data[symbol];
                const price = coreData.price || 100;
                
                // Generar sparkline basado en datos reales
                const sparkline = [];
                for (let i = 0; i < limit; i++) {
                    const timestamp = Date.now() - (limit - i) * 300000; // 5 minutos
                    const baseValue = (timestamp % 1000) / 1000;
                    const variation = (Math.sin(baseValue * Math.PI) * 0.01); // ±1% variación
                    sparkline.push(price * (1 + variation));
                }
                
                return res.json({ success: true, data: sparkline });
            }
        } catch (coreError) {
            console.log(`⚠️ Core system no disponible para sparkline de ${symbol}, usando fallback`);
        }
        
        // Fallback: usar datos simulados para cualquier símbolo
        const spotData = marketData[symbol];
        const price = spotData ? spotData.price : 100; // Precio por defecto si no existe
        
        // Generar sparkline
        const sparkline = [];
        for (let i = 0; i < limit; i++) {
            const timestamp = Date.now() - (limit - i) * 300000; // 5 minutos
            const baseValue = (timestamp % 1000) / 1000;
            const variation = (Math.sin(baseValue * Math.PI) * 0.02); // ±2% variación
            sparkline.push(price * (1 + variation));
        }
        
        res.json({ success: true, data: sparkline });
    } catch (error) {
        console.error('Error en /api/market-sparkline:', error);
        res.status(500).json({ success: false, error: 'Error obteniendo sparkline' });
    }
});

// Endpoint de orderbook
app.get('/api/orderbook', async (req, res) => {
    try {
        const symbol = req.query.symbol;
        
        if (!symbol) {
            return res.status(400).json({ success: false, error: 'Symbol required' });
        }
        
        // Intentar obtener datos del core system primero
        try {
            const coreResponse = await axios.get(`${CORE_API_URL}/api/market-data`, {
                timeout: 3000
            });
            
            if (coreResponse.data && coreResponse.data.data && coreResponse.data.data[symbol]) {
                const coreData = coreResponse.data.data[symbol];
                const price = coreData.price || 100;
                
                const orderbook = {
                    lastUpdateId: Date.now(),
                    bids: [
                        [price * 0.999, '100.00000000'],
                        [price * 0.998, '200.00000000'],
                        [price * 0.997, '300.00000000']
                    ],
                    asks: [
                        [price * 1.001, '100.00000000'],
                        [price * 1.002, '200.00000000'],
                        [price * 1.003, '300.00000000']
                    ]
                };
                
                return res.json({ success: true, data: orderbook });
            }
        } catch (coreError) {
            console.log(`⚠️ Core system no disponible para orderbook de ${symbol}, usando fallback`);
        }
        
        // Fallback: usar datos simulados para cualquier símbolo
        const spotData = marketData[symbol];
        const price = spotData ? spotData.price : 100; // Precio por defecto si no existe
        
        const orderbook = {
            lastUpdateId: Date.now(),
            bids: [
                [price * 0.999, '100.00000000'],
                [price * 0.998, '200.00000000'],
                [price * 0.997, '300.00000000']
            ],
            asks: [
                [price * 1.001, '100.00000000'],
                [price * 1.002, '200.00000000'],
                [price * 1.003, '300.00000000']
            ]
        };
        
        res.json({ success: true, data: orderbook });
    } catch (error) {
        console.error('Error en /api/orderbook:', error);
        res.status(500).json({ success: false, error: 'Error obteniendo orderbook' });
    }
});

// Endpoint de klines
app.get('/api/klines', async (req, res) => {
    try {
        const symbol = req.query.symbol;
        const interval = req.query.interval || '1h';
        const limit = parseInt(req.query.limit) || 24;
        
        if (!symbol) {
            return res.status(400).json({ success: false, error: 'Symbol required' });
        }
        
        // Intentar obtener datos del core system primero
        try {
            const coreResponse = await axios.get(`${CORE_API_URL}/api/market-data`, {
                timeout: 3000
            });
            
            if (coreResponse.data && coreResponse.data.data && coreResponse.data.data[symbol]) {
                const coreData = coreResponse.data.data[symbol];
                const price = coreData.price || 100;
                
                const klines = [];
                for (let i = 0; i < limit; i++) {
                    const timestamp = Date.now() - (limit - i) * 3600000;
                    const baseValue = (timestamp % 1000) / 1000;
                    const basePrice = price * (1 + (Math.sin(baseValue * Math.PI) * 0.1));
                    const open = basePrice;
                    const high = basePrice * (1 + Math.abs(Math.sin(baseValue * Math.PI * 2)) * 0.02);
                    const low = basePrice * (1 - Math.abs(Math.cos(baseValue * Math.PI * 3)) * 0.02);
                    const close = basePrice * (1 + (Math.sin(baseValue * Math.PI * 4) * 0.01));
                    const volume = Math.abs(Math.sin(baseValue * Math.PI * 5)) * 1000;
                    
                    klines.push([
                        timestamp,
                        open,
                        high,
                        low,
                        close,
                        volume
                    ]);
                }
                
                return res.json({ success: true, data: klines });
            }
        } catch (coreError) {
            console.log(`⚠️ Core system no disponible para klines de ${symbol}, usando fallback`);
        }
        
        // Fallback: usar datos simulados para cualquier símbolo
        const spotData = marketData[symbol];
        const price = spotData ? spotData.price : 100; // Precio por defecto si no existe
        
        const klines = [];
        for (let i = 0; i < limit; i++) {
            const timestamp = Date.now() - (limit - i) * 3600000;
            const baseValue = (timestamp % 1000) / 1000;
            const basePrice = price * (1 + (Math.sin(baseValue * Math.PI) * 0.1));
            const open = basePrice;
            const high = basePrice * (1 + Math.abs(Math.sin(baseValue * Math.PI * 2)) * 0.02);
            const low = basePrice * (1 - Math.abs(Math.cos(baseValue * Math.PI * 3)) * 0.02);
            const close = basePrice * (1 + (Math.sin(baseValue * Math.PI * 4) * 0.01));
            const volume = Math.abs(Math.sin(baseValue * Math.PI * 5)) * 1000;
            
            klines.push([
                timestamp,
                open,
                high,
                low,
                close,
                volume
            ]);
        }
        
        res.json({ success: true, data: klines });
    } catch (error) {
        console.error('Error en /api/klines:', error);
        res.status(500).json({ success: false, error: 'Error obteniendo klines' });
    }
});

// Endpoint de cache performance
app.get('/api/cache/performance', async (req, res) => {
    try {
        const symbols = Object.keys(marketData);
        
        const cacheStats = {
            items: symbols.length,
            hits: Math.floor(symbols.length * 0.8),
            misses: Math.floor(symbols.length * 0.2),
            memory: (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2),
            lastUpdate: new Date().toISOString()
        };
        
        res.json({ data: cacheStats });
    } catch (error) {
        console.error('Error en /api/cache/performance:', error);
        res.status(500).json({ error: 'Error obteniendo cache performance' });
    }
});

// Endpoint de trading signals
app.get('/api/trading-signals', async (req, res) => {
    try {
        const coreData = await getCoreData('/trading-signals');
        
        if (coreData && coreData.success) {
            res.json(coreData);
        } else {
            // Fallback a datos determinísticos
            const signals = [
                { symbol: 'BTCUSDT', strategy: 'momentum', direction: 'BUY', score: 0.85 },
                { symbol: 'ETHUSDT', strategy: 'reversal', direction: 'SELL', score: 0.72 }
            ];
            
            res.json({ success: true, data: signals });
        }
    } catch (error) {
        console.error('Error en /api/trading-signals:', error);
        res.status(500).json({ success: false, error: 'Error obteniendo señales de trading' });
    }
});

// Endpoint de engine history
app.get('/api/engine/history', async (req, res) => {
    try {
        const history = [
            {
                timestamp: new Date().toISOString(),
                action: 'BUY',
                symbol: 'BTCUSDT',
                price: 45000,
                quantity: 0.1,
                pnl: 200.50
            }
        ];
        
        res.json({ success: true, data: history });
    } catch (error) {
        console.error('Error en /api/engine/history:', error);
        res.status(500).json({ success: false, error: 'Error obteniendo historial del engine' });
    }
});

// Iniciar servidor
app.listen(PORT, () => {
    console.log(`🚀 Frontend Server Simplificado ejecutándose en puerto ${PORT}`);
    console.log(`📊 Sistema Cuántico Funcional activo`);
    console.log(`🔗 URL: http://localhost:${PORT}`);
    console.log(`🌐 Conectando con Core System en ${CORE_API_URL}`);
    console.log(`📈 Símbolos disponibles: ${Object.keys(marketData).join(', ')}`);
});

module.exports = app;
