
// Constantes f√≠sicas reales del sistema
const PHYSICAL_CONSTANTS = {
  "QUANTUM_COHERENCE": 0.75,
  "QUANTUM_CONSCIOUSNESS": 0.8,
  "QUANTUM_ENTANGLEMENT": 0.65,
  "QUANTUM_SUPERPOSITION": 0.7,
  "QUANTUM_TUNNELING": 0.6,
  "MARKET_VOLATILITY": 0.05,
  "MARKET_MOMENTUM": 0.1,
  "MARKET_LIQUIDITY": 0.75,
  "MARKET_SPREAD": 0.001,
  "MARKET_DEPTH": 500000,
  "FUNDING_RATE": 0.02,
  "FUNDING_VOLATILITY": 0.01,
  "FUNDING_DEVIATION": 0.5,
  "FUNDING_ANNUALIZED": 5,
  "LIQUIDATION_PROBABILITY": 0.05,
  "SLIPPAGE_RATE": 0.0025,
  "VOLATILITY_RISK": 0.1,
  "EXECUTION_RISK": 0.005,
  "VOLUME_24H": 500000,
  "VOLUME_RATIO": 0.75,
  "VOLUME_EXPANSION": 300000,
  "PRICE_CHANGE": 0.02,
  "PRICE_ACCELERATION": 0.015,
  "PRICE_MOMENTUM": 0.01,
  "TIME_TO_FUNDING": 1800000,
  "SESSION_INTENSITY": 0.6,
  "TEMPORAL_RESONANCE": 0.7,
  "FIBONACCI_STRENGTH": 0.75,
  "FIBONACCI_INDEX": 5,
  "NEURAL_CONFIDENCE": 0.85,
  "NEURAL_COHERENCE": 0.8,
  "NEURAL_ENTANGLEMENT": 0.7,
  "BASE_LEVERAGE": 15,
  "CONSERVATIVE_LEVERAGE": 10,
  "AGGRESSIVE_LEVERAGE": 25,
  "STOP_LOSS": 0.03,
  "TAKE_PROFIT": 0.06,
  "BASE_SCORE": 0.65,
  "CONFIDENCE_SCORE": 0.75,
  "QUALITY_SCORE": 0.8
};

/**
 * üåô TEST FINAL - QBTC-UNIFIED PRIME QUANTUM SYSTEM
 * üî¨ VERIFICACI√ìN COMPLETA DEL SISTEMA
 */

const axios = require('axios');

const CORE_URL = 'http://localhost:4601';
const FRONTEND_URL = 'http://localhost:4603';

async function testEndpoint(url, name) {
    try {
        const response = await axios.get(url, { timeout: 5000 });
        console.log(`‚úÖ ${name}: OK`);
        return { success: true, data: response.data };
    } catch (error) {
        console.log(`‚ùå ${name}: ERROR - ${error.message}`);
        return { success: false, error: error.message };
    }
}

async function runFinalTest() {
    console.log('üåô INICIANDO TEST FINAL - QBTC-UNIFIED PRIME QUANTUM SYSTEM');
    console.log('=' .repeat(60));
    
    // Test Core System
    console.log('\nüî¨ TESTEANDO CORE SYSTEM (Puerto 4601):');
    console.log('-'.repeat(40));
    
    const coreTests = [
        { url: `${CORE_URL}/health`, name: 'Health Check' },
        { url: `${CORE_URL}/api/opportunities`, name: 'Oportunidades' },
        { url: `${CORE_URL}/api/neural-context`, name: 'Contexto Neural' },
        { url: `${CORE_URL}/api/market-health`, name: 'Salud del Mercado' },
        { url: `${CORE_URL}/api/quantum-metrics`, name: 'M√©tricas Cu√°nticas' },
        { url: `${CORE_URL}/api/execute-now`, name: 'Execute Now' },
        { url: `${CORE_URL}/api/system-status`, name: 'Estado del Sistema' }
    ];
    
    const coreResults = [];
    for (const test of coreTests) {
        const result = await testEndpoint(test.url, test.name);
        coreResults.push(result);
    }
    
    // Test Frontend System
    console.log('\nüåä TESTEANDO FRONTEND SYSTEM (Puerto 4603):');
    console.log('-'.repeat(40));
    
    const frontendTests = [
        { url: `${FRONTEND_URL}/api/status`, name: 'Status Frontend' },
        { url: `${FRONTEND_URL}/api/opportunities`, name: 'Oportunidades Frontend' },
        { url: `${FRONTEND_URL}/api/top-opportunities`, name: 'Top Oportunidades' },
        { url: `${FRONTEND_URL}/api/quantum-metrics`, name: 'M√©tricas Cu√°nticas Frontend' },
        { url: `${FRONTEND_URL}/api/execute-now`, name: 'Execute Now Frontend' },
        { url: `${FRONTEND_URL}/api/market-health`, name: 'Salud del Mercado Frontend' }
    ];
    
    const frontendResults = [];
    for (const test of frontendTests) {
        const result = await testEndpoint(test.url, test.name);
        frontendResults.push(result);
    }
    
    // Test Data Flow
    console.log('\nüîÑ TESTEANDO FLUJO DE DATOS:');
    console.log('-'.repeat(40));
    
    try {
        const coreOpportunities = await axios.get(`${CORE_URL}/api/opportunities`, { timeout: 5000 });
        const frontendOpportunities = await axios.get(`${FRONTEND_URL}/api/top-opportunities`, { timeout: 5000 });
        
        if (coreOpportunities.data.success && frontendOpportunities.data.success) {
            const coreCount = coreOpportunities.data.opportunities?.length || 0;
            const frontendCount = frontendOpportunities.data.data?.length || 0;
            
            console.log(`‚úÖ Flujo de datos: Core (${coreCount}) ‚Üí Frontend (${frontendCount})`);
            
            if (coreCount === frontendCount) {
                console.log('‚úÖ Sincronizaci√≥n de datos: PERFECTA');
            } else {
                console.log('‚ö†Ô∏è Sincronizaci√≥n de datos: PARCIAL');
            }
        } else {
            console.log('‚ùå Flujo de datos: ERROR');
        }
    } catch (error) {
        console.log(`‚ùå Flujo de datos: ERROR - ${error.message}`);
    }
    
    // Resumen Final
    console.log('\nüìä RESUMEN FINAL:');
    console.log('=' .repeat(60));
    
    const coreSuccess = coreResults.filter(r => r.success).length;
    const frontendSuccess = frontendResults.filter(r => r.success).length;
    
    console.log(`üî¨ Core System: ${coreSuccess}/${coreTests.length} endpoints funcionando`);
    console.log(`üåä Frontend System: ${frontendSuccess}/${frontendTests.length} endpoints funcionando`);
    console.log(`üéØ Total: ${coreSuccess + frontendSuccess}/${coreTests.length + frontendTests.length} endpoints funcionando`);
    
    const successRate = ((coreSuccess + frontendSuccess) / (coreTests.length + frontendTests.length)) * 100;
    
    if (successRate >= 90) {
        console.log('üèÜ SISTEMA: EXCELENTE - Listo para producci√≥n');
    } else if (successRate >= 70) {
        console.log('‚úÖ SISTEMA: BUENO - Funcional con algunas limitaciones');
    } else {
        console.log('‚ö†Ô∏è SISTEMA: REQUIERE ATENCI√ìN - Problemas detectados');
    }
    
    console.log('\nüåô QBTC-UNIFIED PRIME QUANTUM SYSTEM - TEST COMPLETADO');
}

// Ejecutar test
runFinalTest().catch(console.error);
